// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := vercel.NewProject(ctx, "example", &vercel.ProjectArgs{
//				Name: pulumi.String("example-with-members"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vercel.NewProjectMembers(ctx, "example", &vercel.ProjectMembersArgs{
//				ProjectId: example.ID(),
//				Members: vercel.ProjectMembersMemberArray{
//					&vercel.ProjectMembersMemberArgs{
//						Email: pulumi.String("user@example.com"),
//						Role:  pulumi.String("PROJECT_VIEWER"),
//					},
//					&vercel.ProjectMembersMemberArgs{
//						Username: pulumi.String("some-example-user"),
//						Role:     pulumi.String("PROJECT_DEVELOPER"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ProjectMembers struct {
	pulumi.CustomResourceState

	// The set of members to manage for this project.
	Members ProjectMembersMemberArrayOutput `pulumi:"members"`
	// The ID of the existing Vercel Project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewProjectMembers registers a new resource with the given unique name, arguments, and options.
func NewProjectMembers(ctx *pulumi.Context,
	name string, args *ProjectMembersArgs, opts ...pulumi.ResourceOption) (*ProjectMembers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectMembers
	err := ctx.RegisterResource("vercel:index/projectMembers:ProjectMembers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectMembers gets an existing ProjectMembers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectMembers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectMembersState, opts ...pulumi.ResourceOption) (*ProjectMembers, error) {
	var resource ProjectMembers
	err := ctx.ReadResource("vercel:index/projectMembers:ProjectMembers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectMembers resources.
type projectMembersState struct {
	// The set of members to manage for this project.
	Members []ProjectMembersMember `pulumi:"members"`
	// The ID of the existing Vercel Project.
	ProjectId *string `pulumi:"projectId"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

type ProjectMembersState struct {
	// The set of members to manage for this project.
	Members ProjectMembersMemberArrayInput
	// The ID of the existing Vercel Project.
	ProjectId pulumi.StringPtrInput
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (ProjectMembersState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMembersState)(nil)).Elem()
}

type projectMembersArgs struct {
	// The set of members to manage for this project.
	Members []ProjectMembersMember `pulumi:"members"`
	// The ID of the existing Vercel Project.
	ProjectId string `pulumi:"projectId"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a ProjectMembers resource.
type ProjectMembersArgs struct {
	// The set of members to manage for this project.
	Members ProjectMembersMemberArrayInput
	// The ID of the existing Vercel Project.
	ProjectId pulumi.StringInput
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (ProjectMembersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMembersArgs)(nil)).Elem()
}

type ProjectMembersInput interface {
	pulumi.Input

	ToProjectMembersOutput() ProjectMembersOutput
	ToProjectMembersOutputWithContext(ctx context.Context) ProjectMembersOutput
}

func (*ProjectMembers) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMembers)(nil)).Elem()
}

func (i *ProjectMembers) ToProjectMembersOutput() ProjectMembersOutput {
	return i.ToProjectMembersOutputWithContext(context.Background())
}

func (i *ProjectMembers) ToProjectMembersOutputWithContext(ctx context.Context) ProjectMembersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMembersOutput)
}

// ProjectMembersArrayInput is an input type that accepts ProjectMembersArray and ProjectMembersArrayOutput values.
// You can construct a concrete instance of `ProjectMembersArrayInput` via:
//
//	ProjectMembersArray{ ProjectMembersArgs{...} }
type ProjectMembersArrayInput interface {
	pulumi.Input

	ToProjectMembersArrayOutput() ProjectMembersArrayOutput
	ToProjectMembersArrayOutputWithContext(context.Context) ProjectMembersArrayOutput
}

type ProjectMembersArray []ProjectMembersInput

func (ProjectMembersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMembers)(nil)).Elem()
}

func (i ProjectMembersArray) ToProjectMembersArrayOutput() ProjectMembersArrayOutput {
	return i.ToProjectMembersArrayOutputWithContext(context.Background())
}

func (i ProjectMembersArray) ToProjectMembersArrayOutputWithContext(ctx context.Context) ProjectMembersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMembersArrayOutput)
}

// ProjectMembersMapInput is an input type that accepts ProjectMembersMap and ProjectMembersMapOutput values.
// You can construct a concrete instance of `ProjectMembersMapInput` via:
//
//	ProjectMembersMap{ "key": ProjectMembersArgs{...} }
type ProjectMembersMapInput interface {
	pulumi.Input

	ToProjectMembersMapOutput() ProjectMembersMapOutput
	ToProjectMembersMapOutputWithContext(context.Context) ProjectMembersMapOutput
}

type ProjectMembersMap map[string]ProjectMembersInput

func (ProjectMembersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMembers)(nil)).Elem()
}

func (i ProjectMembersMap) ToProjectMembersMapOutput() ProjectMembersMapOutput {
	return i.ToProjectMembersMapOutputWithContext(context.Background())
}

func (i ProjectMembersMap) ToProjectMembersMapOutputWithContext(ctx context.Context) ProjectMembersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMembersMapOutput)
}

type ProjectMembersOutput struct{ *pulumi.OutputState }

func (ProjectMembersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMembers)(nil)).Elem()
}

func (o ProjectMembersOutput) ToProjectMembersOutput() ProjectMembersOutput {
	return o
}

func (o ProjectMembersOutput) ToProjectMembersOutputWithContext(ctx context.Context) ProjectMembersOutput {
	return o
}

// The set of members to manage for this project.
func (o ProjectMembersOutput) Members() ProjectMembersMemberArrayOutput {
	return o.ApplyT(func(v *ProjectMembers) ProjectMembersMemberArrayOutput { return v.Members }).(ProjectMembersMemberArrayOutput)
}

// The ID of the existing Vercel Project.
func (o ProjectMembersOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMembers) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
func (o ProjectMembersOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMembers) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type ProjectMembersArrayOutput struct{ *pulumi.OutputState }

func (ProjectMembersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMembers)(nil)).Elem()
}

func (o ProjectMembersArrayOutput) ToProjectMembersArrayOutput() ProjectMembersArrayOutput {
	return o
}

func (o ProjectMembersArrayOutput) ToProjectMembersArrayOutputWithContext(ctx context.Context) ProjectMembersArrayOutput {
	return o
}

func (o ProjectMembersArrayOutput) Index(i pulumi.IntInput) ProjectMembersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectMembers {
		return vs[0].([]*ProjectMembers)[vs[1].(int)]
	}).(ProjectMembersOutput)
}

type ProjectMembersMapOutput struct{ *pulumi.OutputState }

func (ProjectMembersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMembers)(nil)).Elem()
}

func (o ProjectMembersMapOutput) ToProjectMembersMapOutput() ProjectMembersMapOutput {
	return o
}

func (o ProjectMembersMapOutput) ToProjectMembersMapOutputWithContext(ctx context.Context) ProjectMembersMapOutput {
	return o
}

func (o ProjectMembersMapOutput) MapIndex(k pulumi.StringInput) ProjectMembersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectMembers {
		return vs[0].(map[string]*ProjectMembers)[vs[1].(string)]
	}).(ProjectMembersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMembersInput)(nil)).Elem(), &ProjectMembers{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMembersArrayInput)(nil)).Elem(), ProjectMembersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMembersMapInput)(nil)).Elem(), ProjectMembersMap{})
	pulumi.RegisterOutputType(ProjectMembersOutput{})
	pulumi.RegisterOutputType(ProjectMembersArrayOutput{})
	pulumi.RegisterOutputType(ProjectMembersMapOutput{})
}
