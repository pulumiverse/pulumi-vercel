// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Provides information about an existing Shared Environment Variable within Vercel.
//
// A Shared Environment Variable resource defines an Environment Variable that can be shared between multiple Vercel Projects.
//
// For more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/environment-variables/shared-environment-variables).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Environment variables can be identified by their ID, or by their key and target.
//			// The ID can be taken from the network tab inside developer tools, while you are on the project page.
//			_, err := vercel.LookupSharedEnvironmentVariable(ctx, &vercel.LookupSharedEnvironmentVariableArgs{
//				Id: pulumi.StringRef("xxxxxxxxxxxxxxx"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Alternatively, you can use the key and target to identify the environment variable.
//			// Note that all `target`s must be specified for a match to be found.
//			_, err = vercel.LookupSharedEnvironmentVariable(ctx, &vercel.LookupSharedEnvironmentVariableArgs{
//				Key: pulumi.StringRef("MY_ENV_VAR"),
//				Targets: []string{
//					"production",
//					"preview",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSharedEnvironmentVariable(ctx *pulumi.Context, args *LookupSharedEnvironmentVariableArgs, opts ...pulumi.InvokeOption) (*LookupSharedEnvironmentVariableResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSharedEnvironmentVariableResult
	err := ctx.Invoke("vercel:index/getSharedEnvironmentVariable:getSharedEnvironmentVariable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSharedEnvironmentVariable.
type LookupSharedEnvironmentVariableArgs struct {
	// The ID of the Environment Variable.
	Id *string `pulumi:"id"`
	// The name of the Environment Variable.
	Key *string `pulumi:"key"`
	// The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
	Targets []string `pulumi:"targets"`
	// The ID of the Vercel team. Shared environment variables require a team.
	TeamId *string `pulumi:"teamId"`
}

// A collection of values returned by getSharedEnvironmentVariable.
type LookupSharedEnvironmentVariableResult struct {
	// A comment explaining what the environment variable is for.
	Comment string `pulumi:"comment"`
	// The ID of the Environment Variable.
	Id string `pulumi:"id"`
	// The name of the Environment Variable.
	Key string `pulumi:"key"`
	// The ID of the Vercel project.
	ProjectIds []string `pulumi:"projectIds"`
	// Whether the Environment Variable is sensitive or not.
	Sensitive bool `pulumi:"sensitive"`
	// The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
	Targets []string `pulumi:"targets"`
	// The ID of the Vercel team. Shared environment variables require a team.
	TeamId string `pulumi:"teamId"`
	// The value of the Environment Variable.
	Value string `pulumi:"value"`
}

func LookupSharedEnvironmentVariableOutput(ctx *pulumi.Context, args LookupSharedEnvironmentVariableOutputArgs, opts ...pulumi.InvokeOption) LookupSharedEnvironmentVariableResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSharedEnvironmentVariableResultOutput, error) {
			args := v.(LookupSharedEnvironmentVariableArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupSharedEnvironmentVariableResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getSharedEnvironmentVariable:getSharedEnvironmentVariable", args, &rv, "", opts...)
			if err != nil {
				return LookupSharedEnvironmentVariableResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSharedEnvironmentVariableResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSharedEnvironmentVariableResultOutput), nil
			}
			return output, nil
		}).(LookupSharedEnvironmentVariableResultOutput)
}

// A collection of arguments for invoking getSharedEnvironmentVariable.
type LookupSharedEnvironmentVariableOutputArgs struct {
	// The ID of the Environment Variable.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the Environment Variable.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
	Targets pulumi.StringArrayInput `pulumi:"targets"`
	// The ID of the Vercel team. Shared environment variables require a team.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
}

func (LookupSharedEnvironmentVariableOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSharedEnvironmentVariableArgs)(nil)).Elem()
}

// A collection of values returned by getSharedEnvironmentVariable.
type LookupSharedEnvironmentVariableResultOutput struct{ *pulumi.OutputState }

func (LookupSharedEnvironmentVariableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSharedEnvironmentVariableResult)(nil)).Elem()
}

func (o LookupSharedEnvironmentVariableResultOutput) ToLookupSharedEnvironmentVariableResultOutput() LookupSharedEnvironmentVariableResultOutput {
	return o
}

func (o LookupSharedEnvironmentVariableResultOutput) ToLookupSharedEnvironmentVariableResultOutputWithContext(ctx context.Context) LookupSharedEnvironmentVariableResultOutput {
	return o
}

// A comment explaining what the environment variable is for.
func (o LookupSharedEnvironmentVariableResultOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) string { return v.Comment }).(pulumi.StringOutput)
}

// The ID of the Environment Variable.
func (o LookupSharedEnvironmentVariableResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the Environment Variable.
func (o LookupSharedEnvironmentVariableResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) string { return v.Key }).(pulumi.StringOutput)
}

// The ID of the Vercel project.
func (o LookupSharedEnvironmentVariableResultOutput) ProjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) []string { return v.ProjectIds }).(pulumi.StringArrayOutput)
}

// Whether the Environment Variable is sensitive or not.
func (o LookupSharedEnvironmentVariableResultOutput) Sensitive() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) bool { return v.Sensitive }).(pulumi.BoolOutput)
}

// The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
func (o LookupSharedEnvironmentVariableResultOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

// The ID of the Vercel team. Shared environment variables require a team.
func (o LookupSharedEnvironmentVariableResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) string { return v.TeamId }).(pulumi.StringOutput)
}

// The value of the Environment Variable.
func (o LookupSharedEnvironmentVariableResultOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedEnvironmentVariableResult) string { return v.Value }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSharedEnvironmentVariableResultOutput{})
}
