// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Retrieves the configuration of an existing Vercel Team.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vercel.LookupTeamConfig(ctx, &vercel.LookupTeamConfigArgs{
//				Id: "team_xxxxxxxxxxxxxxxxxxxxxxxx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTeamConfig(ctx *pulumi.Context, args *LookupTeamConfigArgs, opts ...pulumi.InvokeOption) (*LookupTeamConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTeamConfigResult
	err := ctx.Invoke("vercel:index/getTeamConfig:getTeamConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTeamConfig.
type LookupTeamConfigArgs struct {
	// The ID of the existing Vercel Team.
	Id string `pulumi:"id"`
}

// A collection of values returned by getTeamConfig.
type LookupTeamConfigResult struct {
	// A description of the team.
	Description string `pulumi:"description"`
	// Hostname that'll be matched with emails on sign-up to automatically join the Team.
	EmailDomain string `pulumi:"emailDomain"`
	// Preview feedback configuration.
	EnablePreviewFeedback string `pulumi:"enablePreviewFeedback"`
	// Production feedback configuration.
	EnableProductionFeedback string `pulumi:"enableProductionFeedback"`
	// Indicates if ip addresses should be accessible in o11y tooling.
	HideIpAddresses bool `pulumi:"hideIpAddresses"`
	// Indicates if ip addresses should be accessible in log drains.
	HideIpAddressesInLogDrains bool `pulumi:"hideIpAddressesInLogDrains"`
	// The ID of the existing Vercel Team.
	Id string `pulumi:"id"`
	// A code that can be used to join this team. Only visible to Team owners.
	InviteCode string `pulumi:"inviteCode"`
	// The name of the team.
	Name string `pulumi:"name"`
	// The hostname that is used as the preview deployment suffix.
	PreviewDeploymentSuffix string `pulumi:"previewDeploymentSuffix"`
	// Configuration for Remote Caching.
	RemoteCaching GetTeamConfigRemoteCaching `pulumi:"remoteCaching"`
	// Configuration for SAML authentication.
	Saml GetTeamConfigSaml `pulumi:"saml"`
	// The policy for sensitive environment variables.
	SensitiveEnvironmentVariablePolicy string `pulumi:"sensitiveEnvironmentVariablePolicy"`
	// The slug of the team. Used in the URL of the team's dashboard.
	Slug string `pulumi:"slug"`
}

func LookupTeamConfigOutput(ctx *pulumi.Context, args LookupTeamConfigOutputArgs, opts ...pulumi.InvokeOption) LookupTeamConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTeamConfigResultOutput, error) {
			args := v.(LookupTeamConfigArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupTeamConfigResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getTeamConfig:getTeamConfig", args, &rv, "", opts...)
			if err != nil {
				return LookupTeamConfigResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupTeamConfigResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupTeamConfigResultOutput), nil
			}
			return output, nil
		}).(LookupTeamConfigResultOutput)
}

// A collection of arguments for invoking getTeamConfig.
type LookupTeamConfigOutputArgs struct {
	// The ID of the existing Vercel Team.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupTeamConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamConfigArgs)(nil)).Elem()
}

// A collection of values returned by getTeamConfig.
type LookupTeamConfigResultOutput struct{ *pulumi.OutputState }

func (LookupTeamConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamConfigResult)(nil)).Elem()
}

func (o LookupTeamConfigResultOutput) ToLookupTeamConfigResultOutput() LookupTeamConfigResultOutput {
	return o
}

func (o LookupTeamConfigResultOutput) ToLookupTeamConfigResultOutputWithContext(ctx context.Context) LookupTeamConfigResultOutput {
	return o
}

// A description of the team.
func (o LookupTeamConfigResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) string { return v.Description }).(pulumi.StringOutput)
}

// Hostname that'll be matched with emails on sign-up to automatically join the Team.
func (o LookupTeamConfigResultOutput) EmailDomain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) string { return v.EmailDomain }).(pulumi.StringOutput)
}

// Preview feedback configuration.
func (o LookupTeamConfigResultOutput) EnablePreviewFeedback() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) string { return v.EnablePreviewFeedback }).(pulumi.StringOutput)
}

// Production feedback configuration.
func (o LookupTeamConfigResultOutput) EnableProductionFeedback() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) string { return v.EnableProductionFeedback }).(pulumi.StringOutput)
}

// Indicates if ip addresses should be accessible in o11y tooling.
func (o LookupTeamConfigResultOutput) HideIpAddresses() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) bool { return v.HideIpAddresses }).(pulumi.BoolOutput)
}

// Indicates if ip addresses should be accessible in log drains.
func (o LookupTeamConfigResultOutput) HideIpAddressesInLogDrains() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) bool { return v.HideIpAddressesInLogDrains }).(pulumi.BoolOutput)
}

// The ID of the existing Vercel Team.
func (o LookupTeamConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

// A code that can be used to join this team. Only visible to Team owners.
func (o LookupTeamConfigResultOutput) InviteCode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) string { return v.InviteCode }).(pulumi.StringOutput)
}

// The name of the team.
func (o LookupTeamConfigResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) string { return v.Name }).(pulumi.StringOutput)
}

// The hostname that is used as the preview deployment suffix.
func (o LookupTeamConfigResultOutput) PreviewDeploymentSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) string { return v.PreviewDeploymentSuffix }).(pulumi.StringOutput)
}

// Configuration for Remote Caching.
func (o LookupTeamConfigResultOutput) RemoteCaching() GetTeamConfigRemoteCachingOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) GetTeamConfigRemoteCaching { return v.RemoteCaching }).(GetTeamConfigRemoteCachingOutput)
}

// Configuration for SAML authentication.
func (o LookupTeamConfigResultOutput) Saml() GetTeamConfigSamlOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) GetTeamConfigSaml { return v.Saml }).(GetTeamConfigSamlOutput)
}

// The policy for sensitive environment variables.
func (o LookupTeamConfigResultOutput) SensitiveEnvironmentVariablePolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) string { return v.SensitiveEnvironmentVariablePolicy }).(pulumi.StringOutput)
}

// The slug of the team. Used in the URL of the team's dashboard.
func (o LookupTeamConfigResultOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamConfigResult) string { return v.Slug }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTeamConfigResultOutput{})
}
