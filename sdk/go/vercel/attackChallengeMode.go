// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel/internal"
)

// Provides an Attack Challenge Mode resource.
//
// Attack Challenge Mode prevent malicious traffic by showing a verification challenge for every visitor.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := vercel.NewProject(ctx, "exampleProject", nil)
//			if err != nil {
//				return err
//			}
//			_, err = vercel.NewAttackChallengeMode(ctx, "exampleAttackChallengeMode", &vercel.AttackChallengeModeArgs{
//				ProjectId: exampleProject.ID(),
//				Enabled:   pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import via the team_id and project_id.
//
// - team_id can be found in the team `settings` tab in the Vercel UI.
//
// - project_id can be found in the project `settings` tab in the Vercel UI.
//
// ```sh
// $ pulumi import vercel:index/attackChallengeMode:AttackChallengeMode example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
// ```
type AttackChallengeMode struct {
	pulumi.CustomResourceState

	// Whether Attack Challenge Mode is enabled or not.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The ID of the Project to toggle Attack Challenge Mode on.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewAttackChallengeMode registers a new resource with the given unique name, arguments, and options.
func NewAttackChallengeMode(ctx *pulumi.Context,
	name string, args *AttackChallengeModeArgs, opts ...pulumi.ResourceOption) (*AttackChallengeMode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AttackChallengeMode
	err := ctx.RegisterResource("vercel:index/attackChallengeMode:AttackChallengeMode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttackChallengeMode gets an existing AttackChallengeMode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttackChallengeMode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttackChallengeModeState, opts ...pulumi.ResourceOption) (*AttackChallengeMode, error) {
	var resource AttackChallengeMode
	err := ctx.ReadResource("vercel:index/attackChallengeMode:AttackChallengeMode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AttackChallengeMode resources.
type attackChallengeModeState struct {
	// Whether Attack Challenge Mode is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// The ID of the Project to toggle Attack Challenge Mode on.
	ProjectId *string `pulumi:"projectId"`
	// The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

type AttackChallengeModeState struct {
	// Whether Attack Challenge Mode is enabled or not.
	Enabled pulumi.BoolPtrInput
	// The ID of the Project to toggle Attack Challenge Mode on.
	ProjectId pulumi.StringPtrInput
	// The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (AttackChallengeModeState) ElementType() reflect.Type {
	return reflect.TypeOf((*attackChallengeModeState)(nil)).Elem()
}

type attackChallengeModeArgs struct {
	// Whether Attack Challenge Mode is enabled or not.
	Enabled bool `pulumi:"enabled"`
	// The ID of the Project to toggle Attack Challenge Mode on.
	ProjectId string `pulumi:"projectId"`
	// The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a AttackChallengeMode resource.
type AttackChallengeModeArgs struct {
	// Whether Attack Challenge Mode is enabled or not.
	Enabled pulumi.BoolInput
	// The ID of the Project to toggle Attack Challenge Mode on.
	ProjectId pulumi.StringInput
	// The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (AttackChallengeModeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attackChallengeModeArgs)(nil)).Elem()
}

type AttackChallengeModeInput interface {
	pulumi.Input

	ToAttackChallengeModeOutput() AttackChallengeModeOutput
	ToAttackChallengeModeOutputWithContext(ctx context.Context) AttackChallengeModeOutput
}

func (*AttackChallengeMode) ElementType() reflect.Type {
	return reflect.TypeOf((**AttackChallengeMode)(nil)).Elem()
}

func (i *AttackChallengeMode) ToAttackChallengeModeOutput() AttackChallengeModeOutput {
	return i.ToAttackChallengeModeOutputWithContext(context.Background())
}

func (i *AttackChallengeMode) ToAttackChallengeModeOutputWithContext(ctx context.Context) AttackChallengeModeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttackChallengeModeOutput)
}

// AttackChallengeModeArrayInput is an input type that accepts AttackChallengeModeArray and AttackChallengeModeArrayOutput values.
// You can construct a concrete instance of `AttackChallengeModeArrayInput` via:
//
//	AttackChallengeModeArray{ AttackChallengeModeArgs{...} }
type AttackChallengeModeArrayInput interface {
	pulumi.Input

	ToAttackChallengeModeArrayOutput() AttackChallengeModeArrayOutput
	ToAttackChallengeModeArrayOutputWithContext(context.Context) AttackChallengeModeArrayOutput
}

type AttackChallengeModeArray []AttackChallengeModeInput

func (AttackChallengeModeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttackChallengeMode)(nil)).Elem()
}

func (i AttackChallengeModeArray) ToAttackChallengeModeArrayOutput() AttackChallengeModeArrayOutput {
	return i.ToAttackChallengeModeArrayOutputWithContext(context.Background())
}

func (i AttackChallengeModeArray) ToAttackChallengeModeArrayOutputWithContext(ctx context.Context) AttackChallengeModeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttackChallengeModeArrayOutput)
}

// AttackChallengeModeMapInput is an input type that accepts AttackChallengeModeMap and AttackChallengeModeMapOutput values.
// You can construct a concrete instance of `AttackChallengeModeMapInput` via:
//
//	AttackChallengeModeMap{ "key": AttackChallengeModeArgs{...} }
type AttackChallengeModeMapInput interface {
	pulumi.Input

	ToAttackChallengeModeMapOutput() AttackChallengeModeMapOutput
	ToAttackChallengeModeMapOutputWithContext(context.Context) AttackChallengeModeMapOutput
}

type AttackChallengeModeMap map[string]AttackChallengeModeInput

func (AttackChallengeModeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttackChallengeMode)(nil)).Elem()
}

func (i AttackChallengeModeMap) ToAttackChallengeModeMapOutput() AttackChallengeModeMapOutput {
	return i.ToAttackChallengeModeMapOutputWithContext(context.Background())
}

func (i AttackChallengeModeMap) ToAttackChallengeModeMapOutputWithContext(ctx context.Context) AttackChallengeModeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttackChallengeModeMapOutput)
}

type AttackChallengeModeOutput struct{ *pulumi.OutputState }

func (AttackChallengeModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttackChallengeMode)(nil)).Elem()
}

func (o AttackChallengeModeOutput) ToAttackChallengeModeOutput() AttackChallengeModeOutput {
	return o
}

func (o AttackChallengeModeOutput) ToAttackChallengeModeOutputWithContext(ctx context.Context) AttackChallengeModeOutput {
	return o
}

// Whether Attack Challenge Mode is enabled or not.
func (o AttackChallengeModeOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AttackChallengeMode) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the Project to toggle Attack Challenge Mode on.
func (o AttackChallengeModeOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttackChallengeMode) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
func (o AttackChallengeModeOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttackChallengeMode) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type AttackChallengeModeArrayOutput struct{ *pulumi.OutputState }

func (AttackChallengeModeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttackChallengeMode)(nil)).Elem()
}

func (o AttackChallengeModeArrayOutput) ToAttackChallengeModeArrayOutput() AttackChallengeModeArrayOutput {
	return o
}

func (o AttackChallengeModeArrayOutput) ToAttackChallengeModeArrayOutputWithContext(ctx context.Context) AttackChallengeModeArrayOutput {
	return o
}

func (o AttackChallengeModeArrayOutput) Index(i pulumi.IntInput) AttackChallengeModeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AttackChallengeMode {
		return vs[0].([]*AttackChallengeMode)[vs[1].(int)]
	}).(AttackChallengeModeOutput)
}

type AttackChallengeModeMapOutput struct{ *pulumi.OutputState }

func (AttackChallengeModeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttackChallengeMode)(nil)).Elem()
}

func (o AttackChallengeModeMapOutput) ToAttackChallengeModeMapOutput() AttackChallengeModeMapOutput {
	return o
}

func (o AttackChallengeModeMapOutput) ToAttackChallengeModeMapOutputWithContext(ctx context.Context) AttackChallengeModeMapOutput {
	return o
}

func (o AttackChallengeModeMapOutput) MapIndex(k pulumi.StringInput) AttackChallengeModeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AttackChallengeMode {
		return vs[0].(map[string]*AttackChallengeMode)[vs[1].(string)]
	}).(AttackChallengeModeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttackChallengeModeInput)(nil)).Elem(), &AttackChallengeMode{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttackChallengeModeArrayInput)(nil)).Elem(), AttackChallengeModeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttackChallengeModeMapInput)(nil)).Elem(), AttackChallengeModeMap{})
	pulumi.RegisterOutputType(AttackChallengeModeOutput{})
	pulumi.RegisterOutputType(AttackChallengeModeArrayOutput{})
	pulumi.RegisterOutputType(AttackChallengeModeMapOutput{})
}
