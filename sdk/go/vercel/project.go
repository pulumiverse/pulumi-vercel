// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// A project that is connected to a git repository.
//			// Deployments will be created automatically
//			// on every branch push and merges onto the Production Branch.
//			_, err := vercel.NewProject(ctx, "with_git", &vercel.ProjectArgs{
//				Name:      pulumi.String("example-project-with-git"),
//				Framework: pulumi.String("nextjs"),
//				GitRepository: &vercel.ProjectGitRepositoryArgs{
//					Type: pulumi.String("github"),
//					Repo: pulumi.String("vercel/some-repo"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// A project that is not connected to a git repository.
//			// Deployments will need to be created manually through
//			// terraform, or via the vercel CLI.
//			_, err = vercel.NewProject(ctx, "example", &vercel.ProjectArgs{
//				Name:      pulumi.String("example-project"),
//				Framework: pulumi.String("nextjs"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # If importing into a personal account, or with a team configured on
//
// the provider, simply use the project ID.
//
// - project_id can be found in the project `settings` tab in the Vercel UI.
//
// ```sh
// $ pulumi import vercel:index/project:Project example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
// ```
//
// Alternatively, you can import via the team_id and project_id.
//
// - team_id can be found in the team `settings` tab in the Vercel UI.
//
// - project_id can be found in the project `settings` tab in the Vercel UI.
//
// ```sh
// $ pulumi import vercel:index/project:Project example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
// ```
type Project struct {
	pulumi.CustomResourceState

	// Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`
	AutoAssignCustomDomains pulumi.BoolOutput `pulumi:"autoAssignCustomDomains"`
	// Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field
	AutomaticallyExposeSystemEnvironmentVariables pulumi.BoolOutput `pulumi:"automaticallyExposeSystemEnvironmentVariables"`
	// The build command for this project. If omitted, this value will be automatically detected.
	BuildCommand pulumi.StringPtrOutput `pulumi:"buildCommand"`
	// Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.
	CustomerSuccessCodeVisibility pulumi.BoolOutput `pulumi:"customerSuccessCodeVisibility"`
	// The dev command for this project. If omitted, this value will be automatically detected.
	DevCommand pulumi.StringPtrOutput `pulumi:"devCommand"`
	// If no index file is present within a directory, the directory contents will be displayed.
	DirectoryListing pulumi.BoolOutput `pulumi:"directoryListing"`
	// A set of Environment Variables that should be configured for the project.
	Environments ProjectEnvironmentArrayOutput `pulumi:"environments"`
	// The framework that is being used for this project. If omitted, no framework is selected.
	Framework pulumi.StringPtrOutput `pulumi:"framework"`
	// Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.
	FunctionFailover pulumi.BoolOutput `pulumi:"functionFailover"`
	// Configuration for Git Comments.
	GitComments ProjectGitCommentsPtrOutput `pulumi:"gitComments"`
	// Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.
	GitForkProtection pulumi.BoolOutput `pulumi:"gitForkProtection"`
	// Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.
	GitLfs pulumi.BoolOutput `pulumi:"gitLfs"`
	// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.
	GitRepository ProjectGitRepositoryPtrOutput `pulumi:"gitRepository"`
	// When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.
	IgnoreCommand pulumi.StringPtrOutput `pulumi:"ignoreCommand"`
	// The install command for this project. If omitted, this value will be automatically detected.
	InstallCommand pulumi.StringPtrOutput `pulumi:"installCommand"`
	// The desired name for the project.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration for OpenID Connect (OIDC) tokens.
	OidcTokenConfig ProjectOidcTokenConfigOutput `pulumi:"oidcTokenConfig"`
	// Disable Deployment Protection for CORS preflight `OPTIONS` requests for a list of paths.
	OptionsAllowlist ProjectOptionsAllowlistPtrOutput `pulumi:"optionsAllowlist"`
	// The output directory of the project. If omitted, this value will be automatically detected.
	OutputDirectory pulumi.StringPtrOutput `pulumi:"outputDirectory"`
	// Ensures visitors of your Preview Deployments must enter a password in order to gain access.
	PasswordProtection ProjectPasswordProtectionPtrOutput `pulumi:"passwordProtection"`
	// Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).
	PreviewComments pulumi.BoolPtrOutput `pulumi:"previewComments"`
	// If enabled, builds for the Production environment will be prioritized over Preview environments.
	PrioritiseProductionBuilds pulumi.BoolOutput `pulumi:"prioritiseProductionBuilds"`
	// Allow automation services to bypass Deployment Protection on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `protectionBypassForAutomationSecret` field.
	ProtectionBypassForAutomation pulumi.BoolPtrOutput `pulumi:"protectionBypassForAutomation"`
	// If `protectionBypassForAutomation` is enabled, optionally set this value to specify a 32 character secret, otherwise a secret will be generated.
	ProtectionBypassForAutomationSecret pulumi.StringOutput `pulumi:"protectionBypassForAutomationSecret"`
	// By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `publicSource` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.
	PublicSource pulumi.BoolPtrOutput `pulumi:"publicSource"`
	// Resource Configuration for the project.
	ResourceConfig ProjectResourceConfigOutput `pulumi:"resourceConfig"`
	// The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.
	RootDirectory pulumi.StringPtrOutput `pulumi:"rootDirectory"`
	// The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.
	ServerlessFunctionRegion pulumi.StringOutput `pulumi:"serverlessFunctionRegion"`
	// Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.
	SkewProtection pulumi.StringPtrOutput `pulumi:"skewProtection"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// Ensures only visitors from an allowed IP address can access your deployment.
	TrustedIps ProjectTrustedIpsPtrOutput `pulumi:"trustedIps"`
	// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.
	VercelAuthentication ProjectVercelAuthenticationOutput `pulumi:"vercelAuthentication"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		args = &ProjectArgs{}
	}

	if args.ProtectionBypassForAutomationSecret != nil {
		args.ProtectionBypassForAutomationSecret = pulumi.ToSecret(args.ProtectionBypassForAutomationSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"protectionBypassForAutomationSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("vercel:index/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("vercel:index/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`
	AutoAssignCustomDomains *bool `pulumi:"autoAssignCustomDomains"`
	// Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field
	AutomaticallyExposeSystemEnvironmentVariables *bool `pulumi:"automaticallyExposeSystemEnvironmentVariables"`
	// The build command for this project. If omitted, this value will be automatically detected.
	BuildCommand *string `pulumi:"buildCommand"`
	// Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.
	CustomerSuccessCodeVisibility *bool `pulumi:"customerSuccessCodeVisibility"`
	// The dev command for this project. If omitted, this value will be automatically detected.
	DevCommand *string `pulumi:"devCommand"`
	// If no index file is present within a directory, the directory contents will be displayed.
	DirectoryListing *bool `pulumi:"directoryListing"`
	// A set of Environment Variables that should be configured for the project.
	Environments []ProjectEnvironment `pulumi:"environments"`
	// The framework that is being used for this project. If omitted, no framework is selected.
	Framework *string `pulumi:"framework"`
	// Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.
	FunctionFailover *bool `pulumi:"functionFailover"`
	// Configuration for Git Comments.
	GitComments *ProjectGitComments `pulumi:"gitComments"`
	// Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.
	GitForkProtection *bool `pulumi:"gitForkProtection"`
	// Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.
	GitLfs *bool `pulumi:"gitLfs"`
	// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.
	GitRepository *ProjectGitRepository `pulumi:"gitRepository"`
	// When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.
	IgnoreCommand *string `pulumi:"ignoreCommand"`
	// The install command for this project. If omitted, this value will be automatically detected.
	InstallCommand *string `pulumi:"installCommand"`
	// The desired name for the project.
	Name *string `pulumi:"name"`
	// Configuration for OpenID Connect (OIDC) tokens.
	OidcTokenConfig *ProjectOidcTokenConfig `pulumi:"oidcTokenConfig"`
	// Disable Deployment Protection for CORS preflight `OPTIONS` requests for a list of paths.
	OptionsAllowlist *ProjectOptionsAllowlist `pulumi:"optionsAllowlist"`
	// The output directory of the project. If omitted, this value will be automatically detected.
	OutputDirectory *string `pulumi:"outputDirectory"`
	// Ensures visitors of your Preview Deployments must enter a password in order to gain access.
	PasswordProtection *ProjectPasswordProtection `pulumi:"passwordProtection"`
	// Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).
	PreviewComments *bool `pulumi:"previewComments"`
	// If enabled, builds for the Production environment will be prioritized over Preview environments.
	PrioritiseProductionBuilds *bool `pulumi:"prioritiseProductionBuilds"`
	// Allow automation services to bypass Deployment Protection on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `protectionBypassForAutomationSecret` field.
	ProtectionBypassForAutomation *bool `pulumi:"protectionBypassForAutomation"`
	// If `protectionBypassForAutomation` is enabled, optionally set this value to specify a 32 character secret, otherwise a secret will be generated.
	ProtectionBypassForAutomationSecret *string `pulumi:"protectionBypassForAutomationSecret"`
	// By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `publicSource` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.
	PublicSource *bool `pulumi:"publicSource"`
	// Resource Configuration for the project.
	ResourceConfig *ProjectResourceConfig `pulumi:"resourceConfig"`
	// The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.
	RootDirectory *string `pulumi:"rootDirectory"`
	// The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.
	ServerlessFunctionRegion *string `pulumi:"serverlessFunctionRegion"`
	// Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.
	SkewProtection *string `pulumi:"skewProtection"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
	// Ensures only visitors from an allowed IP address can access your deployment.
	TrustedIps *ProjectTrustedIps `pulumi:"trustedIps"`
	// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.
	VercelAuthentication *ProjectVercelAuthentication `pulumi:"vercelAuthentication"`
}

type ProjectState struct {
	// Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`
	AutoAssignCustomDomains pulumi.BoolPtrInput
	// Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field
	AutomaticallyExposeSystemEnvironmentVariables pulumi.BoolPtrInput
	// The build command for this project. If omitted, this value will be automatically detected.
	BuildCommand pulumi.StringPtrInput
	// Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.
	CustomerSuccessCodeVisibility pulumi.BoolPtrInput
	// The dev command for this project. If omitted, this value will be automatically detected.
	DevCommand pulumi.StringPtrInput
	// If no index file is present within a directory, the directory contents will be displayed.
	DirectoryListing pulumi.BoolPtrInput
	// A set of Environment Variables that should be configured for the project.
	Environments ProjectEnvironmentArrayInput
	// The framework that is being used for this project. If omitted, no framework is selected.
	Framework pulumi.StringPtrInput
	// Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.
	FunctionFailover pulumi.BoolPtrInput
	// Configuration for Git Comments.
	GitComments ProjectGitCommentsPtrInput
	// Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.
	GitForkProtection pulumi.BoolPtrInput
	// Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.
	GitLfs pulumi.BoolPtrInput
	// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.
	GitRepository ProjectGitRepositoryPtrInput
	// When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.
	IgnoreCommand pulumi.StringPtrInput
	// The install command for this project. If omitted, this value will be automatically detected.
	InstallCommand pulumi.StringPtrInput
	// The desired name for the project.
	Name pulumi.StringPtrInput
	// Configuration for OpenID Connect (OIDC) tokens.
	OidcTokenConfig ProjectOidcTokenConfigPtrInput
	// Disable Deployment Protection for CORS preflight `OPTIONS` requests for a list of paths.
	OptionsAllowlist ProjectOptionsAllowlistPtrInput
	// The output directory of the project. If omitted, this value will be automatically detected.
	OutputDirectory pulumi.StringPtrInput
	// Ensures visitors of your Preview Deployments must enter a password in order to gain access.
	PasswordProtection ProjectPasswordProtectionPtrInput
	// Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).
	PreviewComments pulumi.BoolPtrInput
	// If enabled, builds for the Production environment will be prioritized over Preview environments.
	PrioritiseProductionBuilds pulumi.BoolPtrInput
	// Allow automation services to bypass Deployment Protection on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `protectionBypassForAutomationSecret` field.
	ProtectionBypassForAutomation pulumi.BoolPtrInput
	// If `protectionBypassForAutomation` is enabled, optionally set this value to specify a 32 character secret, otherwise a secret will be generated.
	ProtectionBypassForAutomationSecret pulumi.StringPtrInput
	// By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `publicSource` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.
	PublicSource pulumi.BoolPtrInput
	// Resource Configuration for the project.
	ResourceConfig ProjectResourceConfigPtrInput
	// The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.
	RootDirectory pulumi.StringPtrInput
	// The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.
	ServerlessFunctionRegion pulumi.StringPtrInput
	// Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.
	SkewProtection pulumi.StringPtrInput
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
	// Ensures only visitors from an allowed IP address can access your deployment.
	TrustedIps ProjectTrustedIpsPtrInput
	// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.
	VercelAuthentication ProjectVercelAuthenticationPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`
	AutoAssignCustomDomains *bool `pulumi:"autoAssignCustomDomains"`
	// Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field
	AutomaticallyExposeSystemEnvironmentVariables *bool `pulumi:"automaticallyExposeSystemEnvironmentVariables"`
	// The build command for this project. If omitted, this value will be automatically detected.
	BuildCommand *string `pulumi:"buildCommand"`
	// Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.
	CustomerSuccessCodeVisibility *bool `pulumi:"customerSuccessCodeVisibility"`
	// The dev command for this project. If omitted, this value will be automatically detected.
	DevCommand *string `pulumi:"devCommand"`
	// If no index file is present within a directory, the directory contents will be displayed.
	DirectoryListing *bool `pulumi:"directoryListing"`
	// A set of Environment Variables that should be configured for the project.
	Environments []ProjectEnvironment `pulumi:"environments"`
	// The framework that is being used for this project. If omitted, no framework is selected.
	Framework *string `pulumi:"framework"`
	// Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.
	FunctionFailover *bool `pulumi:"functionFailover"`
	// Configuration for Git Comments.
	GitComments *ProjectGitComments `pulumi:"gitComments"`
	// Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.
	GitForkProtection *bool `pulumi:"gitForkProtection"`
	// Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.
	GitLfs *bool `pulumi:"gitLfs"`
	// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.
	GitRepository *ProjectGitRepository `pulumi:"gitRepository"`
	// When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.
	IgnoreCommand *string `pulumi:"ignoreCommand"`
	// The install command for this project. If omitted, this value will be automatically detected.
	InstallCommand *string `pulumi:"installCommand"`
	// The desired name for the project.
	Name *string `pulumi:"name"`
	// Configuration for OpenID Connect (OIDC) tokens.
	OidcTokenConfig *ProjectOidcTokenConfig `pulumi:"oidcTokenConfig"`
	// Disable Deployment Protection for CORS preflight `OPTIONS` requests for a list of paths.
	OptionsAllowlist *ProjectOptionsAllowlist `pulumi:"optionsAllowlist"`
	// The output directory of the project. If omitted, this value will be automatically detected.
	OutputDirectory *string `pulumi:"outputDirectory"`
	// Ensures visitors of your Preview Deployments must enter a password in order to gain access.
	PasswordProtection *ProjectPasswordProtection `pulumi:"passwordProtection"`
	// Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).
	PreviewComments *bool `pulumi:"previewComments"`
	// If enabled, builds for the Production environment will be prioritized over Preview environments.
	PrioritiseProductionBuilds *bool `pulumi:"prioritiseProductionBuilds"`
	// Allow automation services to bypass Deployment Protection on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `protectionBypassForAutomationSecret` field.
	ProtectionBypassForAutomation *bool `pulumi:"protectionBypassForAutomation"`
	// If `protectionBypassForAutomation` is enabled, optionally set this value to specify a 32 character secret, otherwise a secret will be generated.
	ProtectionBypassForAutomationSecret *string `pulumi:"protectionBypassForAutomationSecret"`
	// By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `publicSource` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.
	PublicSource *bool `pulumi:"publicSource"`
	// Resource Configuration for the project.
	ResourceConfig *ProjectResourceConfig `pulumi:"resourceConfig"`
	// The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.
	RootDirectory *string `pulumi:"rootDirectory"`
	// The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.
	ServerlessFunctionRegion *string `pulumi:"serverlessFunctionRegion"`
	// Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.
	SkewProtection *string `pulumi:"skewProtection"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
	// Ensures only visitors from an allowed IP address can access your deployment.
	TrustedIps *ProjectTrustedIps `pulumi:"trustedIps"`
	// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.
	VercelAuthentication *ProjectVercelAuthentication `pulumi:"vercelAuthentication"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`
	AutoAssignCustomDomains pulumi.BoolPtrInput
	// Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field
	AutomaticallyExposeSystemEnvironmentVariables pulumi.BoolPtrInput
	// The build command for this project. If omitted, this value will be automatically detected.
	BuildCommand pulumi.StringPtrInput
	// Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.
	CustomerSuccessCodeVisibility pulumi.BoolPtrInput
	// The dev command for this project. If omitted, this value will be automatically detected.
	DevCommand pulumi.StringPtrInput
	// If no index file is present within a directory, the directory contents will be displayed.
	DirectoryListing pulumi.BoolPtrInput
	// A set of Environment Variables that should be configured for the project.
	Environments ProjectEnvironmentArrayInput
	// The framework that is being used for this project. If omitted, no framework is selected.
	Framework pulumi.StringPtrInput
	// Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.
	FunctionFailover pulumi.BoolPtrInput
	// Configuration for Git Comments.
	GitComments ProjectGitCommentsPtrInput
	// Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.
	GitForkProtection pulumi.BoolPtrInput
	// Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.
	GitLfs pulumi.BoolPtrInput
	// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.
	GitRepository ProjectGitRepositoryPtrInput
	// When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.
	IgnoreCommand pulumi.StringPtrInput
	// The install command for this project. If omitted, this value will be automatically detected.
	InstallCommand pulumi.StringPtrInput
	// The desired name for the project.
	Name pulumi.StringPtrInput
	// Configuration for OpenID Connect (OIDC) tokens.
	OidcTokenConfig ProjectOidcTokenConfigPtrInput
	// Disable Deployment Protection for CORS preflight `OPTIONS` requests for a list of paths.
	OptionsAllowlist ProjectOptionsAllowlistPtrInput
	// The output directory of the project. If omitted, this value will be automatically detected.
	OutputDirectory pulumi.StringPtrInput
	// Ensures visitors of your Preview Deployments must enter a password in order to gain access.
	PasswordProtection ProjectPasswordProtectionPtrInput
	// Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).
	PreviewComments pulumi.BoolPtrInput
	// If enabled, builds for the Production environment will be prioritized over Preview environments.
	PrioritiseProductionBuilds pulumi.BoolPtrInput
	// Allow automation services to bypass Deployment Protection on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `protectionBypassForAutomationSecret` field.
	ProtectionBypassForAutomation pulumi.BoolPtrInput
	// If `protectionBypassForAutomation` is enabled, optionally set this value to specify a 32 character secret, otherwise a secret will be generated.
	ProtectionBypassForAutomationSecret pulumi.StringPtrInput
	// By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `publicSource` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.
	PublicSource pulumi.BoolPtrInput
	// Resource Configuration for the project.
	ResourceConfig ProjectResourceConfigPtrInput
	// The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.
	RootDirectory pulumi.StringPtrInput
	// The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.
	ServerlessFunctionRegion pulumi.StringPtrInput
	// Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.
	SkewProtection pulumi.StringPtrInput
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
	// Ensures only visitors from an allowed IP address can access your deployment.
	TrustedIps ProjectTrustedIpsPtrInput
	// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.
	VercelAuthentication ProjectVercelAuthenticationPtrInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`
func (o ProjectOutput) AutoAssignCustomDomains() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.AutoAssignCustomDomains }).(pulumi.BoolOutput)
}

// Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field
func (o ProjectOutput) AutomaticallyExposeSystemEnvironmentVariables() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.AutomaticallyExposeSystemEnvironmentVariables }).(pulumi.BoolOutput)
}

// The build command for this project. If omitted, this value will be automatically detected.
func (o ProjectOutput) BuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.BuildCommand }).(pulumi.StringPtrOutput)
}

// Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.
func (o ProjectOutput) CustomerSuccessCodeVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.CustomerSuccessCodeVisibility }).(pulumi.BoolOutput)
}

// The dev command for this project. If omitted, this value will be automatically detected.
func (o ProjectOutput) DevCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.DevCommand }).(pulumi.StringPtrOutput)
}

// If no index file is present within a directory, the directory contents will be displayed.
func (o ProjectOutput) DirectoryListing() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.DirectoryListing }).(pulumi.BoolOutput)
}

// A set of Environment Variables that should be configured for the project.
func (o ProjectOutput) Environments() ProjectEnvironmentArrayOutput {
	return o.ApplyT(func(v *Project) ProjectEnvironmentArrayOutput { return v.Environments }).(ProjectEnvironmentArrayOutput)
}

// The framework that is being used for this project. If omitted, no framework is selected.
func (o ProjectOutput) Framework() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Framework }).(pulumi.StringPtrOutput)
}

// Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.
func (o ProjectOutput) FunctionFailover() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.FunctionFailover }).(pulumi.BoolOutput)
}

// Configuration for Git Comments.
func (o ProjectOutput) GitComments() ProjectGitCommentsPtrOutput {
	return o.ApplyT(func(v *Project) ProjectGitCommentsPtrOutput { return v.GitComments }).(ProjectGitCommentsPtrOutput)
}

// Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.
func (o ProjectOutput) GitForkProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.GitForkProtection }).(pulumi.BoolOutput)
}

// Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.
func (o ProjectOutput) GitLfs() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.GitLfs }).(pulumi.BoolOutput)
}

// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.
func (o ProjectOutput) GitRepository() ProjectGitRepositoryPtrOutput {
	return o.ApplyT(func(v *Project) ProjectGitRepositoryPtrOutput { return v.GitRepository }).(ProjectGitRepositoryPtrOutput)
}

// When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.
func (o ProjectOutput) IgnoreCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.IgnoreCommand }).(pulumi.StringPtrOutput)
}

// The install command for this project. If omitted, this value will be automatically detected.
func (o ProjectOutput) InstallCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.InstallCommand }).(pulumi.StringPtrOutput)
}

// The desired name for the project.
func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configuration for OpenID Connect (OIDC) tokens.
func (o ProjectOutput) OidcTokenConfig() ProjectOidcTokenConfigOutput {
	return o.ApplyT(func(v *Project) ProjectOidcTokenConfigOutput { return v.OidcTokenConfig }).(ProjectOidcTokenConfigOutput)
}

// Disable Deployment Protection for CORS preflight `OPTIONS` requests for a list of paths.
func (o ProjectOutput) OptionsAllowlist() ProjectOptionsAllowlistPtrOutput {
	return o.ApplyT(func(v *Project) ProjectOptionsAllowlistPtrOutput { return v.OptionsAllowlist }).(ProjectOptionsAllowlistPtrOutput)
}

// The output directory of the project. If omitted, this value will be automatically detected.
func (o ProjectOutput) OutputDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.OutputDirectory }).(pulumi.StringPtrOutput)
}

// Ensures visitors of your Preview Deployments must enter a password in order to gain access.
func (o ProjectOutput) PasswordProtection() ProjectPasswordProtectionPtrOutput {
	return o.ApplyT(func(v *Project) ProjectPasswordProtectionPtrOutput { return v.PasswordProtection }).(ProjectPasswordProtectionPtrOutput)
}

// Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).
func (o ProjectOutput) PreviewComments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.PreviewComments }).(pulumi.BoolPtrOutput)
}

// If enabled, builds for the Production environment will be prioritized over Preview environments.
func (o ProjectOutput) PrioritiseProductionBuilds() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.PrioritiseProductionBuilds }).(pulumi.BoolOutput)
}

// Allow automation services to bypass Deployment Protection on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `protectionBypassForAutomationSecret` field.
func (o ProjectOutput) ProtectionBypassForAutomation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.ProtectionBypassForAutomation }).(pulumi.BoolPtrOutput)
}

// If `protectionBypassForAutomation` is enabled, optionally set this value to specify a 32 character secret, otherwise a secret will be generated.
func (o ProjectOutput) ProtectionBypassForAutomationSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ProtectionBypassForAutomationSecret }).(pulumi.StringOutput)
}

// By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `publicSource` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.
func (o ProjectOutput) PublicSource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.PublicSource }).(pulumi.BoolPtrOutput)
}

// Resource Configuration for the project.
func (o ProjectOutput) ResourceConfig() ProjectResourceConfigOutput {
	return o.ApplyT(func(v *Project) ProjectResourceConfigOutput { return v.ResourceConfig }).(ProjectResourceConfigOutput)
}

// The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.
func (o ProjectOutput) RootDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.RootDirectory }).(pulumi.StringPtrOutput)
}

// The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.
func (o ProjectOutput) ServerlessFunctionRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ServerlessFunctionRegion }).(pulumi.StringOutput)
}

// Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.
func (o ProjectOutput) SkewProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.SkewProtection }).(pulumi.StringPtrOutput)
}

// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
func (o ProjectOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// Ensures only visitors from an allowed IP address can access your deployment.
func (o ProjectOutput) TrustedIps() ProjectTrustedIpsPtrOutput {
	return o.ApplyT(func(v *Project) ProjectTrustedIpsPtrOutput { return v.TrustedIps }).(ProjectTrustedIpsPtrOutput)
}

// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.
func (o ProjectOutput) VercelAuthentication() ProjectVercelAuthenticationOutput {
	return o.ApplyT(func(v *Project) ProjectVercelAuthenticationOutput { return v.VercelAuthentication }).(ProjectVercelAuthenticationOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
