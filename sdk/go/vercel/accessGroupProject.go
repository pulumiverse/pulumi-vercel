// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel/internal"
)

// Provides an Access Group Project Resource.
//
// An Access Group Project resource defines the relationship between a `AccessGroup` and a `Project`.
//
// For more detailed information, please see the [Vercel documentation](https://vercel.com/docs/accounts/team-members-and-roles/access-groups).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := vercel.NewProject(ctx, "example", &vercel.ProjectArgs{
//				Name: pulumi.String("example-project"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccessGroup, err := vercel.NewAccessGroup(ctx, "example", &vercel.AccessGroupArgs{
//				Name: pulumi.String("example-access-group"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vercel.NewAccessGroupProject(ctx, "example", &vercel.AccessGroupProjectArgs{
//				ProjectId:     example.ID(),
//				AccessGroupId: exampleAccessGroup.ID(),
//				Role:          pulumi.String("ADMIN"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # If importing into a personal account, or with a team configured on
//
// the provider, use the access_group_id and project_id.
//
// ```sh
// $ pulumi import vercel:index/accessGroupProject:AccessGroupProject example ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
// ```
//
// If importing to a team, use the team_id, access_group_id and project_id.
//
// ```sh
// $ pulumi import vercel:index/accessGroupProject:AccessGroupProject example team_xxxxxxxxxxxxxxxxxxxxxxxx/ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
// ```
type AccessGroupProject struct {
	pulumi.CustomResourceState

	// The ID of the Access Group.
	AccessGroupId pulumi.StringOutput `pulumi:"accessGroupId"`
	// The Project ID to assign to the access group.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The project role to assign to the access group. Must be either `ADMIN`, `PROJECT_DEVELOPER`, or `PROJECT_VIEWER`.
	Role pulumi.StringOutput `pulumi:"role"`
	// The ID of the team the access group project should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewAccessGroupProject registers a new resource with the given unique name, arguments, and options.
func NewAccessGroupProject(ctx *pulumi.Context,
	name string, args *AccessGroupProjectArgs, opts ...pulumi.ResourceOption) (*AccessGroupProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessGroupId == nil {
		return nil, errors.New("invalid value for required argument 'AccessGroupId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessGroupProject
	err := ctx.RegisterResource("vercel:index/accessGroupProject:AccessGroupProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessGroupProject gets an existing AccessGroupProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessGroupProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessGroupProjectState, opts ...pulumi.ResourceOption) (*AccessGroupProject, error) {
	var resource AccessGroupProject
	err := ctx.ReadResource("vercel:index/accessGroupProject:AccessGroupProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessGroupProject resources.
type accessGroupProjectState struct {
	// The ID of the Access Group.
	AccessGroupId *string `pulumi:"accessGroupId"`
	// The Project ID to assign to the access group.
	ProjectId *string `pulumi:"projectId"`
	// The project role to assign to the access group. Must be either `ADMIN`, `PROJECT_DEVELOPER`, or `PROJECT_VIEWER`.
	Role *string `pulumi:"role"`
	// The ID of the team the access group project should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

type AccessGroupProjectState struct {
	// The ID of the Access Group.
	AccessGroupId pulumi.StringPtrInput
	// The Project ID to assign to the access group.
	ProjectId pulumi.StringPtrInput
	// The project role to assign to the access group. Must be either `ADMIN`, `PROJECT_DEVELOPER`, or `PROJECT_VIEWER`.
	Role pulumi.StringPtrInput
	// The ID of the team the access group project should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (AccessGroupProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGroupProjectState)(nil)).Elem()
}

type accessGroupProjectArgs struct {
	// The ID of the Access Group.
	AccessGroupId string `pulumi:"accessGroupId"`
	// The Project ID to assign to the access group.
	ProjectId string `pulumi:"projectId"`
	// The project role to assign to the access group. Must be either `ADMIN`, `PROJECT_DEVELOPER`, or `PROJECT_VIEWER`.
	Role string `pulumi:"role"`
	// The ID of the team the access group project should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a AccessGroupProject resource.
type AccessGroupProjectArgs struct {
	// The ID of the Access Group.
	AccessGroupId pulumi.StringInput
	// The Project ID to assign to the access group.
	ProjectId pulumi.StringInput
	// The project role to assign to the access group. Must be either `ADMIN`, `PROJECT_DEVELOPER`, or `PROJECT_VIEWER`.
	Role pulumi.StringInput
	// The ID of the team the access group project should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (AccessGroupProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGroupProjectArgs)(nil)).Elem()
}

type AccessGroupProjectInput interface {
	pulumi.Input

	ToAccessGroupProjectOutput() AccessGroupProjectOutput
	ToAccessGroupProjectOutputWithContext(ctx context.Context) AccessGroupProjectOutput
}

func (*AccessGroupProject) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessGroupProject)(nil)).Elem()
}

func (i *AccessGroupProject) ToAccessGroupProjectOutput() AccessGroupProjectOutput {
	return i.ToAccessGroupProjectOutputWithContext(context.Background())
}

func (i *AccessGroupProject) ToAccessGroupProjectOutputWithContext(ctx context.Context) AccessGroupProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGroupProjectOutput)
}

// AccessGroupProjectArrayInput is an input type that accepts AccessGroupProjectArray and AccessGroupProjectArrayOutput values.
// You can construct a concrete instance of `AccessGroupProjectArrayInput` via:
//
//	AccessGroupProjectArray{ AccessGroupProjectArgs{...} }
type AccessGroupProjectArrayInput interface {
	pulumi.Input

	ToAccessGroupProjectArrayOutput() AccessGroupProjectArrayOutput
	ToAccessGroupProjectArrayOutputWithContext(context.Context) AccessGroupProjectArrayOutput
}

type AccessGroupProjectArray []AccessGroupProjectInput

func (AccessGroupProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessGroupProject)(nil)).Elem()
}

func (i AccessGroupProjectArray) ToAccessGroupProjectArrayOutput() AccessGroupProjectArrayOutput {
	return i.ToAccessGroupProjectArrayOutputWithContext(context.Background())
}

func (i AccessGroupProjectArray) ToAccessGroupProjectArrayOutputWithContext(ctx context.Context) AccessGroupProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGroupProjectArrayOutput)
}

// AccessGroupProjectMapInput is an input type that accepts AccessGroupProjectMap and AccessGroupProjectMapOutput values.
// You can construct a concrete instance of `AccessGroupProjectMapInput` via:
//
//	AccessGroupProjectMap{ "key": AccessGroupProjectArgs{...} }
type AccessGroupProjectMapInput interface {
	pulumi.Input

	ToAccessGroupProjectMapOutput() AccessGroupProjectMapOutput
	ToAccessGroupProjectMapOutputWithContext(context.Context) AccessGroupProjectMapOutput
}

type AccessGroupProjectMap map[string]AccessGroupProjectInput

func (AccessGroupProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessGroupProject)(nil)).Elem()
}

func (i AccessGroupProjectMap) ToAccessGroupProjectMapOutput() AccessGroupProjectMapOutput {
	return i.ToAccessGroupProjectMapOutputWithContext(context.Background())
}

func (i AccessGroupProjectMap) ToAccessGroupProjectMapOutputWithContext(ctx context.Context) AccessGroupProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGroupProjectMapOutput)
}

type AccessGroupProjectOutput struct{ *pulumi.OutputState }

func (AccessGroupProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessGroupProject)(nil)).Elem()
}

func (o AccessGroupProjectOutput) ToAccessGroupProjectOutput() AccessGroupProjectOutput {
	return o
}

func (o AccessGroupProjectOutput) ToAccessGroupProjectOutputWithContext(ctx context.Context) AccessGroupProjectOutput {
	return o
}

// The ID of the Access Group.
func (o AccessGroupProjectOutput) AccessGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGroupProject) pulumi.StringOutput { return v.AccessGroupId }).(pulumi.StringOutput)
}

// The Project ID to assign to the access group.
func (o AccessGroupProjectOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGroupProject) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The project role to assign to the access group. Must be either `ADMIN`, `PROJECT_DEVELOPER`, or `PROJECT_VIEWER`.
func (o AccessGroupProjectOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGroupProject) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The ID of the team the access group project should exist under. Required when configuring a team resource if a default team has not been set in the provider.
func (o AccessGroupProjectOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGroupProject) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type AccessGroupProjectArrayOutput struct{ *pulumi.OutputState }

func (AccessGroupProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessGroupProject)(nil)).Elem()
}

func (o AccessGroupProjectArrayOutput) ToAccessGroupProjectArrayOutput() AccessGroupProjectArrayOutput {
	return o
}

func (o AccessGroupProjectArrayOutput) ToAccessGroupProjectArrayOutputWithContext(ctx context.Context) AccessGroupProjectArrayOutput {
	return o
}

func (o AccessGroupProjectArrayOutput) Index(i pulumi.IntInput) AccessGroupProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessGroupProject {
		return vs[0].([]*AccessGroupProject)[vs[1].(int)]
	}).(AccessGroupProjectOutput)
}

type AccessGroupProjectMapOutput struct{ *pulumi.OutputState }

func (AccessGroupProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessGroupProject)(nil)).Elem()
}

func (o AccessGroupProjectMapOutput) ToAccessGroupProjectMapOutput() AccessGroupProjectMapOutput {
	return o
}

func (o AccessGroupProjectMapOutput) ToAccessGroupProjectMapOutputWithContext(ctx context.Context) AccessGroupProjectMapOutput {
	return o
}

func (o AccessGroupProjectMapOutput) MapIndex(k pulumi.StringInput) AccessGroupProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessGroupProject {
		return vs[0].(map[string]*AccessGroupProject)[vs[1].(string)]
	}).(AccessGroupProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessGroupProjectInput)(nil)).Elem(), &AccessGroupProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessGroupProjectArrayInput)(nil)).Elem(), AccessGroupProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessGroupProjectMapInput)(nil)).Elem(), AccessGroupProjectMap{})
	pulumi.RegisterOutputType(AccessGroupProjectOutput{})
	pulumi.RegisterOutputType(AccessGroupProjectArrayOutput{})
	pulumi.RegisterOutputType(AccessGroupProjectMapOutput{})
}
