// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Provides Project access to an existing Integration. This requires the integration already exists and is already configured for Specific Project access.
type IntegrationProjectAccess struct {
	pulumi.CustomResourceState

	// The ID of the integration.
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
	// The ID of the Vercel project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewIntegrationProjectAccess registers a new resource with the given unique name, arguments, and options.
func NewIntegrationProjectAccess(ctx *pulumi.Context,
	name string, args *IntegrationProjectAccessArgs, opts ...pulumi.ResourceOption) (*IntegrationProjectAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IntegrationId == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationProjectAccess
	err := ctx.RegisterResource("vercel:index/integrationProjectAccess:IntegrationProjectAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationProjectAccess gets an existing IntegrationProjectAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationProjectAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationProjectAccessState, opts ...pulumi.ResourceOption) (*IntegrationProjectAccess, error) {
	var resource IntegrationProjectAccess
	err := ctx.ReadResource("vercel:index/integrationProjectAccess:IntegrationProjectAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationProjectAccess resources.
type integrationProjectAccessState struct {
	// The ID of the integration.
	IntegrationId *string `pulumi:"integrationId"`
	// The ID of the Vercel project.
	ProjectId *string `pulumi:"projectId"`
	// The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

type IntegrationProjectAccessState struct {
	// The ID of the integration.
	IntegrationId pulumi.StringPtrInput
	// The ID of the Vercel project.
	ProjectId pulumi.StringPtrInput
	// The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (IntegrationProjectAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationProjectAccessState)(nil)).Elem()
}

type integrationProjectAccessArgs struct {
	// The ID of the integration.
	IntegrationId string `pulumi:"integrationId"`
	// The ID of the Vercel project.
	ProjectId string `pulumi:"projectId"`
	// The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a IntegrationProjectAccess resource.
type IntegrationProjectAccessArgs struct {
	// The ID of the integration.
	IntegrationId pulumi.StringInput
	// The ID of the Vercel project.
	ProjectId pulumi.StringInput
	// The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (IntegrationProjectAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationProjectAccessArgs)(nil)).Elem()
}

type IntegrationProjectAccessInput interface {
	pulumi.Input

	ToIntegrationProjectAccessOutput() IntegrationProjectAccessOutput
	ToIntegrationProjectAccessOutputWithContext(ctx context.Context) IntegrationProjectAccessOutput
}

func (*IntegrationProjectAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationProjectAccess)(nil)).Elem()
}

func (i *IntegrationProjectAccess) ToIntegrationProjectAccessOutput() IntegrationProjectAccessOutput {
	return i.ToIntegrationProjectAccessOutputWithContext(context.Background())
}

func (i *IntegrationProjectAccess) ToIntegrationProjectAccessOutputWithContext(ctx context.Context) IntegrationProjectAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationProjectAccessOutput)
}

// IntegrationProjectAccessArrayInput is an input type that accepts IntegrationProjectAccessArray and IntegrationProjectAccessArrayOutput values.
// You can construct a concrete instance of `IntegrationProjectAccessArrayInput` via:
//
//	IntegrationProjectAccessArray{ IntegrationProjectAccessArgs{...} }
type IntegrationProjectAccessArrayInput interface {
	pulumi.Input

	ToIntegrationProjectAccessArrayOutput() IntegrationProjectAccessArrayOutput
	ToIntegrationProjectAccessArrayOutputWithContext(context.Context) IntegrationProjectAccessArrayOutput
}

type IntegrationProjectAccessArray []IntegrationProjectAccessInput

func (IntegrationProjectAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationProjectAccess)(nil)).Elem()
}

func (i IntegrationProjectAccessArray) ToIntegrationProjectAccessArrayOutput() IntegrationProjectAccessArrayOutput {
	return i.ToIntegrationProjectAccessArrayOutputWithContext(context.Background())
}

func (i IntegrationProjectAccessArray) ToIntegrationProjectAccessArrayOutputWithContext(ctx context.Context) IntegrationProjectAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationProjectAccessArrayOutput)
}

// IntegrationProjectAccessMapInput is an input type that accepts IntegrationProjectAccessMap and IntegrationProjectAccessMapOutput values.
// You can construct a concrete instance of `IntegrationProjectAccessMapInput` via:
//
//	IntegrationProjectAccessMap{ "key": IntegrationProjectAccessArgs{...} }
type IntegrationProjectAccessMapInput interface {
	pulumi.Input

	ToIntegrationProjectAccessMapOutput() IntegrationProjectAccessMapOutput
	ToIntegrationProjectAccessMapOutputWithContext(context.Context) IntegrationProjectAccessMapOutput
}

type IntegrationProjectAccessMap map[string]IntegrationProjectAccessInput

func (IntegrationProjectAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationProjectAccess)(nil)).Elem()
}

func (i IntegrationProjectAccessMap) ToIntegrationProjectAccessMapOutput() IntegrationProjectAccessMapOutput {
	return i.ToIntegrationProjectAccessMapOutputWithContext(context.Background())
}

func (i IntegrationProjectAccessMap) ToIntegrationProjectAccessMapOutputWithContext(ctx context.Context) IntegrationProjectAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationProjectAccessMapOutput)
}

type IntegrationProjectAccessOutput struct{ *pulumi.OutputState }

func (IntegrationProjectAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationProjectAccess)(nil)).Elem()
}

func (o IntegrationProjectAccessOutput) ToIntegrationProjectAccessOutput() IntegrationProjectAccessOutput {
	return o
}

func (o IntegrationProjectAccessOutput) ToIntegrationProjectAccessOutputWithContext(ctx context.Context) IntegrationProjectAccessOutput {
	return o
}

// The ID of the integration.
func (o IntegrationProjectAccessOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationProjectAccess) pulumi.StringOutput { return v.IntegrationId }).(pulumi.StringOutput)
}

// The ID of the Vercel project.
func (o IntegrationProjectAccessOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationProjectAccess) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.
func (o IntegrationProjectAccessOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationProjectAccess) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type IntegrationProjectAccessArrayOutput struct{ *pulumi.OutputState }

func (IntegrationProjectAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationProjectAccess)(nil)).Elem()
}

func (o IntegrationProjectAccessArrayOutput) ToIntegrationProjectAccessArrayOutput() IntegrationProjectAccessArrayOutput {
	return o
}

func (o IntegrationProjectAccessArrayOutput) ToIntegrationProjectAccessArrayOutputWithContext(ctx context.Context) IntegrationProjectAccessArrayOutput {
	return o
}

func (o IntegrationProjectAccessArrayOutput) Index(i pulumi.IntInput) IntegrationProjectAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationProjectAccess {
		return vs[0].([]*IntegrationProjectAccess)[vs[1].(int)]
	}).(IntegrationProjectAccessOutput)
}

type IntegrationProjectAccessMapOutput struct{ *pulumi.OutputState }

func (IntegrationProjectAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationProjectAccess)(nil)).Elem()
}

func (o IntegrationProjectAccessMapOutput) ToIntegrationProjectAccessMapOutput() IntegrationProjectAccessMapOutput {
	return o
}

func (o IntegrationProjectAccessMapOutput) ToIntegrationProjectAccessMapOutputWithContext(ctx context.Context) IntegrationProjectAccessMapOutput {
	return o
}

func (o IntegrationProjectAccessMapOutput) MapIndex(k pulumi.StringInput) IntegrationProjectAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationProjectAccess {
		return vs[0].(map[string]*IntegrationProjectAccess)[vs[1].(string)]
	}).(IntegrationProjectAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationProjectAccessInput)(nil)).Elem(), &IntegrationProjectAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationProjectAccessArrayInput)(nil)).Elem(), IntegrationProjectAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationProjectAccessMapInput)(nil)).Elem(), IntegrationProjectAccessMap{})
	pulumi.RegisterOutputType(IntegrationProjectAccessOutput{})
	pulumi.RegisterOutputType(IntegrationProjectAccessArrayOutput{})
	pulumi.RegisterOutputType(IntegrationProjectAccessMapOutput{})
}
