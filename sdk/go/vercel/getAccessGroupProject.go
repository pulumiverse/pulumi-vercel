// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Provides information about an existing Access Group Project Assignment.
//
// For more detailed information, please see the [Vercel documentation](https://vercel.com/docs/accounts/team-members-and-roles/access-groups).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vercel.LookupProject(ctx, &vercel.LookupProjectArgs{
//				Name: "my-existing-project",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vercel.LookupAccessGroupProject(ctx, &vercel.LookupAccessGroupProjectArgs{
//				AccessGroupId: "ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
//				ProjectId:     exampleVercelProject.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAccessGroupProject(ctx *pulumi.Context, args *LookupAccessGroupProjectArgs, opts ...pulumi.InvokeOption) (*LookupAccessGroupProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAccessGroupProjectResult
	err := ctx.Invoke("vercel:index/getAccessGroupProject:getAccessGroupProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccessGroupProject.
type LookupAccessGroupProjectArgs struct {
	// The Access Group ID.
	AccessGroupId string `pulumi:"accessGroupId"`
	// The Project ID.
	ProjectId string `pulumi:"projectId"`
	// The ID of the team the Access Group Project should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// A collection of values returned by getAccessGroupProject.
type LookupAccessGroupProjectResult struct {
	// The Access Group ID.
	AccessGroupId string `pulumi:"accessGroupId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Project ID.
	ProjectId string `pulumi:"projectId"`
	// The Access Group Project Role.
	Role string `pulumi:"role"`
	// The ID of the team the Access Group Project should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId string `pulumi:"teamId"`
}

func LookupAccessGroupProjectOutput(ctx *pulumi.Context, args LookupAccessGroupProjectOutputArgs, opts ...pulumi.InvokeOption) LookupAccessGroupProjectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAccessGroupProjectResultOutput, error) {
			args := v.(LookupAccessGroupProjectArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupAccessGroupProjectResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getAccessGroupProject:getAccessGroupProject", args, &rv, "", opts...)
			if err != nil {
				return LookupAccessGroupProjectResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupAccessGroupProjectResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupAccessGroupProjectResultOutput), nil
			}
			return output, nil
		}).(LookupAccessGroupProjectResultOutput)
}

// A collection of arguments for invoking getAccessGroupProject.
type LookupAccessGroupProjectOutputArgs struct {
	// The Access Group ID.
	AccessGroupId pulumi.StringInput `pulumi:"accessGroupId"`
	// The Project ID.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The ID of the team the Access Group Project should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
}

func (LookupAccessGroupProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessGroupProjectArgs)(nil)).Elem()
}

// A collection of values returned by getAccessGroupProject.
type LookupAccessGroupProjectResultOutput struct{ *pulumi.OutputState }

func (LookupAccessGroupProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessGroupProjectResult)(nil)).Elem()
}

func (o LookupAccessGroupProjectResultOutput) ToLookupAccessGroupProjectResultOutput() LookupAccessGroupProjectResultOutput {
	return o
}

func (o LookupAccessGroupProjectResultOutput) ToLookupAccessGroupProjectResultOutputWithContext(ctx context.Context) LookupAccessGroupProjectResultOutput {
	return o
}

// The Access Group ID.
func (o LookupAccessGroupProjectResultOutput) AccessGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessGroupProjectResult) string { return v.AccessGroupId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAccessGroupProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessGroupProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Project ID.
func (o LookupAccessGroupProjectResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessGroupProjectResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The Access Group Project Role.
func (o LookupAccessGroupProjectResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessGroupProjectResult) string { return v.Role }).(pulumi.StringOutput)
}

// The ID of the team the Access Group Project should exist under. Required when configuring a team resource if a default team has not been set in the provider.
func (o LookupAccessGroupProjectResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessGroupProjectResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccessGroupProjectResultOutput{})
}
