// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Links a project to a Shared Environment Variable.
//
// > This resource is intended to be used alongside a SharedEnvironmentVariable Data Source, not the Resource. The Resource also defines which projects to link to the shared environment variable, and using both SharedEnvironmentVariable and SharedEnvironmentVariableProjectLink together results in undefined behavior.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := vercel.LookupSharedEnvironmentVariable(ctx, &vercel.LookupSharedEnvironmentVariableArgs{
//				Key: pulumi.StringRef("EXAMPLE_ENV_VAR"),
//				Targets: []string{
//					"production",
//					"preview",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleProject, err := vercel.NewProject(ctx, "example", &vercel.ProjectArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vercel.NewSharedEnvironmentVariableProjectLink(ctx, "example", &vercel.SharedEnvironmentVariableProjectLinkArgs{
//				SharedEnvironmentVariableId: pulumi.String(example.Id),
//				ProjectId:                   exampleProject.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SharedEnvironmentVariableProjectLink struct {
	pulumi.CustomResourceState

	// The ID of the Vercel project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The ID of the shared environment variable.
	SharedEnvironmentVariableId pulumi.StringOutput `pulumi:"sharedEnvironmentVariableId"`
	// The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewSharedEnvironmentVariableProjectLink registers a new resource with the given unique name, arguments, and options.
func NewSharedEnvironmentVariableProjectLink(ctx *pulumi.Context,
	name string, args *SharedEnvironmentVariableProjectLinkArgs, opts ...pulumi.ResourceOption) (*SharedEnvironmentVariableProjectLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SharedEnvironmentVariableId == nil {
		return nil, errors.New("invalid value for required argument 'SharedEnvironmentVariableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SharedEnvironmentVariableProjectLink
	err := ctx.RegisterResource("vercel:index/sharedEnvironmentVariableProjectLink:SharedEnvironmentVariableProjectLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSharedEnvironmentVariableProjectLink gets an existing SharedEnvironmentVariableProjectLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSharedEnvironmentVariableProjectLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SharedEnvironmentVariableProjectLinkState, opts ...pulumi.ResourceOption) (*SharedEnvironmentVariableProjectLink, error) {
	var resource SharedEnvironmentVariableProjectLink
	err := ctx.ReadResource("vercel:index/sharedEnvironmentVariableProjectLink:SharedEnvironmentVariableProjectLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SharedEnvironmentVariableProjectLink resources.
type sharedEnvironmentVariableProjectLinkState struct {
	// The ID of the Vercel project.
	ProjectId *string `pulumi:"projectId"`
	// The ID of the shared environment variable.
	SharedEnvironmentVariableId *string `pulumi:"sharedEnvironmentVariableId"`
	// The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

type SharedEnvironmentVariableProjectLinkState struct {
	// The ID of the Vercel project.
	ProjectId pulumi.StringPtrInput
	// The ID of the shared environment variable.
	SharedEnvironmentVariableId pulumi.StringPtrInput
	// The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (SharedEnvironmentVariableProjectLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedEnvironmentVariableProjectLinkState)(nil)).Elem()
}

type sharedEnvironmentVariableProjectLinkArgs struct {
	// The ID of the Vercel project.
	ProjectId string `pulumi:"projectId"`
	// The ID of the shared environment variable.
	SharedEnvironmentVariableId string `pulumi:"sharedEnvironmentVariableId"`
	// The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a SharedEnvironmentVariableProjectLink resource.
type SharedEnvironmentVariableProjectLinkArgs struct {
	// The ID of the Vercel project.
	ProjectId pulumi.StringInput
	// The ID of the shared environment variable.
	SharedEnvironmentVariableId pulumi.StringInput
	// The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (SharedEnvironmentVariableProjectLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedEnvironmentVariableProjectLinkArgs)(nil)).Elem()
}

type SharedEnvironmentVariableProjectLinkInput interface {
	pulumi.Input

	ToSharedEnvironmentVariableProjectLinkOutput() SharedEnvironmentVariableProjectLinkOutput
	ToSharedEnvironmentVariableProjectLinkOutputWithContext(ctx context.Context) SharedEnvironmentVariableProjectLinkOutput
}

func (*SharedEnvironmentVariableProjectLink) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedEnvironmentVariableProjectLink)(nil)).Elem()
}

func (i *SharedEnvironmentVariableProjectLink) ToSharedEnvironmentVariableProjectLinkOutput() SharedEnvironmentVariableProjectLinkOutput {
	return i.ToSharedEnvironmentVariableProjectLinkOutputWithContext(context.Background())
}

func (i *SharedEnvironmentVariableProjectLink) ToSharedEnvironmentVariableProjectLinkOutputWithContext(ctx context.Context) SharedEnvironmentVariableProjectLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedEnvironmentVariableProjectLinkOutput)
}

// SharedEnvironmentVariableProjectLinkArrayInput is an input type that accepts SharedEnvironmentVariableProjectLinkArray and SharedEnvironmentVariableProjectLinkArrayOutput values.
// You can construct a concrete instance of `SharedEnvironmentVariableProjectLinkArrayInput` via:
//
//	SharedEnvironmentVariableProjectLinkArray{ SharedEnvironmentVariableProjectLinkArgs{...} }
type SharedEnvironmentVariableProjectLinkArrayInput interface {
	pulumi.Input

	ToSharedEnvironmentVariableProjectLinkArrayOutput() SharedEnvironmentVariableProjectLinkArrayOutput
	ToSharedEnvironmentVariableProjectLinkArrayOutputWithContext(context.Context) SharedEnvironmentVariableProjectLinkArrayOutput
}

type SharedEnvironmentVariableProjectLinkArray []SharedEnvironmentVariableProjectLinkInput

func (SharedEnvironmentVariableProjectLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedEnvironmentVariableProjectLink)(nil)).Elem()
}

func (i SharedEnvironmentVariableProjectLinkArray) ToSharedEnvironmentVariableProjectLinkArrayOutput() SharedEnvironmentVariableProjectLinkArrayOutput {
	return i.ToSharedEnvironmentVariableProjectLinkArrayOutputWithContext(context.Background())
}

func (i SharedEnvironmentVariableProjectLinkArray) ToSharedEnvironmentVariableProjectLinkArrayOutputWithContext(ctx context.Context) SharedEnvironmentVariableProjectLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedEnvironmentVariableProjectLinkArrayOutput)
}

// SharedEnvironmentVariableProjectLinkMapInput is an input type that accepts SharedEnvironmentVariableProjectLinkMap and SharedEnvironmentVariableProjectLinkMapOutput values.
// You can construct a concrete instance of `SharedEnvironmentVariableProjectLinkMapInput` via:
//
//	SharedEnvironmentVariableProjectLinkMap{ "key": SharedEnvironmentVariableProjectLinkArgs{...} }
type SharedEnvironmentVariableProjectLinkMapInput interface {
	pulumi.Input

	ToSharedEnvironmentVariableProjectLinkMapOutput() SharedEnvironmentVariableProjectLinkMapOutput
	ToSharedEnvironmentVariableProjectLinkMapOutputWithContext(context.Context) SharedEnvironmentVariableProjectLinkMapOutput
}

type SharedEnvironmentVariableProjectLinkMap map[string]SharedEnvironmentVariableProjectLinkInput

func (SharedEnvironmentVariableProjectLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedEnvironmentVariableProjectLink)(nil)).Elem()
}

func (i SharedEnvironmentVariableProjectLinkMap) ToSharedEnvironmentVariableProjectLinkMapOutput() SharedEnvironmentVariableProjectLinkMapOutput {
	return i.ToSharedEnvironmentVariableProjectLinkMapOutputWithContext(context.Background())
}

func (i SharedEnvironmentVariableProjectLinkMap) ToSharedEnvironmentVariableProjectLinkMapOutputWithContext(ctx context.Context) SharedEnvironmentVariableProjectLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedEnvironmentVariableProjectLinkMapOutput)
}

type SharedEnvironmentVariableProjectLinkOutput struct{ *pulumi.OutputState }

func (SharedEnvironmentVariableProjectLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedEnvironmentVariableProjectLink)(nil)).Elem()
}

func (o SharedEnvironmentVariableProjectLinkOutput) ToSharedEnvironmentVariableProjectLinkOutput() SharedEnvironmentVariableProjectLinkOutput {
	return o
}

func (o SharedEnvironmentVariableProjectLinkOutput) ToSharedEnvironmentVariableProjectLinkOutputWithContext(ctx context.Context) SharedEnvironmentVariableProjectLinkOutput {
	return o
}

// The ID of the Vercel project.
func (o SharedEnvironmentVariableProjectLinkOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedEnvironmentVariableProjectLink) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The ID of the shared environment variable.
func (o SharedEnvironmentVariableProjectLinkOutput) SharedEnvironmentVariableId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedEnvironmentVariableProjectLink) pulumi.StringOutput {
		return v.SharedEnvironmentVariableId
	}).(pulumi.StringOutput)
}

// The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
func (o SharedEnvironmentVariableProjectLinkOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedEnvironmentVariableProjectLink) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type SharedEnvironmentVariableProjectLinkArrayOutput struct{ *pulumi.OutputState }

func (SharedEnvironmentVariableProjectLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedEnvironmentVariableProjectLink)(nil)).Elem()
}

func (o SharedEnvironmentVariableProjectLinkArrayOutput) ToSharedEnvironmentVariableProjectLinkArrayOutput() SharedEnvironmentVariableProjectLinkArrayOutput {
	return o
}

func (o SharedEnvironmentVariableProjectLinkArrayOutput) ToSharedEnvironmentVariableProjectLinkArrayOutputWithContext(ctx context.Context) SharedEnvironmentVariableProjectLinkArrayOutput {
	return o
}

func (o SharedEnvironmentVariableProjectLinkArrayOutput) Index(i pulumi.IntInput) SharedEnvironmentVariableProjectLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SharedEnvironmentVariableProjectLink {
		return vs[0].([]*SharedEnvironmentVariableProjectLink)[vs[1].(int)]
	}).(SharedEnvironmentVariableProjectLinkOutput)
}

type SharedEnvironmentVariableProjectLinkMapOutput struct{ *pulumi.OutputState }

func (SharedEnvironmentVariableProjectLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedEnvironmentVariableProjectLink)(nil)).Elem()
}

func (o SharedEnvironmentVariableProjectLinkMapOutput) ToSharedEnvironmentVariableProjectLinkMapOutput() SharedEnvironmentVariableProjectLinkMapOutput {
	return o
}

func (o SharedEnvironmentVariableProjectLinkMapOutput) ToSharedEnvironmentVariableProjectLinkMapOutputWithContext(ctx context.Context) SharedEnvironmentVariableProjectLinkMapOutput {
	return o
}

func (o SharedEnvironmentVariableProjectLinkMapOutput) MapIndex(k pulumi.StringInput) SharedEnvironmentVariableProjectLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SharedEnvironmentVariableProjectLink {
		return vs[0].(map[string]*SharedEnvironmentVariableProjectLink)[vs[1].(string)]
	}).(SharedEnvironmentVariableProjectLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SharedEnvironmentVariableProjectLinkInput)(nil)).Elem(), &SharedEnvironmentVariableProjectLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedEnvironmentVariableProjectLinkArrayInput)(nil)).Elem(), SharedEnvironmentVariableProjectLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedEnvironmentVariableProjectLinkMapInput)(nil)).Elem(), SharedEnvironmentVariableProjectLinkMap{})
	pulumi.RegisterOutputType(SharedEnvironmentVariableProjectLinkOutput{})
	pulumi.RegisterOutputType(SharedEnvironmentVariableProjectLinkArrayOutput{})
	pulumi.RegisterOutputType(SharedEnvironmentVariableProjectLinkMapOutput{})
}
