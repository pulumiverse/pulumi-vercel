// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Provides domain configuration information for a Vercel project.
//
// This data source returns configuration details for a domain associated with a specific project,
// including recommended CNAME and IPv4 values.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/go/aws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myAwesomeProject, err := vercel.NewProject(ctx, "my_awesome_project", &vercel.ProjectArgs{
//				Name: pulumi.String("my-awesome-project"),
//			})
//			if err != nil {
//				return err
//			}
//			// "vercel_domain_config" Usage
//			exampleCom := vercel.GetDomainConfigOutput(ctx, vercel.GetDomainConfigOutputArgs{
//				Domain:          pulumi.String("example.com"),
//				ProjectIdOrName: myAwesomeProject.ID(),
//			}, nil)
//			wwwExampleCom := vercel.GetDomainConfigOutput(ctx, vercel.GetDomainConfigOutputArgs{
//				Domain:          pulumi.String("www.example.com"),
//				ProjectIdOrName: myAwesomeProject.ID(),
//			}, nil)
//			// External DNS provider example
//			_, err = aws.NewRoute53Record(ctx, "example_com_a", &aws.Route53RecordArgs{
//				ZoneId:  "...zone_id_from_somewhere...",
//				Name:    exampleCom.Domain,
//				Type:    "A",
//				Ttl:     300,
//				Records: exampleCom.RecommendedIpv4s,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aws.NewRoute53Record(ctx, "www_example_com_cname", &aws.Route53RecordArgs{
//				ZoneId: "...zone_id_from_somewhere...",
//				Name:   wwwExampleCom.Domain,
//				Type:   "CNAME",
//				Ttl:    300,
//				Records: pulumi.StringArray{
//					wwwExampleCom.RecommendedCname,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDomainConfig(ctx *pulumi.Context, args *GetDomainConfigArgs, opts ...pulumi.InvokeOption) (*GetDomainConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDomainConfigResult
	err := ctx.Invoke("vercel:index/getDomainConfig:getDomainConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomainConfig.
type GetDomainConfigArgs struct {
	// The domain name to get configuration for.
	Domain string `pulumi:"domain"`
	// The project ID or name associated with the domain.
	ProjectIdOrName string `pulumi:"projectIdOrName"`
	// The ID of the team the domain config exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// A collection of values returned by getDomainConfig.
type GetDomainConfigResult struct {
	// The domain name to get configuration for.
	Domain string `pulumi:"domain"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The project ID or name associated with the domain.
	ProjectIdOrName string `pulumi:"projectIdOrName"`
	// The recommended CNAME value for the domain.
	RecommendedCname string `pulumi:"recommendedCname"`
	// The recommended IPv4 values for the domain.
	RecommendedIpv4s []string `pulumi:"recommendedIpv4s"`
	// The ID of the team the domain config exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId string `pulumi:"teamId"`
}

func GetDomainConfigOutput(ctx *pulumi.Context, args GetDomainConfigOutputArgs, opts ...pulumi.InvokeOption) GetDomainConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDomainConfigResultOutput, error) {
			args := v.(GetDomainConfigArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetDomainConfigResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getDomainConfig:getDomainConfig", args, &rv, "", opts...)
			if err != nil {
				return GetDomainConfigResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetDomainConfigResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetDomainConfigResultOutput), nil
			}
			return output, nil
		}).(GetDomainConfigResultOutput)
}

// A collection of arguments for invoking getDomainConfig.
type GetDomainConfigOutputArgs struct {
	// The domain name to get configuration for.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The project ID or name associated with the domain.
	ProjectIdOrName pulumi.StringInput `pulumi:"projectIdOrName"`
	// The ID of the team the domain config exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
}

func (GetDomainConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainConfigArgs)(nil)).Elem()
}

// A collection of values returned by getDomainConfig.
type GetDomainConfigResultOutput struct{ *pulumi.OutputState }

func (GetDomainConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainConfigResult)(nil)).Elem()
}

func (o GetDomainConfigResultOutput) ToGetDomainConfigResultOutput() GetDomainConfigResultOutput {
	return o
}

func (o GetDomainConfigResultOutput) ToGetDomainConfigResultOutputWithContext(ctx context.Context) GetDomainConfigResultOutput {
	return o
}

// The domain name to get configuration for.
func (o GetDomainConfigResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainConfigResult) string { return v.Domain }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDomainConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

// The project ID or name associated with the domain.
func (o GetDomainConfigResultOutput) ProjectIdOrName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainConfigResult) string { return v.ProjectIdOrName }).(pulumi.StringOutput)
}

// The recommended CNAME value for the domain.
func (o GetDomainConfigResultOutput) RecommendedCname() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainConfigResult) string { return v.RecommendedCname }).(pulumi.StringOutput)
}

// The recommended IPv4 values for the domain.
func (o GetDomainConfigResultOutput) RecommendedIpv4s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainConfigResult) []string { return v.RecommendedIpv4s }).(pulumi.StringArrayOutput)
}

// The ID of the team the domain config exists under. Required when configuring a team resource if a default team has not been set in the provider.
func (o GetDomainConfigResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainConfigResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDomainConfigResultOutput{})
}
