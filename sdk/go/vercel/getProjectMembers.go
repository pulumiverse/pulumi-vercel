// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Retrieves members and their roles for a Vercel Project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := vercel.LookupProject(ctx, &vercel.LookupProjectArgs{
//				Name: "example-with-members",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vercel.LookupProjectMembers(ctx, &vercel.LookupProjectMembersArgs{
//				ProjectId: example.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupProjectMembers(ctx *pulumi.Context, args *LookupProjectMembersArgs, opts ...pulumi.InvokeOption) (*LookupProjectMembersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectMembersResult
	err := ctx.Invoke("vercel:index/getProjectMembers:getProjectMembers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectMembers.
type LookupProjectMembersArgs struct {
	// The ID of the Vercel Project.
	ProjectId string `pulumi:"projectId"`
	// The team ID to which the project belongs. Required when accessing a team project if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// A collection of values returned by getProjectMembers.
type LookupProjectMembersResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The set of members in this project.
	Members []GetProjectMembersMember `pulumi:"members"`
	// The ID of the Vercel Project.
	ProjectId string `pulumi:"projectId"`
	// The team ID to which the project belongs. Required when accessing a team project if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

func LookupProjectMembersOutput(ctx *pulumi.Context, args LookupProjectMembersOutputArgs, opts ...pulumi.InvokeOption) LookupProjectMembersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProjectMembersResultOutput, error) {
			args := v.(LookupProjectMembersArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupProjectMembersResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getProjectMembers:getProjectMembers", args, &rv, "", opts...)
			if err != nil {
				return LookupProjectMembersResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupProjectMembersResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupProjectMembersResultOutput), nil
			}
			return output, nil
		}).(LookupProjectMembersResultOutput)
}

// A collection of arguments for invoking getProjectMembers.
type LookupProjectMembersOutputArgs struct {
	// The ID of the Vercel Project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The team ID to which the project belongs. Required when accessing a team project if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
}

func (LookupProjectMembersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectMembersArgs)(nil)).Elem()
}

// A collection of values returned by getProjectMembers.
type LookupProjectMembersResultOutput struct{ *pulumi.OutputState }

func (LookupProjectMembersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectMembersResult)(nil)).Elem()
}

func (o LookupProjectMembersResultOutput) ToLookupProjectMembersResultOutput() LookupProjectMembersResultOutput {
	return o
}

func (o LookupProjectMembersResultOutput) ToLookupProjectMembersResultOutputWithContext(ctx context.Context) LookupProjectMembersResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectMembersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectMembersResult) string { return v.Id }).(pulumi.StringOutput)
}

// The set of members in this project.
func (o LookupProjectMembersResultOutput) Members() GetProjectMembersMemberArrayOutput {
	return o.ApplyT(func(v LookupProjectMembersResult) []GetProjectMembersMember { return v.Members }).(GetProjectMembersMemberArrayOutput)
}

// The ID of the Vercel Project.
func (o LookupProjectMembersResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectMembersResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The team ID to which the project belongs. Required when accessing a team project if a default team has not been set in the provider.
func (o LookupProjectMembersResultOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupProjectMembersResult) *string { return v.TeamId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectMembersResultOutput{})
}
