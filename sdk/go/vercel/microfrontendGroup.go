// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Provides a Microfrontend Group resource.
//
// A Microfrontend Group is a definition of a microfrontend belonging to a Vercel Team.
//
// ## Import
//
// If importing into a personal account, or with a team configured on the provider, simply use the record id.
//
// - the microfrontend ID can be taken from the microfrontend settings page
//
// ```sh
// $ pulumi import vercel:index/microfrontendGroup:MicrofrontendGroup example mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
// ```
//
// Alternatively, you can import via the team_id and microfrontend_id.
//
// - team_id can be found in the team `settings` tab in the Vercel UI.
//
// - the microfrontend ID can be taken from the microfrontend settings page
//
// ```sh
// $ pulumi import vercel:index/microfrontendGroup:MicrofrontendGroup example team_xxxxxxxxxxxxxxxxxxxxxxxx/mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
// ```
type MicrofrontendGroup struct {
	pulumi.CustomResourceState

	// The default app for the project. Used as the entry point for the microfrontend.
	DefaultApp MicrofrontendGroupDefaultAppOutput `pulumi:"defaultApp"`
	// A human readable name for the microfrontends group.
	Name pulumi.StringOutput `pulumi:"name"`
	// A slugified version of the name.
	Slug pulumi.StringOutput `pulumi:"slug"`
	// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewMicrofrontendGroup registers a new resource with the given unique name, arguments, and options.
func NewMicrofrontendGroup(ctx *pulumi.Context,
	name string, args *MicrofrontendGroupArgs, opts ...pulumi.ResourceOption) (*MicrofrontendGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultApp == nil {
		return nil, errors.New("invalid value for required argument 'DefaultApp'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MicrofrontendGroup
	err := ctx.RegisterResource("vercel:index/microfrontendGroup:MicrofrontendGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMicrofrontendGroup gets an existing MicrofrontendGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMicrofrontendGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MicrofrontendGroupState, opts ...pulumi.ResourceOption) (*MicrofrontendGroup, error) {
	var resource MicrofrontendGroup
	err := ctx.ReadResource("vercel:index/microfrontendGroup:MicrofrontendGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MicrofrontendGroup resources.
type microfrontendGroupState struct {
	// The default app for the project. Used as the entry point for the microfrontend.
	DefaultApp *MicrofrontendGroupDefaultApp `pulumi:"defaultApp"`
	// A human readable name for the microfrontends group.
	Name *string `pulumi:"name"`
	// A slugified version of the name.
	Slug *string `pulumi:"slug"`
	// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

type MicrofrontendGroupState struct {
	// The default app for the project. Used as the entry point for the microfrontend.
	DefaultApp MicrofrontendGroupDefaultAppPtrInput
	// A human readable name for the microfrontends group.
	Name pulumi.StringPtrInput
	// A slugified version of the name.
	Slug pulumi.StringPtrInput
	// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (MicrofrontendGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*microfrontendGroupState)(nil)).Elem()
}

type microfrontendGroupArgs struct {
	// The default app for the project. Used as the entry point for the microfrontend.
	DefaultApp MicrofrontendGroupDefaultApp `pulumi:"defaultApp"`
	// A human readable name for the microfrontends group.
	Name *string `pulumi:"name"`
	// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a MicrofrontendGroup resource.
type MicrofrontendGroupArgs struct {
	// The default app for the project. Used as the entry point for the microfrontend.
	DefaultApp MicrofrontendGroupDefaultAppInput
	// A human readable name for the microfrontends group.
	Name pulumi.StringPtrInput
	// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (MicrofrontendGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*microfrontendGroupArgs)(nil)).Elem()
}

type MicrofrontendGroupInput interface {
	pulumi.Input

	ToMicrofrontendGroupOutput() MicrofrontendGroupOutput
	ToMicrofrontendGroupOutputWithContext(ctx context.Context) MicrofrontendGroupOutput
}

func (*MicrofrontendGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**MicrofrontendGroup)(nil)).Elem()
}

func (i *MicrofrontendGroup) ToMicrofrontendGroupOutput() MicrofrontendGroupOutput {
	return i.ToMicrofrontendGroupOutputWithContext(context.Background())
}

func (i *MicrofrontendGroup) ToMicrofrontendGroupOutputWithContext(ctx context.Context) MicrofrontendGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrofrontendGroupOutput)
}

// MicrofrontendGroupArrayInput is an input type that accepts MicrofrontendGroupArray and MicrofrontendGroupArrayOutput values.
// You can construct a concrete instance of `MicrofrontendGroupArrayInput` via:
//
//	MicrofrontendGroupArray{ MicrofrontendGroupArgs{...} }
type MicrofrontendGroupArrayInput interface {
	pulumi.Input

	ToMicrofrontendGroupArrayOutput() MicrofrontendGroupArrayOutput
	ToMicrofrontendGroupArrayOutputWithContext(context.Context) MicrofrontendGroupArrayOutput
}

type MicrofrontendGroupArray []MicrofrontendGroupInput

func (MicrofrontendGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MicrofrontendGroup)(nil)).Elem()
}

func (i MicrofrontendGroupArray) ToMicrofrontendGroupArrayOutput() MicrofrontendGroupArrayOutput {
	return i.ToMicrofrontendGroupArrayOutputWithContext(context.Background())
}

func (i MicrofrontendGroupArray) ToMicrofrontendGroupArrayOutputWithContext(ctx context.Context) MicrofrontendGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrofrontendGroupArrayOutput)
}

// MicrofrontendGroupMapInput is an input type that accepts MicrofrontendGroupMap and MicrofrontendGroupMapOutput values.
// You can construct a concrete instance of `MicrofrontendGroupMapInput` via:
//
//	MicrofrontendGroupMap{ "key": MicrofrontendGroupArgs{...} }
type MicrofrontendGroupMapInput interface {
	pulumi.Input

	ToMicrofrontendGroupMapOutput() MicrofrontendGroupMapOutput
	ToMicrofrontendGroupMapOutputWithContext(context.Context) MicrofrontendGroupMapOutput
}

type MicrofrontendGroupMap map[string]MicrofrontendGroupInput

func (MicrofrontendGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MicrofrontendGroup)(nil)).Elem()
}

func (i MicrofrontendGroupMap) ToMicrofrontendGroupMapOutput() MicrofrontendGroupMapOutput {
	return i.ToMicrofrontendGroupMapOutputWithContext(context.Background())
}

func (i MicrofrontendGroupMap) ToMicrofrontendGroupMapOutputWithContext(ctx context.Context) MicrofrontendGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrofrontendGroupMapOutput)
}

type MicrofrontendGroupOutput struct{ *pulumi.OutputState }

func (MicrofrontendGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MicrofrontendGroup)(nil)).Elem()
}

func (o MicrofrontendGroupOutput) ToMicrofrontendGroupOutput() MicrofrontendGroupOutput {
	return o
}

func (o MicrofrontendGroupOutput) ToMicrofrontendGroupOutputWithContext(ctx context.Context) MicrofrontendGroupOutput {
	return o
}

// The default app for the project. Used as the entry point for the microfrontend.
func (o MicrofrontendGroupOutput) DefaultApp() MicrofrontendGroupDefaultAppOutput {
	return o.ApplyT(func(v *MicrofrontendGroup) MicrofrontendGroupDefaultAppOutput { return v.DefaultApp }).(MicrofrontendGroupDefaultAppOutput)
}

// A human readable name for the microfrontends group.
func (o MicrofrontendGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MicrofrontendGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A slugified version of the name.
func (o MicrofrontendGroupOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *MicrofrontendGroup) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
func (o MicrofrontendGroupOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *MicrofrontendGroup) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type MicrofrontendGroupArrayOutput struct{ *pulumi.OutputState }

func (MicrofrontendGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MicrofrontendGroup)(nil)).Elem()
}

func (o MicrofrontendGroupArrayOutput) ToMicrofrontendGroupArrayOutput() MicrofrontendGroupArrayOutput {
	return o
}

func (o MicrofrontendGroupArrayOutput) ToMicrofrontendGroupArrayOutputWithContext(ctx context.Context) MicrofrontendGroupArrayOutput {
	return o
}

func (o MicrofrontendGroupArrayOutput) Index(i pulumi.IntInput) MicrofrontendGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MicrofrontendGroup {
		return vs[0].([]*MicrofrontendGroup)[vs[1].(int)]
	}).(MicrofrontendGroupOutput)
}

type MicrofrontendGroupMapOutput struct{ *pulumi.OutputState }

func (MicrofrontendGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MicrofrontendGroup)(nil)).Elem()
}

func (o MicrofrontendGroupMapOutput) ToMicrofrontendGroupMapOutput() MicrofrontendGroupMapOutput {
	return o
}

func (o MicrofrontendGroupMapOutput) ToMicrofrontendGroupMapOutputWithContext(ctx context.Context) MicrofrontendGroupMapOutput {
	return o
}

func (o MicrofrontendGroupMapOutput) MapIndex(k pulumi.StringInput) MicrofrontendGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MicrofrontendGroup {
		return vs[0].(map[string]*MicrofrontendGroup)[vs[1].(string)]
	}).(MicrofrontendGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MicrofrontendGroupInput)(nil)).Elem(), &MicrofrontendGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*MicrofrontendGroupArrayInput)(nil)).Elem(), MicrofrontendGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MicrofrontendGroupMapInput)(nil)).Elem(), MicrofrontendGroupMap{})
	pulumi.RegisterOutputType(MicrofrontendGroupOutput{})
	pulumi.RegisterOutputType(MicrofrontendGroupArrayOutput{})
	pulumi.RegisterOutputType(MicrofrontendGroupMapOutput{})
}
