// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Provides information about an existing Microfrontend Group Membership.
//
// A Microfrontend Group Membership is a definition of a Vercel Project being a part of a Microfrontend Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vercel.LookupMicrofrontendGroupMembership(ctx, &vercel.LookupMicrofrontendGroupMembershipArgs{
//				ProjectId:            "prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
//				MicrofrontendGroupId: "mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupMicrofrontendGroupMembership(ctx *pulumi.Context, args *LookupMicrofrontendGroupMembershipArgs, opts ...pulumi.InvokeOption) (*LookupMicrofrontendGroupMembershipResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMicrofrontendGroupMembershipResult
	err := ctx.Invoke("vercel:index/getMicrofrontendGroupMembership:getMicrofrontendGroupMembership", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMicrofrontendGroupMembership.
type LookupMicrofrontendGroupMembershipArgs struct {
	// The ID of the microfrontend group.
	MicrofrontendGroupId string `pulumi:"microfrontendGroupId"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// A collection of values returned by getMicrofrontendGroupMembership.
type LookupMicrofrontendGroupMembershipResult struct {
	// The default route for the project. Used for the screenshot of deployments.
	DefaultRoute string `pulumi:"defaultRoute"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the microfrontend group.
	MicrofrontendGroupId string `pulumi:"microfrontendGroupId"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// Whether the project is route observability for this project. If dalse, the project will be route observability for all projects to the default project.
	RouteObservabilityToThisProject bool `pulumi:"routeObservabilityToThisProject"`
	// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId string `pulumi:"teamId"`
}

func LookupMicrofrontendGroupMembershipOutput(ctx *pulumi.Context, args LookupMicrofrontendGroupMembershipOutputArgs, opts ...pulumi.InvokeOption) LookupMicrofrontendGroupMembershipResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMicrofrontendGroupMembershipResultOutput, error) {
			args := v.(LookupMicrofrontendGroupMembershipArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupMicrofrontendGroupMembershipResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getMicrofrontendGroupMembership:getMicrofrontendGroupMembership", args, &rv, "", opts...)
			if err != nil {
				return LookupMicrofrontendGroupMembershipResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupMicrofrontendGroupMembershipResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupMicrofrontendGroupMembershipResultOutput), nil
			}
			return output, nil
		}).(LookupMicrofrontendGroupMembershipResultOutput)
}

// A collection of arguments for invoking getMicrofrontendGroupMembership.
type LookupMicrofrontendGroupMembershipOutputArgs struct {
	// The ID of the microfrontend group.
	MicrofrontendGroupId pulumi.StringInput `pulumi:"microfrontendGroupId"`
	// The ID of the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
}

func (LookupMicrofrontendGroupMembershipOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMicrofrontendGroupMembershipArgs)(nil)).Elem()
}

// A collection of values returned by getMicrofrontendGroupMembership.
type LookupMicrofrontendGroupMembershipResultOutput struct{ *pulumi.OutputState }

func (LookupMicrofrontendGroupMembershipResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMicrofrontendGroupMembershipResult)(nil)).Elem()
}

func (o LookupMicrofrontendGroupMembershipResultOutput) ToLookupMicrofrontendGroupMembershipResultOutput() LookupMicrofrontendGroupMembershipResultOutput {
	return o
}

func (o LookupMicrofrontendGroupMembershipResultOutput) ToLookupMicrofrontendGroupMembershipResultOutputWithContext(ctx context.Context) LookupMicrofrontendGroupMembershipResultOutput {
	return o
}

// The default route for the project. Used for the screenshot of deployments.
func (o LookupMicrofrontendGroupMembershipResultOutput) DefaultRoute() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMicrofrontendGroupMembershipResult) string { return v.DefaultRoute }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMicrofrontendGroupMembershipResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMicrofrontendGroupMembershipResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the microfrontend group.
func (o LookupMicrofrontendGroupMembershipResultOutput) MicrofrontendGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMicrofrontendGroupMembershipResult) string { return v.MicrofrontendGroupId }).(pulumi.StringOutput)
}

// The ID of the project.
func (o LookupMicrofrontendGroupMembershipResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMicrofrontendGroupMembershipResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Whether the project is route observability for this project. If dalse, the project will be route observability for all projects to the default project.
func (o LookupMicrofrontendGroupMembershipResultOutput) RouteObservabilityToThisProject() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMicrofrontendGroupMembershipResult) bool { return v.RouteObservabilityToThisProject }).(pulumi.BoolOutput)
}

// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
func (o LookupMicrofrontendGroupMembershipResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMicrofrontendGroupMembershipResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMicrofrontendGroupMembershipResultOutput{})
}
