// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Resource for a Vercel project rolling release configuration.
type ProjectRollingRelease struct {
	pulumi.CustomResourceState

	// The type of advancement for the rolling release. Must be either 'automatic' or 'manual-approval'.
	AdvancementType pulumi.StringOutput `pulumi:"advancementType"`
	// The ID of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The stages for the rolling release configuration. The last stage must have targetPercentage = 100.
	Stages ProjectRollingReleaseStageArrayOutput `pulumi:"stages"`
	// The ID of the Vercel team.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewProjectRollingRelease registers a new resource with the given unique name, arguments, and options.
func NewProjectRollingRelease(ctx *pulumi.Context,
	name string, args *ProjectRollingReleaseArgs, opts ...pulumi.ResourceOption) (*ProjectRollingRelease, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdvancementType == nil {
		return nil, errors.New("invalid value for required argument 'AdvancementType'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Stages == nil {
		return nil, errors.New("invalid value for required argument 'Stages'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectRollingRelease
	err := ctx.RegisterResource("vercel:index/projectRollingRelease:ProjectRollingRelease", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectRollingRelease gets an existing ProjectRollingRelease resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectRollingRelease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectRollingReleaseState, opts ...pulumi.ResourceOption) (*ProjectRollingRelease, error) {
	var resource ProjectRollingRelease
	err := ctx.ReadResource("vercel:index/projectRollingRelease:ProjectRollingRelease", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectRollingRelease resources.
type projectRollingReleaseState struct {
	// The type of advancement for the rolling release. Must be either 'automatic' or 'manual-approval'.
	AdvancementType *string `pulumi:"advancementType"`
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// The stages for the rolling release configuration. The last stage must have targetPercentage = 100.
	Stages []ProjectRollingReleaseStage `pulumi:"stages"`
	// The ID of the Vercel team.
	TeamId *string `pulumi:"teamId"`
}

type ProjectRollingReleaseState struct {
	// The type of advancement for the rolling release. Must be either 'automatic' or 'manual-approval'.
	AdvancementType pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringPtrInput
	// The stages for the rolling release configuration. The last stage must have targetPercentage = 100.
	Stages ProjectRollingReleaseStageArrayInput
	// The ID of the Vercel team.
	TeamId pulumi.StringPtrInput
}

func (ProjectRollingReleaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRollingReleaseState)(nil)).Elem()
}

type projectRollingReleaseArgs struct {
	// The type of advancement for the rolling release. Must be either 'automatic' or 'manual-approval'.
	AdvancementType string `pulumi:"advancementType"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// The stages for the rolling release configuration. The last stage must have targetPercentage = 100.
	Stages []ProjectRollingReleaseStage `pulumi:"stages"`
	// The ID of the Vercel team.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a ProjectRollingRelease resource.
type ProjectRollingReleaseArgs struct {
	// The type of advancement for the rolling release. Must be either 'automatic' or 'manual-approval'.
	AdvancementType pulumi.StringInput
	// The ID of the project.
	ProjectId pulumi.StringInput
	// The stages for the rolling release configuration. The last stage must have targetPercentage = 100.
	Stages ProjectRollingReleaseStageArrayInput
	// The ID of the Vercel team.
	TeamId pulumi.StringPtrInput
}

func (ProjectRollingReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRollingReleaseArgs)(nil)).Elem()
}

type ProjectRollingReleaseInput interface {
	pulumi.Input

	ToProjectRollingReleaseOutput() ProjectRollingReleaseOutput
	ToProjectRollingReleaseOutputWithContext(ctx context.Context) ProjectRollingReleaseOutput
}

func (*ProjectRollingRelease) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRollingRelease)(nil)).Elem()
}

func (i *ProjectRollingRelease) ToProjectRollingReleaseOutput() ProjectRollingReleaseOutput {
	return i.ToProjectRollingReleaseOutputWithContext(context.Background())
}

func (i *ProjectRollingRelease) ToProjectRollingReleaseOutputWithContext(ctx context.Context) ProjectRollingReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRollingReleaseOutput)
}

// ProjectRollingReleaseArrayInput is an input type that accepts ProjectRollingReleaseArray and ProjectRollingReleaseArrayOutput values.
// You can construct a concrete instance of `ProjectRollingReleaseArrayInput` via:
//
//	ProjectRollingReleaseArray{ ProjectRollingReleaseArgs{...} }
type ProjectRollingReleaseArrayInput interface {
	pulumi.Input

	ToProjectRollingReleaseArrayOutput() ProjectRollingReleaseArrayOutput
	ToProjectRollingReleaseArrayOutputWithContext(context.Context) ProjectRollingReleaseArrayOutput
}

type ProjectRollingReleaseArray []ProjectRollingReleaseInput

func (ProjectRollingReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectRollingRelease)(nil)).Elem()
}

func (i ProjectRollingReleaseArray) ToProjectRollingReleaseArrayOutput() ProjectRollingReleaseArrayOutput {
	return i.ToProjectRollingReleaseArrayOutputWithContext(context.Background())
}

func (i ProjectRollingReleaseArray) ToProjectRollingReleaseArrayOutputWithContext(ctx context.Context) ProjectRollingReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRollingReleaseArrayOutput)
}

// ProjectRollingReleaseMapInput is an input type that accepts ProjectRollingReleaseMap and ProjectRollingReleaseMapOutput values.
// You can construct a concrete instance of `ProjectRollingReleaseMapInput` via:
//
//	ProjectRollingReleaseMap{ "key": ProjectRollingReleaseArgs{...} }
type ProjectRollingReleaseMapInput interface {
	pulumi.Input

	ToProjectRollingReleaseMapOutput() ProjectRollingReleaseMapOutput
	ToProjectRollingReleaseMapOutputWithContext(context.Context) ProjectRollingReleaseMapOutput
}

type ProjectRollingReleaseMap map[string]ProjectRollingReleaseInput

func (ProjectRollingReleaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectRollingRelease)(nil)).Elem()
}

func (i ProjectRollingReleaseMap) ToProjectRollingReleaseMapOutput() ProjectRollingReleaseMapOutput {
	return i.ToProjectRollingReleaseMapOutputWithContext(context.Background())
}

func (i ProjectRollingReleaseMap) ToProjectRollingReleaseMapOutputWithContext(ctx context.Context) ProjectRollingReleaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRollingReleaseMapOutput)
}

type ProjectRollingReleaseOutput struct{ *pulumi.OutputState }

func (ProjectRollingReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRollingRelease)(nil)).Elem()
}

func (o ProjectRollingReleaseOutput) ToProjectRollingReleaseOutput() ProjectRollingReleaseOutput {
	return o
}

func (o ProjectRollingReleaseOutput) ToProjectRollingReleaseOutputWithContext(ctx context.Context) ProjectRollingReleaseOutput {
	return o
}

// The type of advancement for the rolling release. Must be either 'automatic' or 'manual-approval'.
func (o ProjectRollingReleaseOutput) AdvancementType() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRollingRelease) pulumi.StringOutput { return v.AdvancementType }).(pulumi.StringOutput)
}

// The ID of the project.
func (o ProjectRollingReleaseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRollingRelease) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The stages for the rolling release configuration. The last stage must have targetPercentage = 100.
func (o ProjectRollingReleaseOutput) Stages() ProjectRollingReleaseStageArrayOutput {
	return o.ApplyT(func(v *ProjectRollingRelease) ProjectRollingReleaseStageArrayOutput { return v.Stages }).(ProjectRollingReleaseStageArrayOutput)
}

// The ID of the Vercel team.
func (o ProjectRollingReleaseOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRollingRelease) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type ProjectRollingReleaseArrayOutput struct{ *pulumi.OutputState }

func (ProjectRollingReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectRollingRelease)(nil)).Elem()
}

func (o ProjectRollingReleaseArrayOutput) ToProjectRollingReleaseArrayOutput() ProjectRollingReleaseArrayOutput {
	return o
}

func (o ProjectRollingReleaseArrayOutput) ToProjectRollingReleaseArrayOutputWithContext(ctx context.Context) ProjectRollingReleaseArrayOutput {
	return o
}

func (o ProjectRollingReleaseArrayOutput) Index(i pulumi.IntInput) ProjectRollingReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectRollingRelease {
		return vs[0].([]*ProjectRollingRelease)[vs[1].(int)]
	}).(ProjectRollingReleaseOutput)
}

type ProjectRollingReleaseMapOutput struct{ *pulumi.OutputState }

func (ProjectRollingReleaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectRollingRelease)(nil)).Elem()
}

func (o ProjectRollingReleaseMapOutput) ToProjectRollingReleaseMapOutput() ProjectRollingReleaseMapOutput {
	return o
}

func (o ProjectRollingReleaseMapOutput) ToProjectRollingReleaseMapOutputWithContext(ctx context.Context) ProjectRollingReleaseMapOutput {
	return o
}

func (o ProjectRollingReleaseMapOutput) MapIndex(k pulumi.StringInput) ProjectRollingReleaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectRollingRelease {
		return vs[0].(map[string]*ProjectRollingRelease)[vs[1].(string)]
	}).(ProjectRollingReleaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRollingReleaseInput)(nil)).Elem(), &ProjectRollingRelease{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRollingReleaseArrayInput)(nil)).Elem(), ProjectRollingReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRollingReleaseMapInput)(nil)).Elem(), ProjectRollingReleaseMap{})
	pulumi.RegisterOutputType(ProjectRollingReleaseOutput{})
	pulumi.RegisterOutputType(ProjectRollingReleaseArrayOutput{})
	pulumi.RegisterOutputType(ProjectRollingReleaseMapOutput{})
}
