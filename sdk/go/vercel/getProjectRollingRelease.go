// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Data source for a Vercel project rolling release configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := vercel.LookupProject(ctx, &vercel.LookupProjectArgs{
//				Name: "example-project",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vercel.LookupProjectRollingRelease(ctx, &vercel.LookupProjectRollingReleaseArgs{
//				ProjectId: example.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupProjectRollingRelease(ctx *pulumi.Context, args *LookupProjectRollingReleaseArgs, opts ...pulumi.InvokeOption) (*LookupProjectRollingReleaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectRollingReleaseResult
	err := ctx.Invoke("vercel:index/getProjectRollingRelease:getProjectRollingRelease", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectRollingRelease.
type LookupProjectRollingReleaseArgs struct {
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// The ID of the Vercel team.
	TeamId *string `pulumi:"teamId"`
}

// A collection of values returned by getProjectRollingRelease.
type LookupProjectRollingReleaseResult struct {
	// The type of advancement for the rolling release. Either 'automatic' or 'manual-approval'.
	AdvancementType string `pulumi:"advancementType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// The stages for the rolling release configuration.
	Stages []GetProjectRollingReleaseStage `pulumi:"stages"`
	// The ID of the Vercel team.
	TeamId string `pulumi:"teamId"`
}

func LookupProjectRollingReleaseOutput(ctx *pulumi.Context, args LookupProjectRollingReleaseOutputArgs, opts ...pulumi.InvokeOption) LookupProjectRollingReleaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProjectRollingReleaseResultOutput, error) {
			args := v.(LookupProjectRollingReleaseArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupProjectRollingReleaseResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getProjectRollingRelease:getProjectRollingRelease", args, &rv, "", opts...)
			if err != nil {
				return LookupProjectRollingReleaseResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupProjectRollingReleaseResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupProjectRollingReleaseResultOutput), nil
			}
			return output, nil
		}).(LookupProjectRollingReleaseResultOutput)
}

// A collection of arguments for invoking getProjectRollingRelease.
type LookupProjectRollingReleaseOutputArgs struct {
	// The ID of the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The ID of the Vercel team.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
}

func (LookupProjectRollingReleaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectRollingReleaseArgs)(nil)).Elem()
}

// A collection of values returned by getProjectRollingRelease.
type LookupProjectRollingReleaseResultOutput struct{ *pulumi.OutputState }

func (LookupProjectRollingReleaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectRollingReleaseResult)(nil)).Elem()
}

func (o LookupProjectRollingReleaseResultOutput) ToLookupProjectRollingReleaseResultOutput() LookupProjectRollingReleaseResultOutput {
	return o
}

func (o LookupProjectRollingReleaseResultOutput) ToLookupProjectRollingReleaseResultOutputWithContext(ctx context.Context) LookupProjectRollingReleaseResultOutput {
	return o
}

// The type of advancement for the rolling release. Either 'automatic' or 'manual-approval'.
func (o LookupProjectRollingReleaseResultOutput) AdvancementType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectRollingReleaseResult) string { return v.AdvancementType }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectRollingReleaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectRollingReleaseResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the project.
func (o LookupProjectRollingReleaseResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectRollingReleaseResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The stages for the rolling release configuration.
func (o LookupProjectRollingReleaseResultOutput) Stages() GetProjectRollingReleaseStageArrayOutput {
	return o.ApplyT(func(v LookupProjectRollingReleaseResult) []GetProjectRollingReleaseStage { return v.Stages }).(GetProjectRollingReleaseStageArrayOutput)
}

// The ID of the Vercel team.
func (o LookupProjectRollingReleaseResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectRollingReleaseResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectRollingReleaseResultOutput{})
}
