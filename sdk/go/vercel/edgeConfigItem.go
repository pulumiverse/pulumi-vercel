// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel/internal"
)

// Provides an Edge Config Item.
//
// An Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.
//
// An Edge Config Item is a value within an Edge Config.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := vercel.NewEdgeConfig(ctx, "example", &vercel.EdgeConfigArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vercel.NewEdgeConfigItem(ctx, "example", &vercel.EdgeConfigItemArgs{
//				EdgeConfigId: example.ID(),
//				Key:          pulumi.String("foobar"),
//				Value:        pulumi.String("baz"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # If importing into a personal account, or with a team configured on
//
// the provider, simply use the edge config id and the key of the item to import.
//
// - edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.
//
// - key is the key of teh item to import.
//
// ```sh
// $ pulumi import vercel:index/edgeConfigItem:EdgeConfigItem example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example_key
// ```
//
// Alternatively, you can import via the team_id, edge_config_id and the key of the item to import.
//
// - team_id can be found in the team `settings` tab in the Vercel UI.
//
// - edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.
//
// - key is the key of the item to import.
//
// ```sh
// $ pulumi import vercel:index/edgeConfigItem:EdgeConfigItem example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example_key
// ```
type EdgeConfigItem struct {
	pulumi.CustomResourceState

	// The ID of the Edge Config store.
	EdgeConfigId pulumi.StringOutput `pulumi:"edgeConfigId"`
	// The name of the key you want to add to or update within your Edge Config.
	Key pulumi.StringOutput `pulumi:"key"`
	// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// The value you want to assign to the key.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewEdgeConfigItem registers a new resource with the given unique name, arguments, and options.
func NewEdgeConfigItem(ctx *pulumi.Context,
	name string, args *EdgeConfigItemArgs, opts ...pulumi.ResourceOption) (*EdgeConfigItem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeConfigId == nil {
		return nil, errors.New("invalid value for required argument 'EdgeConfigId'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EdgeConfigItem
	err := ctx.RegisterResource("vercel:index/edgeConfigItem:EdgeConfigItem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeConfigItem gets an existing EdgeConfigItem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeConfigItem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeConfigItemState, opts ...pulumi.ResourceOption) (*EdgeConfigItem, error) {
	var resource EdgeConfigItem
	err := ctx.ReadResource("vercel:index/edgeConfigItem:EdgeConfigItem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeConfigItem resources.
type edgeConfigItemState struct {
	// The ID of the Edge Config store.
	EdgeConfigId *string `pulumi:"edgeConfigId"`
	// The name of the key you want to add to or update within your Edge Config.
	Key *string `pulumi:"key"`
	// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
	// The value you want to assign to the key.
	Value *string `pulumi:"value"`
}

type EdgeConfigItemState struct {
	// The ID of the Edge Config store.
	EdgeConfigId pulumi.StringPtrInput
	// The name of the key you want to add to or update within your Edge Config.
	Key pulumi.StringPtrInput
	// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
	// The value you want to assign to the key.
	Value pulumi.StringPtrInput
}

func (EdgeConfigItemState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeConfigItemState)(nil)).Elem()
}

type edgeConfigItemArgs struct {
	// The ID of the Edge Config store.
	EdgeConfigId string `pulumi:"edgeConfigId"`
	// The name of the key you want to add to or update within your Edge Config.
	Key string `pulumi:"key"`
	// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
	// The value you want to assign to the key.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a EdgeConfigItem resource.
type EdgeConfigItemArgs struct {
	// The ID of the Edge Config store.
	EdgeConfigId pulumi.StringInput
	// The name of the key you want to add to or update within your Edge Config.
	Key pulumi.StringInput
	// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
	// The value you want to assign to the key.
	Value pulumi.StringInput
}

func (EdgeConfigItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeConfigItemArgs)(nil)).Elem()
}

type EdgeConfigItemInput interface {
	pulumi.Input

	ToEdgeConfigItemOutput() EdgeConfigItemOutput
	ToEdgeConfigItemOutputWithContext(ctx context.Context) EdgeConfigItemOutput
}

func (*EdgeConfigItem) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeConfigItem)(nil)).Elem()
}

func (i *EdgeConfigItem) ToEdgeConfigItemOutput() EdgeConfigItemOutput {
	return i.ToEdgeConfigItemOutputWithContext(context.Background())
}

func (i *EdgeConfigItem) ToEdgeConfigItemOutputWithContext(ctx context.Context) EdgeConfigItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeConfigItemOutput)
}

// EdgeConfigItemArrayInput is an input type that accepts EdgeConfigItemArray and EdgeConfigItemArrayOutput values.
// You can construct a concrete instance of `EdgeConfigItemArrayInput` via:
//
//	EdgeConfigItemArray{ EdgeConfigItemArgs{...} }
type EdgeConfigItemArrayInput interface {
	pulumi.Input

	ToEdgeConfigItemArrayOutput() EdgeConfigItemArrayOutput
	ToEdgeConfigItemArrayOutputWithContext(context.Context) EdgeConfigItemArrayOutput
}

type EdgeConfigItemArray []EdgeConfigItemInput

func (EdgeConfigItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeConfigItem)(nil)).Elem()
}

func (i EdgeConfigItemArray) ToEdgeConfigItemArrayOutput() EdgeConfigItemArrayOutput {
	return i.ToEdgeConfigItemArrayOutputWithContext(context.Background())
}

func (i EdgeConfigItemArray) ToEdgeConfigItemArrayOutputWithContext(ctx context.Context) EdgeConfigItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeConfigItemArrayOutput)
}

// EdgeConfigItemMapInput is an input type that accepts EdgeConfigItemMap and EdgeConfigItemMapOutput values.
// You can construct a concrete instance of `EdgeConfigItemMapInput` via:
//
//	EdgeConfigItemMap{ "key": EdgeConfigItemArgs{...} }
type EdgeConfigItemMapInput interface {
	pulumi.Input

	ToEdgeConfigItemMapOutput() EdgeConfigItemMapOutput
	ToEdgeConfigItemMapOutputWithContext(context.Context) EdgeConfigItemMapOutput
}

type EdgeConfigItemMap map[string]EdgeConfigItemInput

func (EdgeConfigItemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeConfigItem)(nil)).Elem()
}

func (i EdgeConfigItemMap) ToEdgeConfigItemMapOutput() EdgeConfigItemMapOutput {
	return i.ToEdgeConfigItemMapOutputWithContext(context.Background())
}

func (i EdgeConfigItemMap) ToEdgeConfigItemMapOutputWithContext(ctx context.Context) EdgeConfigItemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeConfigItemMapOutput)
}

type EdgeConfigItemOutput struct{ *pulumi.OutputState }

func (EdgeConfigItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeConfigItem)(nil)).Elem()
}

func (o EdgeConfigItemOutput) ToEdgeConfigItemOutput() EdgeConfigItemOutput {
	return o
}

func (o EdgeConfigItemOutput) ToEdgeConfigItemOutputWithContext(ctx context.Context) EdgeConfigItemOutput {
	return o
}

// The ID of the Edge Config store.
func (o EdgeConfigItemOutput) EdgeConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeConfigItem) pulumi.StringOutput { return v.EdgeConfigId }).(pulumi.StringOutput)
}

// The name of the key you want to add to or update within your Edge Config.
func (o EdgeConfigItemOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeConfigItem) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
func (o EdgeConfigItemOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeConfigItem) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// The value you want to assign to the key.
func (o EdgeConfigItemOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeConfigItem) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type EdgeConfigItemArrayOutput struct{ *pulumi.OutputState }

func (EdgeConfigItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeConfigItem)(nil)).Elem()
}

func (o EdgeConfigItemArrayOutput) ToEdgeConfigItemArrayOutput() EdgeConfigItemArrayOutput {
	return o
}

func (o EdgeConfigItemArrayOutput) ToEdgeConfigItemArrayOutputWithContext(ctx context.Context) EdgeConfigItemArrayOutput {
	return o
}

func (o EdgeConfigItemArrayOutput) Index(i pulumi.IntInput) EdgeConfigItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EdgeConfigItem {
		return vs[0].([]*EdgeConfigItem)[vs[1].(int)]
	}).(EdgeConfigItemOutput)
}

type EdgeConfigItemMapOutput struct{ *pulumi.OutputState }

func (EdgeConfigItemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeConfigItem)(nil)).Elem()
}

func (o EdgeConfigItemMapOutput) ToEdgeConfigItemMapOutput() EdgeConfigItemMapOutput {
	return o
}

func (o EdgeConfigItemMapOutput) ToEdgeConfigItemMapOutputWithContext(ctx context.Context) EdgeConfigItemMapOutput {
	return o
}

func (o EdgeConfigItemMapOutput) MapIndex(k pulumi.StringInput) EdgeConfigItemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EdgeConfigItem {
		return vs[0].(map[string]*EdgeConfigItem)[vs[1].(string)]
	}).(EdgeConfigItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeConfigItemInput)(nil)).Elem(), &EdgeConfigItem{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeConfigItemArrayInput)(nil)).Elem(), EdgeConfigItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeConfigItemMapInput)(nil)).Elem(), EdgeConfigItemMap{})
	pulumi.RegisterOutputType(EdgeConfigItemOutput{})
	pulumi.RegisterOutputType(EdgeConfigItemArrayOutput{})
	pulumi.RegisterOutputType(EdgeConfigItemMapOutput{})
}
