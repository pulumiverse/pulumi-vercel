// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel/internal"
)

// Provides information about a file on disk.
//
// This will read a single file, providing metadata for use with a `Deployment`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleFile, err := vercel.GetFile(ctx, &vercel.GetFileArgs{
//				Path: "index.html",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleProject, err := vercel.LookupProject(ctx, &vercel.LookupProjectArgs{
//				Name: "my-project",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vercel.NewDeployment(ctx, "exampleDeployment", &vercel.DeploymentArgs{
//				ProjectId: pulumi.String(exampleProject.Id),
//				Files:     pulumi.StringMap(exampleFile.File),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFile(ctx *pulumi.Context, args *GetFileArgs, opts ...pulumi.InvokeOption) (*GetFileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFileResult
	err := ctx.Invoke("vercel:index/getFile:getFile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFile.
type GetFileArgs struct {
	Path string `pulumi:"path"`
}

// A collection of values returned by getFile.
type GetFileResult struct {
	// A map of filename to metadata about the file. The metadata contains the file size and hash, and allows a deployment to be created if the file changes.
	File map[string]string `pulumi:"file"`
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Path string `pulumi:"path"`
}

func GetFileOutput(ctx *pulumi.Context, args GetFileOutputArgs, opts ...pulumi.InvokeOption) GetFileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetFileResultOutput, error) {
			args := v.(GetFileArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetFileResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getFile:getFile", args, &rv, "", opts...)
			if err != nil {
				return GetFileResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetFileResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetFileResultOutput), nil
			}
			return output, nil
		}).(GetFileResultOutput)
}

// A collection of arguments for invoking getFile.
type GetFileOutputArgs struct {
	Path pulumi.StringInput `pulumi:"path"`
}

func (GetFileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFileArgs)(nil)).Elem()
}

// A collection of values returned by getFile.
type GetFileResultOutput struct{ *pulumi.OutputState }

func (GetFileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFileResult)(nil)).Elem()
}

func (o GetFileResultOutput) ToGetFileResultOutput() GetFileResultOutput {
	return o
}

func (o GetFileResultOutput) ToGetFileResultOutputWithContext(ctx context.Context) GetFileResultOutput {
	return o
}

// A map of filename to metadata about the file. The metadata contains the file size and hash, and allows a deployment to be created if the file changes.
func (o GetFileResultOutput) File() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetFileResult) map[string]string { return v.File }).(pulumi.StringMapOutput)
}

// The ID of this resource.
func (o GetFileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetFileResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileResult) string { return v.Path }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFileResultOutput{})
}
