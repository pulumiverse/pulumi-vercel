// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Provides information about an existing Microfrontend Group.
//
// A Microfrontend Group is a definition of a microfrontend belonging to a Vercel Team.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vercel.LookupMicrofrontendGroup(ctx, &vercel.LookupMicrofrontendGroupArgs{
//				Id: "mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupMicrofrontendGroup(ctx *pulumi.Context, args *LookupMicrofrontendGroupArgs, opts ...pulumi.InvokeOption) (*LookupMicrofrontendGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMicrofrontendGroupResult
	err := ctx.Invoke("vercel:index/getMicrofrontendGroup:getMicrofrontendGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMicrofrontendGroup.
type LookupMicrofrontendGroupArgs struct {
	// A unique identifier for the group of microfrontends. Example: mfe_12HKQaOmR5t5Uy6vdcQsNIiZgHGB
	Id string `pulumi:"id"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// A collection of values returned by getMicrofrontendGroup.
type LookupMicrofrontendGroupResult struct {
	// The default app for the project. Used as the entry point for the microfrontend.
	DefaultApp GetMicrofrontendGroupDefaultApp `pulumi:"defaultApp"`
	// A unique identifier for the group of microfrontends. Example: mfe_12HKQaOmR5t5Uy6vdcQsNIiZgHGB
	Id string `pulumi:"id"`
	// A human readable name for the microfrontends group.
	Name string `pulumi:"name"`
	// A slugified version of the name.
	Slug string `pulumi:"slug"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId string `pulumi:"teamId"`
}

func LookupMicrofrontendGroupOutput(ctx *pulumi.Context, args LookupMicrofrontendGroupOutputArgs, opts ...pulumi.InvokeOption) LookupMicrofrontendGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMicrofrontendGroupResultOutput, error) {
			args := v.(LookupMicrofrontendGroupArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupMicrofrontendGroupResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getMicrofrontendGroup:getMicrofrontendGroup", args, &rv, "", opts...)
			if err != nil {
				return LookupMicrofrontendGroupResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupMicrofrontendGroupResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupMicrofrontendGroupResultOutput), nil
			}
			return output, nil
		}).(LookupMicrofrontendGroupResultOutput)
}

// A collection of arguments for invoking getMicrofrontendGroup.
type LookupMicrofrontendGroupOutputArgs struct {
	// A unique identifier for the group of microfrontends. Example: mfe_12HKQaOmR5t5Uy6vdcQsNIiZgHGB
	Id pulumi.StringInput `pulumi:"id"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
}

func (LookupMicrofrontendGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMicrofrontendGroupArgs)(nil)).Elem()
}

// A collection of values returned by getMicrofrontendGroup.
type LookupMicrofrontendGroupResultOutput struct{ *pulumi.OutputState }

func (LookupMicrofrontendGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMicrofrontendGroupResult)(nil)).Elem()
}

func (o LookupMicrofrontendGroupResultOutput) ToLookupMicrofrontendGroupResultOutput() LookupMicrofrontendGroupResultOutput {
	return o
}

func (o LookupMicrofrontendGroupResultOutput) ToLookupMicrofrontendGroupResultOutputWithContext(ctx context.Context) LookupMicrofrontendGroupResultOutput {
	return o
}

// The default app for the project. Used as the entry point for the microfrontend.
func (o LookupMicrofrontendGroupResultOutput) DefaultApp() GetMicrofrontendGroupDefaultAppOutput {
	return o.ApplyT(func(v LookupMicrofrontendGroupResult) GetMicrofrontendGroupDefaultApp { return v.DefaultApp }).(GetMicrofrontendGroupDefaultAppOutput)
}

// A unique identifier for the group of microfrontends. Example: mfe_12HKQaOmR5t5Uy6vdcQsNIiZgHGB
func (o LookupMicrofrontendGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMicrofrontendGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// A human readable name for the microfrontends group.
func (o LookupMicrofrontendGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMicrofrontendGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// A slugified version of the name.
func (o LookupMicrofrontendGroupResultOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMicrofrontendGroupResult) string { return v.Slug }).(pulumi.StringOutput)
}

// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
func (o LookupMicrofrontendGroupResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMicrofrontendGroupResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMicrofrontendGroupResultOutput{})
}
