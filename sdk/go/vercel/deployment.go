// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

type Deployment struct {
	pulumi.CustomResourceState

	// The ID of the Custom Environment to deploy to. If not specified, the deployment will use the standard environments (production/preview).
	CustomEnvironmentId pulumi.StringPtrOutput `pulumi:"customEnvironmentId"`
	DeleteOnDestroy     pulumi.BoolPtrOutput   `pulumi:"deleteOnDestroy"`
	// A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.
	Domains pulumi.StringArrayOutput `pulumi:"domains"`
	// A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `Project` resource.
	Environment pulumi.StringMapOutput `pulumi:"environment"`
	// A map of files to be uploaded for the deployment. This should be provided by a `getProjectDirectory` or `getFile` data source. Required if `gitSource` is not set.
	Files pulumi.StringMapOutput `pulumi:"files"`
	// Arbitrary key/value metadata to attach to the deployment (equivalent to the Vercel CLI --meta flags).
	Meta pulumi.StringMapOutput `pulumi:"meta"`
	// If specified then the `pathPrefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.
	PathPrefix pulumi.StringPtrOutput `pulumi:"pathPrefix"`
	// true if the deployment is a production deployment, meaning production aliases will be assigned.
	Production pulumi.BoolOutput `pulumi:"production"`
	// The project ID to add the deployment to.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Project settings that will be applied to the deployment.
	ProjectSettings DeploymentProjectSettingsPtrOutput `pulumi:"projectSettings"`
	// The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `files` is not set.
	Ref pulumi.StringPtrOutput `pulumi:"ref"`
	// The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// A unique URL that is automatically generated for a deployment.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewDeployment registers a new resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context,
	name string, args *DeploymentArgs, opts ...pulumi.ResourceOption) (*Deployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Deployment
	err := ctx.RegisterResource("vercel:index/deployment:Deployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentState, opts ...pulumi.ResourceOption) (*Deployment, error) {
	var resource Deployment
	err := ctx.ReadResource("vercel:index/deployment:Deployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Deployment resources.
type deploymentState struct {
	// The ID of the Custom Environment to deploy to. If not specified, the deployment will use the standard environments (production/preview).
	CustomEnvironmentId *string `pulumi:"customEnvironmentId"`
	DeleteOnDestroy     *bool   `pulumi:"deleteOnDestroy"`
	// A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.
	Domains []string `pulumi:"domains"`
	// A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `Project` resource.
	Environment map[string]string `pulumi:"environment"`
	// A map of files to be uploaded for the deployment. This should be provided by a `getProjectDirectory` or `getFile` data source. Required if `gitSource` is not set.
	Files map[string]string `pulumi:"files"`
	// Arbitrary key/value metadata to attach to the deployment (equivalent to the Vercel CLI --meta flags).
	Meta map[string]string `pulumi:"meta"`
	// If specified then the `pathPrefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.
	PathPrefix *string `pulumi:"pathPrefix"`
	// true if the deployment is a production deployment, meaning production aliases will be assigned.
	Production *bool `pulumi:"production"`
	// The project ID to add the deployment to.
	ProjectId *string `pulumi:"projectId"`
	// Project settings that will be applied to the deployment.
	ProjectSettings *DeploymentProjectSettings `pulumi:"projectSettings"`
	// The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `files` is not set.
	Ref *string `pulumi:"ref"`
	// The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
	// A unique URL that is automatically generated for a deployment.
	Url *string `pulumi:"url"`
}

type DeploymentState struct {
	// The ID of the Custom Environment to deploy to. If not specified, the deployment will use the standard environments (production/preview).
	CustomEnvironmentId pulumi.StringPtrInput
	DeleteOnDestroy     pulumi.BoolPtrInput
	// A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.
	Domains pulumi.StringArrayInput
	// A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `Project` resource.
	Environment pulumi.StringMapInput
	// A map of files to be uploaded for the deployment. This should be provided by a `getProjectDirectory` or `getFile` data source. Required if `gitSource` is not set.
	Files pulumi.StringMapInput
	// Arbitrary key/value metadata to attach to the deployment (equivalent to the Vercel CLI --meta flags).
	Meta pulumi.StringMapInput
	// If specified then the `pathPrefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.
	PathPrefix pulumi.StringPtrInput
	// true if the deployment is a production deployment, meaning production aliases will be assigned.
	Production pulumi.BoolPtrInput
	// The project ID to add the deployment to.
	ProjectId pulumi.StringPtrInput
	// Project settings that will be applied to the deployment.
	ProjectSettings DeploymentProjectSettingsPtrInput
	// The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `files` is not set.
	Ref pulumi.StringPtrInput
	// The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
	// A unique URL that is automatically generated for a deployment.
	Url pulumi.StringPtrInput
}

func (DeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentState)(nil)).Elem()
}

type deploymentArgs struct {
	// The ID of the Custom Environment to deploy to. If not specified, the deployment will use the standard environments (production/preview).
	CustomEnvironmentId *string `pulumi:"customEnvironmentId"`
	DeleteOnDestroy     *bool   `pulumi:"deleteOnDestroy"`
	// A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `Project` resource.
	Environment map[string]string `pulumi:"environment"`
	// A map of files to be uploaded for the deployment. This should be provided by a `getProjectDirectory` or `getFile` data source. Required if `gitSource` is not set.
	Files map[string]string `pulumi:"files"`
	// Arbitrary key/value metadata to attach to the deployment (equivalent to the Vercel CLI --meta flags).
	Meta map[string]string `pulumi:"meta"`
	// If specified then the `pathPrefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.
	PathPrefix *string `pulumi:"pathPrefix"`
	// true if the deployment is a production deployment, meaning production aliases will be assigned.
	Production *bool `pulumi:"production"`
	// The project ID to add the deployment to.
	ProjectId string `pulumi:"projectId"`
	// Project settings that will be applied to the deployment.
	ProjectSettings *DeploymentProjectSettings `pulumi:"projectSettings"`
	// The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `files` is not set.
	Ref *string `pulumi:"ref"`
	// The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a Deployment resource.
type DeploymentArgs struct {
	// The ID of the Custom Environment to deploy to. If not specified, the deployment will use the standard environments (production/preview).
	CustomEnvironmentId pulumi.StringPtrInput
	DeleteOnDestroy     pulumi.BoolPtrInput
	// A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `Project` resource.
	Environment pulumi.StringMapInput
	// A map of files to be uploaded for the deployment. This should be provided by a `getProjectDirectory` or `getFile` data source. Required if `gitSource` is not set.
	Files pulumi.StringMapInput
	// Arbitrary key/value metadata to attach to the deployment (equivalent to the Vercel CLI --meta flags).
	Meta pulumi.StringMapInput
	// If specified then the `pathPrefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.
	PathPrefix pulumi.StringPtrInput
	// true if the deployment is a production deployment, meaning production aliases will be assigned.
	Production pulumi.BoolPtrInput
	// The project ID to add the deployment to.
	ProjectId pulumi.StringInput
	// Project settings that will be applied to the deployment.
	ProjectSettings DeploymentProjectSettingsPtrInput
	// The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `files` is not set.
	Ref pulumi.StringPtrInput
	// The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentArgs)(nil)).Elem()
}

type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput
}

func (*Deployment) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *Deployment) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i *Deployment) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

// DeploymentArrayInput is an input type that accepts DeploymentArray and DeploymentArrayOutput values.
// You can construct a concrete instance of `DeploymentArrayInput` via:
//
//	DeploymentArray{ DeploymentArgs{...} }
type DeploymentArrayInput interface {
	pulumi.Input

	ToDeploymentArrayOutput() DeploymentArrayOutput
	ToDeploymentArrayOutputWithContext(context.Context) DeploymentArrayOutput
}

type DeploymentArray []DeploymentInput

func (DeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Deployment)(nil)).Elem()
}

func (i DeploymentArray) ToDeploymentArrayOutput() DeploymentArrayOutput {
	return i.ToDeploymentArrayOutputWithContext(context.Background())
}

func (i DeploymentArray) ToDeploymentArrayOutputWithContext(ctx context.Context) DeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentArrayOutput)
}

// DeploymentMapInput is an input type that accepts DeploymentMap and DeploymentMapOutput values.
// You can construct a concrete instance of `DeploymentMapInput` via:
//
//	DeploymentMap{ "key": DeploymentArgs{...} }
type DeploymentMapInput interface {
	pulumi.Input

	ToDeploymentMapOutput() DeploymentMapOutput
	ToDeploymentMapOutputWithContext(context.Context) DeploymentMapOutput
}

type DeploymentMap map[string]DeploymentInput

func (DeploymentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Deployment)(nil)).Elem()
}

func (i DeploymentMap) ToDeploymentMapOutput() DeploymentMapOutput {
	return i.ToDeploymentMapOutputWithContext(context.Background())
}

func (i DeploymentMap) ToDeploymentMapOutputWithContext(ctx context.Context) DeploymentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentMapOutput)
}

type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

// The ID of the Custom Environment to deploy to. If not specified, the deployment will use the standard environments (production/preview).
func (o DeploymentOutput) CustomEnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.CustomEnvironmentId }).(pulumi.StringPtrOutput)
}

func (o DeploymentOutput) DeleteOnDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.BoolPtrOutput { return v.DeleteOnDestroy }).(pulumi.BoolPtrOutput)
}

// A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.
func (o DeploymentOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringArrayOutput { return v.Domains }).(pulumi.StringArrayOutput)
}

// A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `Project` resource.
func (o DeploymentOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

// A map of files to be uploaded for the deployment. This should be provided by a `getProjectDirectory` or `getFile` data source. Required if `gitSource` is not set.
func (o DeploymentOutput) Files() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringMapOutput { return v.Files }).(pulumi.StringMapOutput)
}

// Arbitrary key/value metadata to attach to the deployment (equivalent to the Vercel CLI --meta flags).
func (o DeploymentOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringMapOutput { return v.Meta }).(pulumi.StringMapOutput)
}

// If specified then the `pathPrefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.
func (o DeploymentOutput) PathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.PathPrefix }).(pulumi.StringPtrOutput)
}

// true if the deployment is a production deployment, meaning production aliases will be assigned.
func (o DeploymentOutput) Production() pulumi.BoolOutput {
	return o.ApplyT(func(v *Deployment) pulumi.BoolOutput { return v.Production }).(pulumi.BoolOutput)
}

// The project ID to add the deployment to.
func (o DeploymentOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Project settings that will be applied to the deployment.
func (o DeploymentOutput) ProjectSettings() DeploymentProjectSettingsPtrOutput {
	return o.ApplyT(func(v *Deployment) DeploymentProjectSettingsPtrOutput { return v.ProjectSettings }).(DeploymentProjectSettingsPtrOutput)
}

// The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `files` is not set.
func (o DeploymentOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.Ref }).(pulumi.StringPtrOutput)
}

// The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.
func (o DeploymentOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// A unique URL that is automatically generated for a deployment.
func (o DeploymentOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type DeploymentArrayOutput struct{ *pulumi.OutputState }

func (DeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Deployment)(nil)).Elem()
}

func (o DeploymentArrayOutput) ToDeploymentArrayOutput() DeploymentArrayOutput {
	return o
}

func (o DeploymentArrayOutput) ToDeploymentArrayOutputWithContext(ctx context.Context) DeploymentArrayOutput {
	return o
}

func (o DeploymentArrayOutput) Index(i pulumi.IntInput) DeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Deployment {
		return vs[0].([]*Deployment)[vs[1].(int)]
	}).(DeploymentOutput)
}

type DeploymentMapOutput struct{ *pulumi.OutputState }

func (DeploymentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Deployment)(nil)).Elem()
}

func (o DeploymentMapOutput) ToDeploymentMapOutput() DeploymentMapOutput {
	return o
}

func (o DeploymentMapOutput) ToDeploymentMapOutputWithContext(ctx context.Context) DeploymentMapOutput {
	return o
}

func (o DeploymentMapOutput) MapIndex(k pulumi.StringInput) DeploymentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Deployment {
		return vs[0].(map[string]*Deployment)[vs[1].(string)]
	}).(DeploymentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentInput)(nil)).Elem(), &Deployment{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentArrayInput)(nil)).Elem(), DeploymentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentMapInput)(nil)).Elem(), DeploymentMap{})
	pulumi.RegisterOutputType(DeploymentOutput{})
	pulumi.RegisterOutputType(DeploymentArrayOutput{})
	pulumi.RegisterOutputType(DeploymentMapOutput{})
}
