// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "vercel:index/accessGroup:AccessGroup":
		r = &AccessGroup{}
	case "vercel:index/accessGroupProject:AccessGroupProject":
		r = &AccessGroupProject{}
	case "vercel:index/alias:Alias":
		r = &Alias{}
	case "vercel:index/attackChallengeMode:AttackChallengeMode":
		r = &AttackChallengeMode{}
	case "vercel:index/customCertificate:CustomCertificate":
		r = &CustomCertificate{}
	case "vercel:index/customEnvironment:CustomEnvironment":
		r = &CustomEnvironment{}
	case "vercel:index/deployment:Deployment":
		r = &Deployment{}
	case "vercel:index/dnsRecord:DnsRecord":
		r = &DnsRecord{}
	case "vercel:index/edgeConfig:EdgeConfig":
		r = &EdgeConfig{}
	case "vercel:index/edgeConfigItem:EdgeConfigItem":
		r = &EdgeConfigItem{}
	case "vercel:index/edgeConfigSchema:EdgeConfigSchema":
		r = &EdgeConfigSchema{}
	case "vercel:index/edgeConfigToken:EdgeConfigToken":
		r = &EdgeConfigToken{}
	case "vercel:index/firewallBypass:FirewallBypass":
		r = &FirewallBypass{}
	case "vercel:index/firewallConfig:FirewallConfig":
		r = &FirewallConfig{}
	case "vercel:index/integrationProjectAccess:IntegrationProjectAccess":
		r = &IntegrationProjectAccess{}
	case "vercel:index/logDrain:LogDrain":
		r = &LogDrain{}
	case "vercel:index/microfrontendGroup:MicrofrontendGroup":
		r = &MicrofrontendGroup{}
	case "vercel:index/microfrontendGroupMembership:MicrofrontendGroupMembership":
		r = &MicrofrontendGroupMembership{}
	case "vercel:index/project:Project":
		r = &Project{}
	case "vercel:index/projectCrons:ProjectCrons":
		r = &ProjectCrons{}
	case "vercel:index/projectDeploymentRetention:ProjectDeploymentRetention":
		r = &ProjectDeploymentRetention{}
	case "vercel:index/projectDomain:ProjectDomain":
		r = &ProjectDomain{}
	case "vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable":
		r = &ProjectEnvironmentVariable{}
	case "vercel:index/projectEnvironmentVariables:ProjectEnvironmentVariables":
		r = &ProjectEnvironmentVariables{}
	case "vercel:index/projectMembers:ProjectMembers":
		r = &ProjectMembers{}
	case "vercel:index/projectRollingRelease:ProjectRollingRelease":
		r = &ProjectRollingRelease{}
	case "vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable":
		r = &SharedEnvironmentVariable{}
	case "vercel:index/sharedEnvironmentVariableProjectLink:SharedEnvironmentVariableProjectLink":
		r = &SharedEnvironmentVariableProjectLink{}
	case "vercel:index/teamConfig:TeamConfig":
		r = &TeamConfig{}
	case "vercel:index/teamMember:TeamMember":
		r = &TeamMember{}
	case "vercel:index/webhook:Webhook":
		r = &Webhook{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:vercel" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"vercel",
		"index/accessGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/accessGroupProject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/alias",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/attackChallengeMode",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/customCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/customEnvironment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/deployment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/dnsRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/edgeConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/edgeConfigItem",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/edgeConfigSchema",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/edgeConfigToken",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/firewallBypass",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/firewallConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/integrationProjectAccess",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/logDrain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/microfrontendGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/microfrontendGroupMembership",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/project",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/projectCrons",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/projectDeploymentRetention",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/projectDomain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/projectEnvironmentVariable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/projectEnvironmentVariables",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/projectMembers",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/projectRollingRelease",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/sharedEnvironmentVariable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/sharedEnvironmentVariableProjectLink",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/teamConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/teamMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vercel",
		"index/webhook",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"vercel",
		&pkg{version},
	)
}
