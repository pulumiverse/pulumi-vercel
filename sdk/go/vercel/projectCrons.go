// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Provides a Project Crons resource.
//
// The resource toggles whether crons are enabled for a Vercel project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := vercel.NewProject(ctx, "example", &vercel.ProjectArgs{
//				Name:      pulumi.String("example-project"),
//				Framework: pulumi.String("nextjs"),
//				GitRepository: &vercel.ProjectGitRepositoryArgs{
//					Type: pulumi.String("github"),
//					Repo: pulumi.String("vercel/some-repo"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vercel.NewProjectCrons(ctx, "example", &vercel.ProjectCronsArgs{
//				ProjectId: example.ID(),
//				Enabled:   pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// If importing with a team configured on the provider, simply use the project ID.
//
// - project_id can be found in the project `settings` tab in the Vercel UI.
//
// ```sh
// $ pulumi import vercel:index/projectCrons:ProjectCrons example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
// ```
//
// Alternatively, you can import via the team_id and project_id.
//
// - team_id can be found in the team `settings` tab in the Vercel UI.
//
// - project_id can be found in the project `settings` tab in the Vercel UI.
//
// ```sh
// $ pulumi import vercel:index/projectCrons:ProjectCrons example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
// ```
type ProjectCrons struct {
	pulumi.CustomResourceState

	// Whether crons are enabled for the project.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The ID of the Project to toggle crons for.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewProjectCrons registers a new resource with the given unique name, arguments, and options.
func NewProjectCrons(ctx *pulumi.Context,
	name string, args *ProjectCronsArgs, opts ...pulumi.ResourceOption) (*ProjectCrons, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectCrons
	err := ctx.RegisterResource("vercel:index/projectCrons:ProjectCrons", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectCrons gets an existing ProjectCrons resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectCrons(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectCronsState, opts ...pulumi.ResourceOption) (*ProjectCrons, error) {
	var resource ProjectCrons
	err := ctx.ReadResource("vercel:index/projectCrons:ProjectCrons", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectCrons resources.
type projectCronsState struct {
	// Whether crons are enabled for the project.
	Enabled *bool `pulumi:"enabled"`
	// The ID of the Project to toggle crons for.
	ProjectId *string `pulumi:"projectId"`
	// The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

type ProjectCronsState struct {
	// Whether crons are enabled for the project.
	Enabled pulumi.BoolPtrInput
	// The ID of the Project to toggle crons for.
	ProjectId pulumi.StringPtrInput
	// The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (ProjectCronsState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectCronsState)(nil)).Elem()
}

type projectCronsArgs struct {
	// Whether crons are enabled for the project.
	Enabled bool `pulumi:"enabled"`
	// The ID of the Project to toggle crons for.
	ProjectId string `pulumi:"projectId"`
	// The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a ProjectCrons resource.
type ProjectCronsArgs struct {
	// Whether crons are enabled for the project.
	Enabled pulumi.BoolInput
	// The ID of the Project to toggle crons for.
	ProjectId pulumi.StringInput
	// The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (ProjectCronsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectCronsArgs)(nil)).Elem()
}

type ProjectCronsInput interface {
	pulumi.Input

	ToProjectCronsOutput() ProjectCronsOutput
	ToProjectCronsOutputWithContext(ctx context.Context) ProjectCronsOutput
}

func (*ProjectCrons) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectCrons)(nil)).Elem()
}

func (i *ProjectCrons) ToProjectCronsOutput() ProjectCronsOutput {
	return i.ToProjectCronsOutputWithContext(context.Background())
}

func (i *ProjectCrons) ToProjectCronsOutputWithContext(ctx context.Context) ProjectCronsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCronsOutput)
}

// ProjectCronsArrayInput is an input type that accepts ProjectCronsArray and ProjectCronsArrayOutput values.
// You can construct a concrete instance of `ProjectCronsArrayInput` via:
//
//	ProjectCronsArray{ ProjectCronsArgs{...} }
type ProjectCronsArrayInput interface {
	pulumi.Input

	ToProjectCronsArrayOutput() ProjectCronsArrayOutput
	ToProjectCronsArrayOutputWithContext(context.Context) ProjectCronsArrayOutput
}

type ProjectCronsArray []ProjectCronsInput

func (ProjectCronsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectCrons)(nil)).Elem()
}

func (i ProjectCronsArray) ToProjectCronsArrayOutput() ProjectCronsArrayOutput {
	return i.ToProjectCronsArrayOutputWithContext(context.Background())
}

func (i ProjectCronsArray) ToProjectCronsArrayOutputWithContext(ctx context.Context) ProjectCronsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCronsArrayOutput)
}

// ProjectCronsMapInput is an input type that accepts ProjectCronsMap and ProjectCronsMapOutput values.
// You can construct a concrete instance of `ProjectCronsMapInput` via:
//
//	ProjectCronsMap{ "key": ProjectCronsArgs{...} }
type ProjectCronsMapInput interface {
	pulumi.Input

	ToProjectCronsMapOutput() ProjectCronsMapOutput
	ToProjectCronsMapOutputWithContext(context.Context) ProjectCronsMapOutput
}

type ProjectCronsMap map[string]ProjectCronsInput

func (ProjectCronsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectCrons)(nil)).Elem()
}

func (i ProjectCronsMap) ToProjectCronsMapOutput() ProjectCronsMapOutput {
	return i.ToProjectCronsMapOutputWithContext(context.Background())
}

func (i ProjectCronsMap) ToProjectCronsMapOutputWithContext(ctx context.Context) ProjectCronsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCronsMapOutput)
}

type ProjectCronsOutput struct{ *pulumi.OutputState }

func (ProjectCronsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectCrons)(nil)).Elem()
}

func (o ProjectCronsOutput) ToProjectCronsOutput() ProjectCronsOutput {
	return o
}

func (o ProjectCronsOutput) ToProjectCronsOutputWithContext(ctx context.Context) ProjectCronsOutput {
	return o
}

// Whether crons are enabled for the project.
func (o ProjectCronsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectCrons) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the Project to toggle crons for.
func (o ProjectCronsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectCrons) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
func (o ProjectCronsOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectCrons) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type ProjectCronsArrayOutput struct{ *pulumi.OutputState }

func (ProjectCronsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectCrons)(nil)).Elem()
}

func (o ProjectCronsArrayOutput) ToProjectCronsArrayOutput() ProjectCronsArrayOutput {
	return o
}

func (o ProjectCronsArrayOutput) ToProjectCronsArrayOutputWithContext(ctx context.Context) ProjectCronsArrayOutput {
	return o
}

func (o ProjectCronsArrayOutput) Index(i pulumi.IntInput) ProjectCronsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectCrons {
		return vs[0].([]*ProjectCrons)[vs[1].(int)]
	}).(ProjectCronsOutput)
}

type ProjectCronsMapOutput struct{ *pulumi.OutputState }

func (ProjectCronsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectCrons)(nil)).Elem()
}

func (o ProjectCronsMapOutput) ToProjectCronsMapOutput() ProjectCronsMapOutput {
	return o
}

func (o ProjectCronsMapOutput) ToProjectCronsMapOutputWithContext(ctx context.Context) ProjectCronsMapOutput {
	return o
}

func (o ProjectCronsMapOutput) MapIndex(k pulumi.StringInput) ProjectCronsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectCrons {
		return vs[0].(map[string]*ProjectCrons)[vs[1].(string)]
	}).(ProjectCronsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectCronsInput)(nil)).Elem(), &ProjectCrons{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectCronsArrayInput)(nil)).Elem(), ProjectCronsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectCronsMapInput)(nil)).Elem(), ProjectCronsMap{})
	pulumi.RegisterOutputType(ProjectCronsOutput{})
	pulumi.RegisterOutputType(ProjectCronsArrayOutput{})
	pulumi.RegisterOutputType(ProjectCronsMapOutput{})
}
