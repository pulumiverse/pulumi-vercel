// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Provides a Project Domain resource.
//
// A Project Domain is used to associate a domain name with a `Project`.
//
// By default, Project Domains will be automatically applied to any `production` deployments.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := vercel.NewProject(ctx, "example", &vercel.ProjectArgs{
//				Name: pulumi.String("example-project"),
//			})
//			if err != nil {
//				return err
//			}
//			// A simple domain that will be automatically
//			// applied to each production deployment
//			exampleProjectDomain, err := vercel.NewProjectDomain(ctx, "example", &vercel.ProjectDomainArgs{
//				ProjectId: example.ID(),
//				Domain:    pulumi.String("i-love.vercel.app"),
//			})
//			if err != nil {
//				return err
//			}
//			// A redirect of a domain name to a second domain name.
//			// The status_code can optionally be controlled.
//			_, err = vercel.NewProjectDomain(ctx, "example_redirect", &vercel.ProjectDomainArgs{
//				ProjectId:          example.ID(),
//				Domain:             pulumi.String("i-also-love.vercel.app"),
//				Redirect:           exampleProjectDomain.Domain,
//				RedirectStatusCode: pulumi.Int(307),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # If importing into a personal account, or with a team configured on
//
// the provider, simply use the project ID and domain.
//
// - project_id can be found in the project `settings` tab in the Vercel UI.
//
// ```sh
// $ pulumi import vercel:index/projectDomain:ProjectDomain example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example.com
// ```
//
// Alternatively, you can import via the team_id, project_id and domain name.
//
// - team_id can be found in the team `settings` tab in the Vercel UI.
//
// - project_id can be found in the project `settings` tab in the Vercel UI.
//
// ```sh
// $ pulumi import vercel:index/projectDomain:ProjectDomain example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example.com
// ```
type ProjectDomain struct {
	pulumi.CustomResourceState

	// The name of the Custom Environment to link to the Project Domain. Deployments from this custom environment will be assigned the domain name.
	CustomEnvironmentId pulumi.StringPtrOutput `pulumi:"customEnvironmentId"`
	// The domain name to associate with the project.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.
	GitBranch pulumi.StringPtrOutput `pulumi:"gitBranch"`
	// The project ID to add the deployment to.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The domain name that serves as a target destination for redirects.
	Redirect pulumi.StringPtrOutput `pulumi:"redirect"`
	// The HTTP status code to use when serving as a redirect.
	RedirectStatusCode pulumi.IntPtrOutput `pulumi:"redirectStatusCode"`
	// The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewProjectDomain registers a new resource with the given unique name, arguments, and options.
func NewProjectDomain(ctx *pulumi.Context,
	name string, args *ProjectDomainArgs, opts ...pulumi.ResourceOption) (*ProjectDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectDomain
	err := ctx.RegisterResource("vercel:index/projectDomain:ProjectDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectDomain gets an existing ProjectDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectDomainState, opts ...pulumi.ResourceOption) (*ProjectDomain, error) {
	var resource ProjectDomain
	err := ctx.ReadResource("vercel:index/projectDomain:ProjectDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectDomain resources.
type projectDomainState struct {
	// The name of the Custom Environment to link to the Project Domain. Deployments from this custom environment will be assigned the domain name.
	CustomEnvironmentId *string `pulumi:"customEnvironmentId"`
	// The domain name to associate with the project.
	Domain *string `pulumi:"domain"`
	// Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.
	GitBranch *string `pulumi:"gitBranch"`
	// The project ID to add the deployment to.
	ProjectId *string `pulumi:"projectId"`
	// The domain name that serves as a target destination for redirects.
	Redirect *string `pulumi:"redirect"`
	// The HTTP status code to use when serving as a redirect.
	RedirectStatusCode *int `pulumi:"redirectStatusCode"`
	// The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

type ProjectDomainState struct {
	// The name of the Custom Environment to link to the Project Domain. Deployments from this custom environment will be assigned the domain name.
	CustomEnvironmentId pulumi.StringPtrInput
	// The domain name to associate with the project.
	Domain pulumi.StringPtrInput
	// Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.
	GitBranch pulumi.StringPtrInput
	// The project ID to add the deployment to.
	ProjectId pulumi.StringPtrInput
	// The domain name that serves as a target destination for redirects.
	Redirect pulumi.StringPtrInput
	// The HTTP status code to use when serving as a redirect.
	RedirectStatusCode pulumi.IntPtrInput
	// The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (ProjectDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectDomainState)(nil)).Elem()
}

type projectDomainArgs struct {
	// The name of the Custom Environment to link to the Project Domain. Deployments from this custom environment will be assigned the domain name.
	CustomEnvironmentId *string `pulumi:"customEnvironmentId"`
	// The domain name to associate with the project.
	Domain string `pulumi:"domain"`
	// Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.
	GitBranch *string `pulumi:"gitBranch"`
	// The project ID to add the deployment to.
	ProjectId string `pulumi:"projectId"`
	// The domain name that serves as a target destination for redirects.
	Redirect *string `pulumi:"redirect"`
	// The HTTP status code to use when serving as a redirect.
	RedirectStatusCode *int `pulumi:"redirectStatusCode"`
	// The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a ProjectDomain resource.
type ProjectDomainArgs struct {
	// The name of the Custom Environment to link to the Project Domain. Deployments from this custom environment will be assigned the domain name.
	CustomEnvironmentId pulumi.StringPtrInput
	// The domain name to associate with the project.
	Domain pulumi.StringInput
	// Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.
	GitBranch pulumi.StringPtrInput
	// The project ID to add the deployment to.
	ProjectId pulumi.StringInput
	// The domain name that serves as a target destination for redirects.
	Redirect pulumi.StringPtrInput
	// The HTTP status code to use when serving as a redirect.
	RedirectStatusCode pulumi.IntPtrInput
	// The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (ProjectDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectDomainArgs)(nil)).Elem()
}

type ProjectDomainInput interface {
	pulumi.Input

	ToProjectDomainOutput() ProjectDomainOutput
	ToProjectDomainOutputWithContext(ctx context.Context) ProjectDomainOutput
}

func (*ProjectDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDomain)(nil)).Elem()
}

func (i *ProjectDomain) ToProjectDomainOutput() ProjectDomainOutput {
	return i.ToProjectDomainOutputWithContext(context.Background())
}

func (i *ProjectDomain) ToProjectDomainOutputWithContext(ctx context.Context) ProjectDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDomainOutput)
}

// ProjectDomainArrayInput is an input type that accepts ProjectDomainArray and ProjectDomainArrayOutput values.
// You can construct a concrete instance of `ProjectDomainArrayInput` via:
//
//	ProjectDomainArray{ ProjectDomainArgs{...} }
type ProjectDomainArrayInput interface {
	pulumi.Input

	ToProjectDomainArrayOutput() ProjectDomainArrayOutput
	ToProjectDomainArrayOutputWithContext(context.Context) ProjectDomainArrayOutput
}

type ProjectDomainArray []ProjectDomainInput

func (ProjectDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectDomain)(nil)).Elem()
}

func (i ProjectDomainArray) ToProjectDomainArrayOutput() ProjectDomainArrayOutput {
	return i.ToProjectDomainArrayOutputWithContext(context.Background())
}

func (i ProjectDomainArray) ToProjectDomainArrayOutputWithContext(ctx context.Context) ProjectDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDomainArrayOutput)
}

// ProjectDomainMapInput is an input type that accepts ProjectDomainMap and ProjectDomainMapOutput values.
// You can construct a concrete instance of `ProjectDomainMapInput` via:
//
//	ProjectDomainMap{ "key": ProjectDomainArgs{...} }
type ProjectDomainMapInput interface {
	pulumi.Input

	ToProjectDomainMapOutput() ProjectDomainMapOutput
	ToProjectDomainMapOutputWithContext(context.Context) ProjectDomainMapOutput
}

type ProjectDomainMap map[string]ProjectDomainInput

func (ProjectDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectDomain)(nil)).Elem()
}

func (i ProjectDomainMap) ToProjectDomainMapOutput() ProjectDomainMapOutput {
	return i.ToProjectDomainMapOutputWithContext(context.Background())
}

func (i ProjectDomainMap) ToProjectDomainMapOutputWithContext(ctx context.Context) ProjectDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDomainMapOutput)
}

type ProjectDomainOutput struct{ *pulumi.OutputState }

func (ProjectDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDomain)(nil)).Elem()
}

func (o ProjectDomainOutput) ToProjectDomainOutput() ProjectDomainOutput {
	return o
}

func (o ProjectDomainOutput) ToProjectDomainOutputWithContext(ctx context.Context) ProjectDomainOutput {
	return o
}

// The name of the Custom Environment to link to the Project Domain. Deployments from this custom environment will be assigned the domain name.
func (o ProjectDomainOutput) CustomEnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectDomain) pulumi.StringPtrOutput { return v.CustomEnvironmentId }).(pulumi.StringPtrOutput)
}

// The domain name to associate with the project.
func (o ProjectDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectDomain) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.
func (o ProjectDomainOutput) GitBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectDomain) pulumi.StringPtrOutput { return v.GitBranch }).(pulumi.StringPtrOutput)
}

// The project ID to add the deployment to.
func (o ProjectDomainOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectDomain) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The domain name that serves as a target destination for redirects.
func (o ProjectDomainOutput) Redirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectDomain) pulumi.StringPtrOutput { return v.Redirect }).(pulumi.StringPtrOutput)
}

// The HTTP status code to use when serving as a redirect.
func (o ProjectDomainOutput) RedirectStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectDomain) pulumi.IntPtrOutput { return v.RedirectStatusCode }).(pulumi.IntPtrOutput)
}

// The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.
func (o ProjectDomainOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectDomain) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type ProjectDomainArrayOutput struct{ *pulumi.OutputState }

func (ProjectDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectDomain)(nil)).Elem()
}

func (o ProjectDomainArrayOutput) ToProjectDomainArrayOutput() ProjectDomainArrayOutput {
	return o
}

func (o ProjectDomainArrayOutput) ToProjectDomainArrayOutputWithContext(ctx context.Context) ProjectDomainArrayOutput {
	return o
}

func (o ProjectDomainArrayOutput) Index(i pulumi.IntInput) ProjectDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectDomain {
		return vs[0].([]*ProjectDomain)[vs[1].(int)]
	}).(ProjectDomainOutput)
}

type ProjectDomainMapOutput struct{ *pulumi.OutputState }

func (ProjectDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectDomain)(nil)).Elem()
}

func (o ProjectDomainMapOutput) ToProjectDomainMapOutput() ProjectDomainMapOutput {
	return o
}

func (o ProjectDomainMapOutput) ToProjectDomainMapOutputWithContext(ctx context.Context) ProjectDomainMapOutput {
	return o
}

func (o ProjectDomainMapOutput) MapIndex(k pulumi.StringInput) ProjectDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectDomain {
		return vs[0].(map[string]*ProjectDomain)[vs[1].(string)]
	}).(ProjectDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDomainInput)(nil)).Elem(), &ProjectDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDomainArrayInput)(nil)).Elem(), ProjectDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDomainMapInput)(nil)).Elem(), ProjectDomainMap{})
	pulumi.RegisterOutputType(ProjectDomainOutput{})
	pulumi.RegisterOutputType(ProjectDomainArrayOutput{})
	pulumi.RegisterOutputType(ProjectDomainMapOutput{})
}
