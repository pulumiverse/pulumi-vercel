// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Provides a Microfrontend Group Membership resource.
//
// A Microfrontend Group Membership is a definition of a Vercel Project being a part of a Microfrontend Group.
//
// ## Import
//
// If importing into a personal account, or with a team configured on the provider, simply use the record id.
//
// - the microfrontend ID can be taken from the microfrontend settings page
//
// - the project ID can be taken from the project settings page
//
// ```sh
// $ pulumi import vercel:index/microfrontendGroupMembership:MicrofrontendGroupMembership example mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/pid_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
// ```
//
// Alternatively, you can import via the team_id and microfrontend_id.
//
// - team_id can be found in the team `settings` tab in the Vercel UI.
//
// - the microfrontend ID can be taken from the microfrontend settings page
//
// - the project ID can be taken from the project settings page
//
// ```sh
// $ pulumi import vercel:index/microfrontendGroupMembership:MicrofrontendGroupMembership example team_xxxxxxxxxxxxxxxxxxxxxxxx/mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/pid_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
// ```
type MicrofrontendGroupMembership struct {
	pulumi.CustomResourceState

	// The default route for the project. Used for the screenshot of deployments.
	DefaultRoute pulumi.StringOutput `pulumi:"defaultRoute"`
	// The ID of the microfrontend group.
	MicrofrontendGroupId pulumi.StringOutput `pulumi:"microfrontendGroupId"`
	// The ID of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Whether the project is route observability for this project. If dalse, the project will be route observability for all projects to the default project.
	RouteObservabilityToThisProject pulumi.BoolOutput `pulumi:"routeObservabilityToThisProject"`
	// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewMicrofrontendGroupMembership registers a new resource with the given unique name, arguments, and options.
func NewMicrofrontendGroupMembership(ctx *pulumi.Context,
	name string, args *MicrofrontendGroupMembershipArgs, opts ...pulumi.ResourceOption) (*MicrofrontendGroupMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MicrofrontendGroupId == nil {
		return nil, errors.New("invalid value for required argument 'MicrofrontendGroupId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MicrofrontendGroupMembership
	err := ctx.RegisterResource("vercel:index/microfrontendGroupMembership:MicrofrontendGroupMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMicrofrontendGroupMembership gets an existing MicrofrontendGroupMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMicrofrontendGroupMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MicrofrontendGroupMembershipState, opts ...pulumi.ResourceOption) (*MicrofrontendGroupMembership, error) {
	var resource MicrofrontendGroupMembership
	err := ctx.ReadResource("vercel:index/microfrontendGroupMembership:MicrofrontendGroupMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MicrofrontendGroupMembership resources.
type microfrontendGroupMembershipState struct {
	// The default route for the project. Used for the screenshot of deployments.
	DefaultRoute *string `pulumi:"defaultRoute"`
	// The ID of the microfrontend group.
	MicrofrontendGroupId *string `pulumi:"microfrontendGroupId"`
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// Whether the project is route observability for this project. If dalse, the project will be route observability for all projects to the default project.
	RouteObservabilityToThisProject *bool `pulumi:"routeObservabilityToThisProject"`
	// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

type MicrofrontendGroupMembershipState struct {
	// The default route for the project. Used for the screenshot of deployments.
	DefaultRoute pulumi.StringPtrInput
	// The ID of the microfrontend group.
	MicrofrontendGroupId pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringPtrInput
	// Whether the project is route observability for this project. If dalse, the project will be route observability for all projects to the default project.
	RouteObservabilityToThisProject pulumi.BoolPtrInput
	// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (MicrofrontendGroupMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*microfrontendGroupMembershipState)(nil)).Elem()
}

type microfrontendGroupMembershipArgs struct {
	// The default route for the project. Used for the screenshot of deployments.
	DefaultRoute *string `pulumi:"defaultRoute"`
	// The ID of the microfrontend group.
	MicrofrontendGroupId string `pulumi:"microfrontendGroupId"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// Whether the project is route observability for this project. If dalse, the project will be route observability for all projects to the default project.
	RouteObservabilityToThisProject *bool `pulumi:"routeObservabilityToThisProject"`
	// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a MicrofrontendGroupMembership resource.
type MicrofrontendGroupMembershipArgs struct {
	// The default route for the project. Used for the screenshot of deployments.
	DefaultRoute pulumi.StringPtrInput
	// The ID of the microfrontend group.
	MicrofrontendGroupId pulumi.StringInput
	// The ID of the project.
	ProjectId pulumi.StringInput
	// Whether the project is route observability for this project. If dalse, the project will be route observability for all projects to the default project.
	RouteObservabilityToThisProject pulumi.BoolPtrInput
	// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (MicrofrontendGroupMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*microfrontendGroupMembershipArgs)(nil)).Elem()
}

type MicrofrontendGroupMembershipInput interface {
	pulumi.Input

	ToMicrofrontendGroupMembershipOutput() MicrofrontendGroupMembershipOutput
	ToMicrofrontendGroupMembershipOutputWithContext(ctx context.Context) MicrofrontendGroupMembershipOutput
}

func (*MicrofrontendGroupMembership) ElementType() reflect.Type {
	return reflect.TypeOf((**MicrofrontendGroupMembership)(nil)).Elem()
}

func (i *MicrofrontendGroupMembership) ToMicrofrontendGroupMembershipOutput() MicrofrontendGroupMembershipOutput {
	return i.ToMicrofrontendGroupMembershipOutputWithContext(context.Background())
}

func (i *MicrofrontendGroupMembership) ToMicrofrontendGroupMembershipOutputWithContext(ctx context.Context) MicrofrontendGroupMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrofrontendGroupMembershipOutput)
}

// MicrofrontendGroupMembershipArrayInput is an input type that accepts MicrofrontendGroupMembershipArray and MicrofrontendGroupMembershipArrayOutput values.
// You can construct a concrete instance of `MicrofrontendGroupMembershipArrayInput` via:
//
//	MicrofrontendGroupMembershipArray{ MicrofrontendGroupMembershipArgs{...} }
type MicrofrontendGroupMembershipArrayInput interface {
	pulumi.Input

	ToMicrofrontendGroupMembershipArrayOutput() MicrofrontendGroupMembershipArrayOutput
	ToMicrofrontendGroupMembershipArrayOutputWithContext(context.Context) MicrofrontendGroupMembershipArrayOutput
}

type MicrofrontendGroupMembershipArray []MicrofrontendGroupMembershipInput

func (MicrofrontendGroupMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MicrofrontendGroupMembership)(nil)).Elem()
}

func (i MicrofrontendGroupMembershipArray) ToMicrofrontendGroupMembershipArrayOutput() MicrofrontendGroupMembershipArrayOutput {
	return i.ToMicrofrontendGroupMembershipArrayOutputWithContext(context.Background())
}

func (i MicrofrontendGroupMembershipArray) ToMicrofrontendGroupMembershipArrayOutputWithContext(ctx context.Context) MicrofrontendGroupMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrofrontendGroupMembershipArrayOutput)
}

// MicrofrontendGroupMembershipMapInput is an input type that accepts MicrofrontendGroupMembershipMap and MicrofrontendGroupMembershipMapOutput values.
// You can construct a concrete instance of `MicrofrontendGroupMembershipMapInput` via:
//
//	MicrofrontendGroupMembershipMap{ "key": MicrofrontendGroupMembershipArgs{...} }
type MicrofrontendGroupMembershipMapInput interface {
	pulumi.Input

	ToMicrofrontendGroupMembershipMapOutput() MicrofrontendGroupMembershipMapOutput
	ToMicrofrontendGroupMembershipMapOutputWithContext(context.Context) MicrofrontendGroupMembershipMapOutput
}

type MicrofrontendGroupMembershipMap map[string]MicrofrontendGroupMembershipInput

func (MicrofrontendGroupMembershipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MicrofrontendGroupMembership)(nil)).Elem()
}

func (i MicrofrontendGroupMembershipMap) ToMicrofrontendGroupMembershipMapOutput() MicrofrontendGroupMembershipMapOutput {
	return i.ToMicrofrontendGroupMembershipMapOutputWithContext(context.Background())
}

func (i MicrofrontendGroupMembershipMap) ToMicrofrontendGroupMembershipMapOutputWithContext(ctx context.Context) MicrofrontendGroupMembershipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrofrontendGroupMembershipMapOutput)
}

type MicrofrontendGroupMembershipOutput struct{ *pulumi.OutputState }

func (MicrofrontendGroupMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MicrofrontendGroupMembership)(nil)).Elem()
}

func (o MicrofrontendGroupMembershipOutput) ToMicrofrontendGroupMembershipOutput() MicrofrontendGroupMembershipOutput {
	return o
}

func (o MicrofrontendGroupMembershipOutput) ToMicrofrontendGroupMembershipOutputWithContext(ctx context.Context) MicrofrontendGroupMembershipOutput {
	return o
}

// The default route for the project. Used for the screenshot of deployments.
func (o MicrofrontendGroupMembershipOutput) DefaultRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *MicrofrontendGroupMembership) pulumi.StringOutput { return v.DefaultRoute }).(pulumi.StringOutput)
}

// The ID of the microfrontend group.
func (o MicrofrontendGroupMembershipOutput) MicrofrontendGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *MicrofrontendGroupMembership) pulumi.StringOutput { return v.MicrofrontendGroupId }).(pulumi.StringOutput)
}

// The ID of the project.
func (o MicrofrontendGroupMembershipOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MicrofrontendGroupMembership) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Whether the project is route observability for this project. If dalse, the project will be route observability for all projects to the default project.
func (o MicrofrontendGroupMembershipOutput) RouteObservabilityToThisProject() pulumi.BoolOutput {
	return o.ApplyT(func(v *MicrofrontendGroupMembership) pulumi.BoolOutput { return v.RouteObservabilityToThisProject }).(pulumi.BoolOutput)
}

// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
func (o MicrofrontendGroupMembershipOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *MicrofrontendGroupMembership) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type MicrofrontendGroupMembershipArrayOutput struct{ *pulumi.OutputState }

func (MicrofrontendGroupMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MicrofrontendGroupMembership)(nil)).Elem()
}

func (o MicrofrontendGroupMembershipArrayOutput) ToMicrofrontendGroupMembershipArrayOutput() MicrofrontendGroupMembershipArrayOutput {
	return o
}

func (o MicrofrontendGroupMembershipArrayOutput) ToMicrofrontendGroupMembershipArrayOutputWithContext(ctx context.Context) MicrofrontendGroupMembershipArrayOutput {
	return o
}

func (o MicrofrontendGroupMembershipArrayOutput) Index(i pulumi.IntInput) MicrofrontendGroupMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MicrofrontendGroupMembership {
		return vs[0].([]*MicrofrontendGroupMembership)[vs[1].(int)]
	}).(MicrofrontendGroupMembershipOutput)
}

type MicrofrontendGroupMembershipMapOutput struct{ *pulumi.OutputState }

func (MicrofrontendGroupMembershipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MicrofrontendGroupMembership)(nil)).Elem()
}

func (o MicrofrontendGroupMembershipMapOutput) ToMicrofrontendGroupMembershipMapOutput() MicrofrontendGroupMembershipMapOutput {
	return o
}

func (o MicrofrontendGroupMembershipMapOutput) ToMicrofrontendGroupMembershipMapOutputWithContext(ctx context.Context) MicrofrontendGroupMembershipMapOutput {
	return o
}

func (o MicrofrontendGroupMembershipMapOutput) MapIndex(k pulumi.StringInput) MicrofrontendGroupMembershipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MicrofrontendGroupMembership {
		return vs[0].(map[string]*MicrofrontendGroupMembership)[vs[1].(string)]
	}).(MicrofrontendGroupMembershipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MicrofrontendGroupMembershipInput)(nil)).Elem(), &MicrofrontendGroupMembership{})
	pulumi.RegisterInputType(reflect.TypeOf((*MicrofrontendGroupMembershipArrayInput)(nil)).Elem(), MicrofrontendGroupMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MicrofrontendGroupMembershipMapInput)(nil)).Elem(), MicrofrontendGroupMembershipMap{})
	pulumi.RegisterOutputType(MicrofrontendGroupMembershipOutput{})
	pulumi.RegisterOutputType(MicrofrontendGroupMembershipArrayOutput{})
	pulumi.RegisterOutputType(MicrofrontendGroupMembershipMapOutput{})
}
