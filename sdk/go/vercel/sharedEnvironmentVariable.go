// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel/internal"
)

// Provides a Shared Environment Variable resource.
//
// A Shared Environment Variable resource defines an Environment Variable that can be shared between multiple Vercel Projects.
//
// For more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/environment-variables/shared-environment-variables).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := vercel.NewProject(ctx, "exampleProject", &vercel.ProjectArgs{
//				GitRepository: &vercel.ProjectGitRepositoryArgs{
//					Type: pulumi.String("github"),
//					Repo: pulumi.String("vercel/some-repo"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// A shared environment variable that will be created
//			// and associated with the "example" project.
//			_, err = vercel.NewSharedEnvironmentVariable(ctx, "exampleSharedEnvironmentVariable", &vercel.SharedEnvironmentVariableArgs{
//				Key:   pulumi.String("EXAMPLE"),
//				Value: pulumi.String("some_value"),
//				Targets: pulumi.StringArray{
//					pulumi.String("production"),
//				},
//				Comment: pulumi.String("an example shared variable"),
//				ProjectIds: pulumi.StringArray{
//					exampleProject.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import via the team_id and environment variable id.
//
// - team_id can be found in the team `settings` tab in the Vercel UI.
//
// - environment variable id can be taken from the network tab inside developer tools, while you are on the project page.
//
// #
//
// Note also, that the value field for sensitive environment variables will be imported as `null`.
//
// ```sh
// $ pulumi import vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable example team_xxxxxxxxxxxxxxxxxxxxxxxx/env_yyyyyyyyyyyyy
// ```
type SharedEnvironmentVariable struct {
	pulumi.CustomResourceState

	// A comment explaining what the environment variable is for.
	Comment pulumi.StringOutput `pulumi:"comment"`
	// The name of the Environment Variable.
	Key pulumi.StringOutput `pulumi:"key"`
	// The ID of the Vercel project.
	ProjectIds pulumi.StringArrayOutput `pulumi:"projectIds"`
	// Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))
	Sensitive pulumi.BoolOutput `pulumi:"sensitive"`
	// The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
	Targets pulumi.StringArrayOutput `pulumi:"targets"`
	// The ID of the Vercel team. Shared environment variables require a team.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// The value of the Environment Variable.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewSharedEnvironmentVariable registers a new resource with the given unique name, arguments, and options.
func NewSharedEnvironmentVariable(ctx *pulumi.Context,
	name string, args *SharedEnvironmentVariableArgs, opts ...pulumi.ResourceOption) (*SharedEnvironmentVariable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.ProjectIds == nil {
		return nil, errors.New("invalid value for required argument 'ProjectIds'")
	}
	if args.Targets == nil {
		return nil, errors.New("invalid value for required argument 'Targets'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	if args.Value != nil {
		args.Value = pulumi.ToSecret(args.Value).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"value",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SharedEnvironmentVariable
	err := ctx.RegisterResource("vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSharedEnvironmentVariable gets an existing SharedEnvironmentVariable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSharedEnvironmentVariable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SharedEnvironmentVariableState, opts ...pulumi.ResourceOption) (*SharedEnvironmentVariable, error) {
	var resource SharedEnvironmentVariable
	err := ctx.ReadResource("vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SharedEnvironmentVariable resources.
type sharedEnvironmentVariableState struct {
	// A comment explaining what the environment variable is for.
	Comment *string `pulumi:"comment"`
	// The name of the Environment Variable.
	Key *string `pulumi:"key"`
	// The ID of the Vercel project.
	ProjectIds []string `pulumi:"projectIds"`
	// Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))
	Sensitive *bool `pulumi:"sensitive"`
	// The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
	Targets []string `pulumi:"targets"`
	// The ID of the Vercel team. Shared environment variables require a team.
	TeamId *string `pulumi:"teamId"`
	// The value of the Environment Variable.
	Value *string `pulumi:"value"`
}

type SharedEnvironmentVariableState struct {
	// A comment explaining what the environment variable is for.
	Comment pulumi.StringPtrInput
	// The name of the Environment Variable.
	Key pulumi.StringPtrInput
	// The ID of the Vercel project.
	ProjectIds pulumi.StringArrayInput
	// Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))
	Sensitive pulumi.BoolPtrInput
	// The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
	Targets pulumi.StringArrayInput
	// The ID of the Vercel team. Shared environment variables require a team.
	TeamId pulumi.StringPtrInput
	// The value of the Environment Variable.
	Value pulumi.StringPtrInput
}

func (SharedEnvironmentVariableState) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedEnvironmentVariableState)(nil)).Elem()
}

type sharedEnvironmentVariableArgs struct {
	// A comment explaining what the environment variable is for.
	Comment *string `pulumi:"comment"`
	// The name of the Environment Variable.
	Key string `pulumi:"key"`
	// The ID of the Vercel project.
	ProjectIds []string `pulumi:"projectIds"`
	// Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))
	Sensitive *bool `pulumi:"sensitive"`
	// The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
	Targets []string `pulumi:"targets"`
	// The ID of the Vercel team. Shared environment variables require a team.
	TeamId *string `pulumi:"teamId"`
	// The value of the Environment Variable.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a SharedEnvironmentVariable resource.
type SharedEnvironmentVariableArgs struct {
	// A comment explaining what the environment variable is for.
	Comment pulumi.StringPtrInput
	// The name of the Environment Variable.
	Key pulumi.StringInput
	// The ID of the Vercel project.
	ProjectIds pulumi.StringArrayInput
	// Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))
	Sensitive pulumi.BoolPtrInput
	// The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
	Targets pulumi.StringArrayInput
	// The ID of the Vercel team. Shared environment variables require a team.
	TeamId pulumi.StringPtrInput
	// The value of the Environment Variable.
	Value pulumi.StringInput
}

func (SharedEnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedEnvironmentVariableArgs)(nil)).Elem()
}

type SharedEnvironmentVariableInput interface {
	pulumi.Input

	ToSharedEnvironmentVariableOutput() SharedEnvironmentVariableOutput
	ToSharedEnvironmentVariableOutputWithContext(ctx context.Context) SharedEnvironmentVariableOutput
}

func (*SharedEnvironmentVariable) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedEnvironmentVariable)(nil)).Elem()
}

func (i *SharedEnvironmentVariable) ToSharedEnvironmentVariableOutput() SharedEnvironmentVariableOutput {
	return i.ToSharedEnvironmentVariableOutputWithContext(context.Background())
}

func (i *SharedEnvironmentVariable) ToSharedEnvironmentVariableOutputWithContext(ctx context.Context) SharedEnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedEnvironmentVariableOutput)
}

// SharedEnvironmentVariableArrayInput is an input type that accepts SharedEnvironmentVariableArray and SharedEnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `SharedEnvironmentVariableArrayInput` via:
//
//	SharedEnvironmentVariableArray{ SharedEnvironmentVariableArgs{...} }
type SharedEnvironmentVariableArrayInput interface {
	pulumi.Input

	ToSharedEnvironmentVariableArrayOutput() SharedEnvironmentVariableArrayOutput
	ToSharedEnvironmentVariableArrayOutputWithContext(context.Context) SharedEnvironmentVariableArrayOutput
}

type SharedEnvironmentVariableArray []SharedEnvironmentVariableInput

func (SharedEnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedEnvironmentVariable)(nil)).Elem()
}

func (i SharedEnvironmentVariableArray) ToSharedEnvironmentVariableArrayOutput() SharedEnvironmentVariableArrayOutput {
	return i.ToSharedEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i SharedEnvironmentVariableArray) ToSharedEnvironmentVariableArrayOutputWithContext(ctx context.Context) SharedEnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedEnvironmentVariableArrayOutput)
}

// SharedEnvironmentVariableMapInput is an input type that accepts SharedEnvironmentVariableMap and SharedEnvironmentVariableMapOutput values.
// You can construct a concrete instance of `SharedEnvironmentVariableMapInput` via:
//
//	SharedEnvironmentVariableMap{ "key": SharedEnvironmentVariableArgs{...} }
type SharedEnvironmentVariableMapInput interface {
	pulumi.Input

	ToSharedEnvironmentVariableMapOutput() SharedEnvironmentVariableMapOutput
	ToSharedEnvironmentVariableMapOutputWithContext(context.Context) SharedEnvironmentVariableMapOutput
}

type SharedEnvironmentVariableMap map[string]SharedEnvironmentVariableInput

func (SharedEnvironmentVariableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedEnvironmentVariable)(nil)).Elem()
}

func (i SharedEnvironmentVariableMap) ToSharedEnvironmentVariableMapOutput() SharedEnvironmentVariableMapOutput {
	return i.ToSharedEnvironmentVariableMapOutputWithContext(context.Background())
}

func (i SharedEnvironmentVariableMap) ToSharedEnvironmentVariableMapOutputWithContext(ctx context.Context) SharedEnvironmentVariableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedEnvironmentVariableMapOutput)
}

type SharedEnvironmentVariableOutput struct{ *pulumi.OutputState }

func (SharedEnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedEnvironmentVariable)(nil)).Elem()
}

func (o SharedEnvironmentVariableOutput) ToSharedEnvironmentVariableOutput() SharedEnvironmentVariableOutput {
	return o
}

func (o SharedEnvironmentVariableOutput) ToSharedEnvironmentVariableOutputWithContext(ctx context.Context) SharedEnvironmentVariableOutput {
	return o
}

// A comment explaining what the environment variable is for.
func (o SharedEnvironmentVariableOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedEnvironmentVariable) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

// The name of the Environment Variable.
func (o SharedEnvironmentVariableOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedEnvironmentVariable) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The ID of the Vercel project.
func (o SharedEnvironmentVariableOutput) ProjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SharedEnvironmentVariable) pulumi.StringArrayOutput { return v.ProjectIds }).(pulumi.StringArrayOutput)
}

// Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))
func (o SharedEnvironmentVariableOutput) Sensitive() pulumi.BoolOutput {
	return o.ApplyT(func(v *SharedEnvironmentVariable) pulumi.BoolOutput { return v.Sensitive }).(pulumi.BoolOutput)
}

// The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
func (o SharedEnvironmentVariableOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SharedEnvironmentVariable) pulumi.StringArrayOutput { return v.Targets }).(pulumi.StringArrayOutput)
}

// The ID of the Vercel team. Shared environment variables require a team.
func (o SharedEnvironmentVariableOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedEnvironmentVariable) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// The value of the Environment Variable.
func (o SharedEnvironmentVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedEnvironmentVariable) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type SharedEnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (SharedEnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedEnvironmentVariable)(nil)).Elem()
}

func (o SharedEnvironmentVariableArrayOutput) ToSharedEnvironmentVariableArrayOutput() SharedEnvironmentVariableArrayOutput {
	return o
}

func (o SharedEnvironmentVariableArrayOutput) ToSharedEnvironmentVariableArrayOutputWithContext(ctx context.Context) SharedEnvironmentVariableArrayOutput {
	return o
}

func (o SharedEnvironmentVariableArrayOutput) Index(i pulumi.IntInput) SharedEnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SharedEnvironmentVariable {
		return vs[0].([]*SharedEnvironmentVariable)[vs[1].(int)]
	}).(SharedEnvironmentVariableOutput)
}

type SharedEnvironmentVariableMapOutput struct{ *pulumi.OutputState }

func (SharedEnvironmentVariableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedEnvironmentVariable)(nil)).Elem()
}

func (o SharedEnvironmentVariableMapOutput) ToSharedEnvironmentVariableMapOutput() SharedEnvironmentVariableMapOutput {
	return o
}

func (o SharedEnvironmentVariableMapOutput) ToSharedEnvironmentVariableMapOutputWithContext(ctx context.Context) SharedEnvironmentVariableMapOutput {
	return o
}

func (o SharedEnvironmentVariableMapOutput) MapIndex(k pulumi.StringInput) SharedEnvironmentVariableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SharedEnvironmentVariable {
		return vs[0].(map[string]*SharedEnvironmentVariable)[vs[1].(string)]
	}).(SharedEnvironmentVariableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SharedEnvironmentVariableInput)(nil)).Elem(), &SharedEnvironmentVariable{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedEnvironmentVariableArrayInput)(nil)).Elem(), SharedEnvironmentVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedEnvironmentVariableMapInput)(nil)).Elem(), SharedEnvironmentVariableMap{})
	pulumi.RegisterOutputType(SharedEnvironmentVariableOutput{})
	pulumi.RegisterOutputType(SharedEnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(SharedEnvironmentVariableMapOutput{})
}
