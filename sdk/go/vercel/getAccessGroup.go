// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// Provides information about an existing Access Group.
//
// For more detailed information, please see the [Vercel documentation](https://vercel.com/docs/accounts/team-members-and-roles/access-groups).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vercel.LookupAccessGroup(ctx, &vercel.LookupAccessGroupArgs{
//				Id: "ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAccessGroup(ctx *pulumi.Context, args *LookupAccessGroupArgs, opts ...pulumi.InvokeOption) (*LookupAccessGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAccessGroupResult
	err := ctx.Invoke("vercel:index/getAccessGroup:getAccessGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccessGroup.
type LookupAccessGroupArgs struct {
	// The Access Group ID to be retrieved.
	Id string `pulumi:"id"`
	// The ID of the team the Access Group should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// A collection of values returned by getAccessGroup.
type LookupAccessGroupResult struct {
	// The Access Group ID to be retrieved.
	Id string `pulumi:"id"`
	// The name of the Access Group.
	Name string `pulumi:"name"`
	// The ID of the team the Access Group should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId string `pulumi:"teamId"`
}

func LookupAccessGroupOutput(ctx *pulumi.Context, args LookupAccessGroupOutputArgs, opts ...pulumi.InvokeOption) LookupAccessGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAccessGroupResultOutput, error) {
			args := v.(LookupAccessGroupArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupAccessGroupResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getAccessGroup:getAccessGroup", args, &rv, "", opts...)
			if err != nil {
				return LookupAccessGroupResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupAccessGroupResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupAccessGroupResultOutput), nil
			}
			return output, nil
		}).(LookupAccessGroupResultOutput)
}

// A collection of arguments for invoking getAccessGroup.
type LookupAccessGroupOutputArgs struct {
	// The Access Group ID to be retrieved.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the team the Access Group should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
}

func (LookupAccessGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessGroupArgs)(nil)).Elem()
}

// A collection of values returned by getAccessGroup.
type LookupAccessGroupResultOutput struct{ *pulumi.OutputState }

func (LookupAccessGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessGroupResult)(nil)).Elem()
}

func (o LookupAccessGroupResultOutput) ToLookupAccessGroupResultOutput() LookupAccessGroupResultOutput {
	return o
}

func (o LookupAccessGroupResultOutput) ToLookupAccessGroupResultOutputWithContext(ctx context.Context) LookupAccessGroupResultOutput {
	return o
}

// The Access Group ID to be retrieved.
func (o LookupAccessGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the Access Group.
func (o LookupAccessGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the team the Access Group should exist under. Required when configuring a team resource if a default team has not been set in the provider.
func (o LookupAccessGroupResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessGroupResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccessGroupResultOutput{})
}
