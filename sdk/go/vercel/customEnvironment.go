// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel/internal"
)

// Environments help manage the deployment lifecycle on the Vercel platform.
//
// By default, all teams use three environments when developing their project: Production, Preview, and Development. However, teams can also create custom environments to suit their needs. To learn more about the limits for each plan, see limits.
//
// Custom environments allow you to configure customized, pre-production environments for your project, such as staging or QA, with branch rules that will automatically deploy your branch when the branch name matches the rule. With custom environments you can also attach a domain to your environment, set environment variables, or import environment variables from another environment.
//
// Custom environments are designed as pre-production environments intended for long-running use. This contrasts with regular preview environments, which are designed for creating ephemeral, short-lived deployments.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := vercel.NewProject(ctx, "example", &vercel.ProjectArgs{
//				Name: pulumi.String("example-project-with-custom-env"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vercel.NewCustomEnvironment(ctx, "example", &vercel.CustomEnvironmentArgs{
//				ProjectId:   example.ID(),
//				Name:        pulumi.String("example-custom-env"),
//				Description: pulumi.String("A description of the custom environment"),
//				BranchTracking: &vercel.CustomEnvironmentBranchTrackingArgs{
//					Pattern: pulumi.String("staging-"),
//					Type:    pulumi.String("startsWith"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # If importing into a personal account, or with a team configured on
//
// the provider, simply use the project_id and custom environment name.
//
// - project_id can be found in the project `settings` tab in the Vercel UI.
//
// ```sh
// $ pulumi import vercel:index/customEnvironment:CustomEnvironment example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example-custom-env
// ```
//
// Alternatively, you can import via the team_id, project_id and environment variable id.
//
// - team_id can be found in the team `settings` tab in the Vercel UI.
//
// - project_id can be found in the project `settings` tab in the Vercel UI.
//
// #
//
// Note also, that the value field for sensitive environment variables will be imported as `null`.
//
// ```sh
// $ pulumi import vercel:index/customEnvironment:CustomEnvironment example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example-custom-env
// ```
type CustomEnvironment struct {
	pulumi.CustomResourceState

	// The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.
	BranchTracking CustomEnvironmentBranchTrackingOutput `pulumi:"branchTracking"`
	// A description of what the environment is.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the environment.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the existing Vercel Project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewCustomEnvironment registers a new resource with the given unique name, arguments, and options.
func NewCustomEnvironment(ctx *pulumi.Context,
	name string, args *CustomEnvironmentArgs, opts ...pulumi.ResourceOption) (*CustomEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomEnvironment
	err := ctx.RegisterResource("vercel:index/customEnvironment:CustomEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomEnvironment gets an existing CustomEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomEnvironmentState, opts ...pulumi.ResourceOption) (*CustomEnvironment, error) {
	var resource CustomEnvironment
	err := ctx.ReadResource("vercel:index/customEnvironment:CustomEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomEnvironment resources.
type customEnvironmentState struct {
	// The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.
	BranchTracking *CustomEnvironmentBranchTracking `pulumi:"branchTracking"`
	// A description of what the environment is.
	Description *string `pulumi:"description"`
	// The name of the environment.
	Name *string `pulumi:"name"`
	// The ID of the existing Vercel Project.
	ProjectId *string `pulumi:"projectId"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

type CustomEnvironmentState struct {
	// The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.
	BranchTracking CustomEnvironmentBranchTrackingPtrInput
	// A description of what the environment is.
	Description pulumi.StringPtrInput
	// The name of the environment.
	Name pulumi.StringPtrInput
	// The ID of the existing Vercel Project.
	ProjectId pulumi.StringPtrInput
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (CustomEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*customEnvironmentState)(nil)).Elem()
}

type customEnvironmentArgs struct {
	// The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.
	BranchTracking *CustomEnvironmentBranchTracking `pulumi:"branchTracking"`
	// A description of what the environment is.
	Description *string `pulumi:"description"`
	// The name of the environment.
	Name *string `pulumi:"name"`
	// The ID of the existing Vercel Project.
	ProjectId string `pulumi:"projectId"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a CustomEnvironment resource.
type CustomEnvironmentArgs struct {
	// The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.
	BranchTracking CustomEnvironmentBranchTrackingPtrInput
	// A description of what the environment is.
	Description pulumi.StringPtrInput
	// The name of the environment.
	Name pulumi.StringPtrInput
	// The ID of the existing Vercel Project.
	ProjectId pulumi.StringInput
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
}

func (CustomEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customEnvironmentArgs)(nil)).Elem()
}

type CustomEnvironmentInput interface {
	pulumi.Input

	ToCustomEnvironmentOutput() CustomEnvironmentOutput
	ToCustomEnvironmentOutputWithContext(ctx context.Context) CustomEnvironmentOutput
}

func (*CustomEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomEnvironment)(nil)).Elem()
}

func (i *CustomEnvironment) ToCustomEnvironmentOutput() CustomEnvironmentOutput {
	return i.ToCustomEnvironmentOutputWithContext(context.Background())
}

func (i *CustomEnvironment) ToCustomEnvironmentOutputWithContext(ctx context.Context) CustomEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomEnvironmentOutput)
}

// CustomEnvironmentArrayInput is an input type that accepts CustomEnvironmentArray and CustomEnvironmentArrayOutput values.
// You can construct a concrete instance of `CustomEnvironmentArrayInput` via:
//
//	CustomEnvironmentArray{ CustomEnvironmentArgs{...} }
type CustomEnvironmentArrayInput interface {
	pulumi.Input

	ToCustomEnvironmentArrayOutput() CustomEnvironmentArrayOutput
	ToCustomEnvironmentArrayOutputWithContext(context.Context) CustomEnvironmentArrayOutput
}

type CustomEnvironmentArray []CustomEnvironmentInput

func (CustomEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomEnvironment)(nil)).Elem()
}

func (i CustomEnvironmentArray) ToCustomEnvironmentArrayOutput() CustomEnvironmentArrayOutput {
	return i.ToCustomEnvironmentArrayOutputWithContext(context.Background())
}

func (i CustomEnvironmentArray) ToCustomEnvironmentArrayOutputWithContext(ctx context.Context) CustomEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomEnvironmentArrayOutput)
}

// CustomEnvironmentMapInput is an input type that accepts CustomEnvironmentMap and CustomEnvironmentMapOutput values.
// You can construct a concrete instance of `CustomEnvironmentMapInput` via:
//
//	CustomEnvironmentMap{ "key": CustomEnvironmentArgs{...} }
type CustomEnvironmentMapInput interface {
	pulumi.Input

	ToCustomEnvironmentMapOutput() CustomEnvironmentMapOutput
	ToCustomEnvironmentMapOutputWithContext(context.Context) CustomEnvironmentMapOutput
}

type CustomEnvironmentMap map[string]CustomEnvironmentInput

func (CustomEnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomEnvironment)(nil)).Elem()
}

func (i CustomEnvironmentMap) ToCustomEnvironmentMapOutput() CustomEnvironmentMapOutput {
	return i.ToCustomEnvironmentMapOutputWithContext(context.Background())
}

func (i CustomEnvironmentMap) ToCustomEnvironmentMapOutputWithContext(ctx context.Context) CustomEnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomEnvironmentMapOutput)
}

type CustomEnvironmentOutput struct{ *pulumi.OutputState }

func (CustomEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomEnvironment)(nil)).Elem()
}

func (o CustomEnvironmentOutput) ToCustomEnvironmentOutput() CustomEnvironmentOutput {
	return o
}

func (o CustomEnvironmentOutput) ToCustomEnvironmentOutputWithContext(ctx context.Context) CustomEnvironmentOutput {
	return o
}

// The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.
func (o CustomEnvironmentOutput) BranchTracking() CustomEnvironmentBranchTrackingOutput {
	return o.ApplyT(func(v *CustomEnvironment) CustomEnvironmentBranchTrackingOutput { return v.BranchTracking }).(CustomEnvironmentBranchTrackingOutput)
}

// A description of what the environment is.
func (o CustomEnvironmentOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomEnvironment) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the environment.
func (o CustomEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomEnvironment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the existing Vercel Project.
func (o CustomEnvironmentOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomEnvironment) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
func (o CustomEnvironmentOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomEnvironment) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type CustomEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (CustomEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomEnvironment)(nil)).Elem()
}

func (o CustomEnvironmentArrayOutput) ToCustomEnvironmentArrayOutput() CustomEnvironmentArrayOutput {
	return o
}

func (o CustomEnvironmentArrayOutput) ToCustomEnvironmentArrayOutputWithContext(ctx context.Context) CustomEnvironmentArrayOutput {
	return o
}

func (o CustomEnvironmentArrayOutput) Index(i pulumi.IntInput) CustomEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomEnvironment {
		return vs[0].([]*CustomEnvironment)[vs[1].(int)]
	}).(CustomEnvironmentOutput)
}

type CustomEnvironmentMapOutput struct{ *pulumi.OutputState }

func (CustomEnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomEnvironment)(nil)).Elem()
}

func (o CustomEnvironmentMapOutput) ToCustomEnvironmentMapOutput() CustomEnvironmentMapOutput {
	return o
}

func (o CustomEnvironmentMapOutput) ToCustomEnvironmentMapOutputWithContext(ctx context.Context) CustomEnvironmentMapOutput {
	return o
}

func (o CustomEnvironmentMapOutput) MapIndex(k pulumi.StringInput) CustomEnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomEnvironment {
		return vs[0].(map[string]*CustomEnvironment)[vs[1].(string)]
	}).(CustomEnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomEnvironmentInput)(nil)).Elem(), &CustomEnvironment{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomEnvironmentArrayInput)(nil)).Elem(), CustomEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomEnvironmentMapInput)(nil)).Elem(), CustomEnvironmentMap{})
	pulumi.RegisterOutputType(CustomEnvironmentOutput{})
	pulumi.RegisterOutputType(CustomEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(CustomEnvironmentMapOutput{})
}
