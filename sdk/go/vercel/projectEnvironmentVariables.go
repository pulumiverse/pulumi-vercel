// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v3/go/vercel/internal"
)

// ## Example Usage
type ProjectEnvironmentVariables struct {
	pulumi.CustomResourceState

	// The ID of the Vercel project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// A set of Environment Variables that should be configured for the project.
	Variables ProjectEnvironmentVariablesVariableArrayOutput `pulumi:"variables"`
}

// NewProjectEnvironmentVariables registers a new resource with the given unique name, arguments, and options.
func NewProjectEnvironmentVariables(ctx *pulumi.Context,
	name string, args *ProjectEnvironmentVariablesArgs, opts ...pulumi.ResourceOption) (*ProjectEnvironmentVariables, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Variables == nil {
		return nil, errors.New("invalid value for required argument 'Variables'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectEnvironmentVariables
	err := ctx.RegisterResource("vercel:index/projectEnvironmentVariables:ProjectEnvironmentVariables", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectEnvironmentVariables gets an existing ProjectEnvironmentVariables resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectEnvironmentVariables(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectEnvironmentVariablesState, opts ...pulumi.ResourceOption) (*ProjectEnvironmentVariables, error) {
	var resource ProjectEnvironmentVariables
	err := ctx.ReadResource("vercel:index/projectEnvironmentVariables:ProjectEnvironmentVariables", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectEnvironmentVariables resources.
type projectEnvironmentVariablesState struct {
	// The ID of the Vercel project.
	ProjectId *string `pulumi:"projectId"`
	// The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
	// A set of Environment Variables that should be configured for the project.
	Variables []ProjectEnvironmentVariablesVariable `pulumi:"variables"`
}

type ProjectEnvironmentVariablesState struct {
	// The ID of the Vercel project.
	ProjectId pulumi.StringPtrInput
	// The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
	// A set of Environment Variables that should be configured for the project.
	Variables ProjectEnvironmentVariablesVariableArrayInput
}

func (ProjectEnvironmentVariablesState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectEnvironmentVariablesState)(nil)).Elem()
}

type projectEnvironmentVariablesArgs struct {
	// The ID of the Vercel project.
	ProjectId string `pulumi:"projectId"`
	// The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
	// A set of Environment Variables that should be configured for the project.
	Variables []ProjectEnvironmentVariablesVariable `pulumi:"variables"`
}

// The set of arguments for constructing a ProjectEnvironmentVariables resource.
type ProjectEnvironmentVariablesArgs struct {
	// The ID of the Vercel project.
	ProjectId pulumi.StringInput
	// The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput
	// A set of Environment Variables that should be configured for the project.
	Variables ProjectEnvironmentVariablesVariableArrayInput
}

func (ProjectEnvironmentVariablesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectEnvironmentVariablesArgs)(nil)).Elem()
}

type ProjectEnvironmentVariablesInput interface {
	pulumi.Input

	ToProjectEnvironmentVariablesOutput() ProjectEnvironmentVariablesOutput
	ToProjectEnvironmentVariablesOutputWithContext(ctx context.Context) ProjectEnvironmentVariablesOutput
}

func (*ProjectEnvironmentVariables) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironmentVariables)(nil)).Elem()
}

func (i *ProjectEnvironmentVariables) ToProjectEnvironmentVariablesOutput() ProjectEnvironmentVariablesOutput {
	return i.ToProjectEnvironmentVariablesOutputWithContext(context.Background())
}

func (i *ProjectEnvironmentVariables) ToProjectEnvironmentVariablesOutputWithContext(ctx context.Context) ProjectEnvironmentVariablesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentVariablesOutput)
}

// ProjectEnvironmentVariablesArrayInput is an input type that accepts ProjectEnvironmentVariablesArray and ProjectEnvironmentVariablesArrayOutput values.
// You can construct a concrete instance of `ProjectEnvironmentVariablesArrayInput` via:
//
//	ProjectEnvironmentVariablesArray{ ProjectEnvironmentVariablesArgs{...} }
type ProjectEnvironmentVariablesArrayInput interface {
	pulumi.Input

	ToProjectEnvironmentVariablesArrayOutput() ProjectEnvironmentVariablesArrayOutput
	ToProjectEnvironmentVariablesArrayOutputWithContext(context.Context) ProjectEnvironmentVariablesArrayOutput
}

type ProjectEnvironmentVariablesArray []ProjectEnvironmentVariablesInput

func (ProjectEnvironmentVariablesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectEnvironmentVariables)(nil)).Elem()
}

func (i ProjectEnvironmentVariablesArray) ToProjectEnvironmentVariablesArrayOutput() ProjectEnvironmentVariablesArrayOutput {
	return i.ToProjectEnvironmentVariablesArrayOutputWithContext(context.Background())
}

func (i ProjectEnvironmentVariablesArray) ToProjectEnvironmentVariablesArrayOutputWithContext(ctx context.Context) ProjectEnvironmentVariablesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentVariablesArrayOutput)
}

// ProjectEnvironmentVariablesMapInput is an input type that accepts ProjectEnvironmentVariablesMap and ProjectEnvironmentVariablesMapOutput values.
// You can construct a concrete instance of `ProjectEnvironmentVariablesMapInput` via:
//
//	ProjectEnvironmentVariablesMap{ "key": ProjectEnvironmentVariablesArgs{...} }
type ProjectEnvironmentVariablesMapInput interface {
	pulumi.Input

	ToProjectEnvironmentVariablesMapOutput() ProjectEnvironmentVariablesMapOutput
	ToProjectEnvironmentVariablesMapOutputWithContext(context.Context) ProjectEnvironmentVariablesMapOutput
}

type ProjectEnvironmentVariablesMap map[string]ProjectEnvironmentVariablesInput

func (ProjectEnvironmentVariablesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectEnvironmentVariables)(nil)).Elem()
}

func (i ProjectEnvironmentVariablesMap) ToProjectEnvironmentVariablesMapOutput() ProjectEnvironmentVariablesMapOutput {
	return i.ToProjectEnvironmentVariablesMapOutputWithContext(context.Background())
}

func (i ProjectEnvironmentVariablesMap) ToProjectEnvironmentVariablesMapOutputWithContext(ctx context.Context) ProjectEnvironmentVariablesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentVariablesMapOutput)
}

type ProjectEnvironmentVariablesOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentVariablesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironmentVariables)(nil)).Elem()
}

func (o ProjectEnvironmentVariablesOutput) ToProjectEnvironmentVariablesOutput() ProjectEnvironmentVariablesOutput {
	return o
}

func (o ProjectEnvironmentVariablesOutput) ToProjectEnvironmentVariablesOutputWithContext(ctx context.Context) ProjectEnvironmentVariablesOutput {
	return o
}

// The ID of the Vercel project.
func (o ProjectEnvironmentVariablesOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectEnvironmentVariables) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
func (o ProjectEnvironmentVariablesOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectEnvironmentVariables) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// A set of Environment Variables that should be configured for the project.
func (o ProjectEnvironmentVariablesOutput) Variables() ProjectEnvironmentVariablesVariableArrayOutput {
	return o.ApplyT(func(v *ProjectEnvironmentVariables) ProjectEnvironmentVariablesVariableArrayOutput {
		return v.Variables
	}).(ProjectEnvironmentVariablesVariableArrayOutput)
}

type ProjectEnvironmentVariablesArrayOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentVariablesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectEnvironmentVariables)(nil)).Elem()
}

func (o ProjectEnvironmentVariablesArrayOutput) ToProjectEnvironmentVariablesArrayOutput() ProjectEnvironmentVariablesArrayOutput {
	return o
}

func (o ProjectEnvironmentVariablesArrayOutput) ToProjectEnvironmentVariablesArrayOutputWithContext(ctx context.Context) ProjectEnvironmentVariablesArrayOutput {
	return o
}

func (o ProjectEnvironmentVariablesArrayOutput) Index(i pulumi.IntInput) ProjectEnvironmentVariablesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectEnvironmentVariables {
		return vs[0].([]*ProjectEnvironmentVariables)[vs[1].(int)]
	}).(ProjectEnvironmentVariablesOutput)
}

type ProjectEnvironmentVariablesMapOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentVariablesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectEnvironmentVariables)(nil)).Elem()
}

func (o ProjectEnvironmentVariablesMapOutput) ToProjectEnvironmentVariablesMapOutput() ProjectEnvironmentVariablesMapOutput {
	return o
}

func (o ProjectEnvironmentVariablesMapOutput) ToProjectEnvironmentVariablesMapOutputWithContext(ctx context.Context) ProjectEnvironmentVariablesMapOutput {
	return o
}

func (o ProjectEnvironmentVariablesMapOutput) MapIndex(k pulumi.StringInput) ProjectEnvironmentVariablesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectEnvironmentVariables {
		return vs[0].(map[string]*ProjectEnvironmentVariables)[vs[1].(string)]
	}).(ProjectEnvironmentVariablesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentVariablesInput)(nil)).Elem(), &ProjectEnvironmentVariables{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentVariablesArrayInput)(nil)).Elem(), ProjectEnvironmentVariablesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentVariablesMapInput)(nil)).Elem(), ProjectEnvironmentVariablesMap{})
	pulumi.RegisterOutputType(ProjectEnvironmentVariablesOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentVariablesArrayOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentVariablesMapOutput{})
}
