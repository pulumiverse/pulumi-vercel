// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel/internal"
)

// Manages the configuration of an existing Vercel Team.
type TeamConfig struct {
	pulumi.CustomResourceState

	// The `avatar` should be a the 'file' attribute from a getFile data source.
	Avatar pulumi.StringMapOutput `pulumi:"avatar"`
	// A description of the team.
	Description pulumi.StringOutput `pulumi:"description"`
	// Hostname that'll be matched with emails on sign-up to automatically join the Team.
	EmailDomain pulumi.StringOutput `pulumi:"emailDomain"`
	// Enables the Vercel Toolbar on your preview deployments: one of on, off or default.
	EnablePreviewFeedback pulumi.StringOutput `pulumi:"enablePreviewFeedback"`
	// Enables the Vercel Toolbar on your production deployments: one of on, off or default.
	EnableProductionFeedback pulumi.StringOutput `pulumi:"enableProductionFeedback"`
	// Indicates if ip addresses should be accessible in o11y tooling.
	HideIpAddresses pulumi.BoolOutput `pulumi:"hideIpAddresses"`
	// Indicates if ip addresses should be accessible in log drains.
	HideIpAddressesInLogDrains pulumi.BoolOutput `pulumi:"hideIpAddressesInLogDrains"`
	// A code that can be used to join this team. Only visible to Team owners.
	InviteCode pulumi.StringOutput `pulumi:"inviteCode"`
	// The name of the team.
	Name pulumi.StringOutput `pulumi:"name"`
	// The hostname that is used as the preview deployment suffix.
	PreviewDeploymentSuffix pulumi.StringOutput `pulumi:"previewDeploymentSuffix"`
	// Configuration for Remote Caching.
	RemoteCaching TeamConfigRemoteCachingOutput `pulumi:"remoteCaching"`
	// Configuration for SAML authentication.
	Saml TeamConfigSamlOutput `pulumi:"saml"`
	// Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.
	SensitiveEnvironmentVariablePolicy pulumi.StringOutput `pulumi:"sensitiveEnvironmentVariablePolicy"`
	// The slug of the team. Will be used in the URL of the team's dashboard.
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewTeamConfig registers a new resource with the given unique name, arguments, and options.
func NewTeamConfig(ctx *pulumi.Context,
	name string, args *TeamConfigArgs, opts ...pulumi.ResourceOption) (*TeamConfig, error) {
	if args == nil {
		args = &TeamConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamConfig
	err := ctx.RegisterResource("vercel:index/teamConfig:TeamConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamConfig gets an existing TeamConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamConfigState, opts ...pulumi.ResourceOption) (*TeamConfig, error) {
	var resource TeamConfig
	err := ctx.ReadResource("vercel:index/teamConfig:TeamConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamConfig resources.
type teamConfigState struct {
	// The `avatar` should be a the 'file' attribute from a getFile data source.
	Avatar map[string]string `pulumi:"avatar"`
	// A description of the team.
	Description *string `pulumi:"description"`
	// Hostname that'll be matched with emails on sign-up to automatically join the Team.
	EmailDomain *string `pulumi:"emailDomain"`
	// Enables the Vercel Toolbar on your preview deployments: one of on, off or default.
	EnablePreviewFeedback *string `pulumi:"enablePreviewFeedback"`
	// Enables the Vercel Toolbar on your production deployments: one of on, off or default.
	EnableProductionFeedback *string `pulumi:"enableProductionFeedback"`
	// Indicates if ip addresses should be accessible in o11y tooling.
	HideIpAddresses *bool `pulumi:"hideIpAddresses"`
	// Indicates if ip addresses should be accessible in log drains.
	HideIpAddressesInLogDrains *bool `pulumi:"hideIpAddressesInLogDrains"`
	// A code that can be used to join this team. Only visible to Team owners.
	InviteCode *string `pulumi:"inviteCode"`
	// The name of the team.
	Name *string `pulumi:"name"`
	// The hostname that is used as the preview deployment suffix.
	PreviewDeploymentSuffix *string `pulumi:"previewDeploymentSuffix"`
	// Configuration for Remote Caching.
	RemoteCaching *TeamConfigRemoteCaching `pulumi:"remoteCaching"`
	// Configuration for SAML authentication.
	Saml *TeamConfigSaml `pulumi:"saml"`
	// Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.
	SensitiveEnvironmentVariablePolicy *string `pulumi:"sensitiveEnvironmentVariablePolicy"`
	// The slug of the team. Will be used in the URL of the team's dashboard.
	Slug *string `pulumi:"slug"`
}

type TeamConfigState struct {
	// The `avatar` should be a the 'file' attribute from a getFile data source.
	Avatar pulumi.StringMapInput
	// A description of the team.
	Description pulumi.StringPtrInput
	// Hostname that'll be matched with emails on sign-up to automatically join the Team.
	EmailDomain pulumi.StringPtrInput
	// Enables the Vercel Toolbar on your preview deployments: one of on, off or default.
	EnablePreviewFeedback pulumi.StringPtrInput
	// Enables the Vercel Toolbar on your production deployments: one of on, off or default.
	EnableProductionFeedback pulumi.StringPtrInput
	// Indicates if ip addresses should be accessible in o11y tooling.
	HideIpAddresses pulumi.BoolPtrInput
	// Indicates if ip addresses should be accessible in log drains.
	HideIpAddressesInLogDrains pulumi.BoolPtrInput
	// A code that can be used to join this team. Only visible to Team owners.
	InviteCode pulumi.StringPtrInput
	// The name of the team.
	Name pulumi.StringPtrInput
	// The hostname that is used as the preview deployment suffix.
	PreviewDeploymentSuffix pulumi.StringPtrInput
	// Configuration for Remote Caching.
	RemoteCaching TeamConfigRemoteCachingPtrInput
	// Configuration for SAML authentication.
	Saml TeamConfigSamlPtrInput
	// Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.
	SensitiveEnvironmentVariablePolicy pulumi.StringPtrInput
	// The slug of the team. Will be used in the URL of the team's dashboard.
	Slug pulumi.StringPtrInput
}

func (TeamConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamConfigState)(nil)).Elem()
}

type teamConfigArgs struct {
	// The `avatar` should be a the 'file' attribute from a getFile data source.
	Avatar map[string]string `pulumi:"avatar"`
	// A description of the team.
	Description *string `pulumi:"description"`
	// Hostname that'll be matched with emails on sign-up to automatically join the Team.
	EmailDomain *string `pulumi:"emailDomain"`
	// Enables the Vercel Toolbar on your preview deployments: one of on, off or default.
	EnablePreviewFeedback *string `pulumi:"enablePreviewFeedback"`
	// Enables the Vercel Toolbar on your production deployments: one of on, off or default.
	EnableProductionFeedback *string `pulumi:"enableProductionFeedback"`
	// Indicates if ip addresses should be accessible in o11y tooling.
	HideIpAddresses *bool `pulumi:"hideIpAddresses"`
	// Indicates if ip addresses should be accessible in log drains.
	HideIpAddressesInLogDrains *bool `pulumi:"hideIpAddressesInLogDrains"`
	// The name of the team.
	Name *string `pulumi:"name"`
	// The hostname that is used as the preview deployment suffix.
	PreviewDeploymentSuffix *string `pulumi:"previewDeploymentSuffix"`
	// Configuration for Remote Caching.
	RemoteCaching *TeamConfigRemoteCaching `pulumi:"remoteCaching"`
	// Configuration for SAML authentication.
	Saml *TeamConfigSaml `pulumi:"saml"`
	// Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.
	SensitiveEnvironmentVariablePolicy *string `pulumi:"sensitiveEnvironmentVariablePolicy"`
	// The slug of the team. Will be used in the URL of the team's dashboard.
	Slug *string `pulumi:"slug"`
}

// The set of arguments for constructing a TeamConfig resource.
type TeamConfigArgs struct {
	// The `avatar` should be a the 'file' attribute from a getFile data source.
	Avatar pulumi.StringMapInput
	// A description of the team.
	Description pulumi.StringPtrInput
	// Hostname that'll be matched with emails on sign-up to automatically join the Team.
	EmailDomain pulumi.StringPtrInput
	// Enables the Vercel Toolbar on your preview deployments: one of on, off or default.
	EnablePreviewFeedback pulumi.StringPtrInput
	// Enables the Vercel Toolbar on your production deployments: one of on, off or default.
	EnableProductionFeedback pulumi.StringPtrInput
	// Indicates if ip addresses should be accessible in o11y tooling.
	HideIpAddresses pulumi.BoolPtrInput
	// Indicates if ip addresses should be accessible in log drains.
	HideIpAddressesInLogDrains pulumi.BoolPtrInput
	// The name of the team.
	Name pulumi.StringPtrInput
	// The hostname that is used as the preview deployment suffix.
	PreviewDeploymentSuffix pulumi.StringPtrInput
	// Configuration for Remote Caching.
	RemoteCaching TeamConfigRemoteCachingPtrInput
	// Configuration for SAML authentication.
	Saml TeamConfigSamlPtrInput
	// Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.
	SensitiveEnvironmentVariablePolicy pulumi.StringPtrInput
	// The slug of the team. Will be used in the URL of the team's dashboard.
	Slug pulumi.StringPtrInput
}

func (TeamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamConfigArgs)(nil)).Elem()
}

type TeamConfigInput interface {
	pulumi.Input

	ToTeamConfigOutput() TeamConfigOutput
	ToTeamConfigOutputWithContext(ctx context.Context) TeamConfigOutput
}

func (*TeamConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamConfig)(nil)).Elem()
}

func (i *TeamConfig) ToTeamConfigOutput() TeamConfigOutput {
	return i.ToTeamConfigOutputWithContext(context.Background())
}

func (i *TeamConfig) ToTeamConfigOutputWithContext(ctx context.Context) TeamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamConfigOutput)
}

// TeamConfigArrayInput is an input type that accepts TeamConfigArray and TeamConfigArrayOutput values.
// You can construct a concrete instance of `TeamConfigArrayInput` via:
//
//	TeamConfigArray{ TeamConfigArgs{...} }
type TeamConfigArrayInput interface {
	pulumi.Input

	ToTeamConfigArrayOutput() TeamConfigArrayOutput
	ToTeamConfigArrayOutputWithContext(context.Context) TeamConfigArrayOutput
}

type TeamConfigArray []TeamConfigInput

func (TeamConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamConfig)(nil)).Elem()
}

func (i TeamConfigArray) ToTeamConfigArrayOutput() TeamConfigArrayOutput {
	return i.ToTeamConfigArrayOutputWithContext(context.Background())
}

func (i TeamConfigArray) ToTeamConfigArrayOutputWithContext(ctx context.Context) TeamConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamConfigArrayOutput)
}

// TeamConfigMapInput is an input type that accepts TeamConfigMap and TeamConfigMapOutput values.
// You can construct a concrete instance of `TeamConfigMapInput` via:
//
//	TeamConfigMap{ "key": TeamConfigArgs{...} }
type TeamConfigMapInput interface {
	pulumi.Input

	ToTeamConfigMapOutput() TeamConfigMapOutput
	ToTeamConfigMapOutputWithContext(context.Context) TeamConfigMapOutput
}

type TeamConfigMap map[string]TeamConfigInput

func (TeamConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamConfig)(nil)).Elem()
}

func (i TeamConfigMap) ToTeamConfigMapOutput() TeamConfigMapOutput {
	return i.ToTeamConfigMapOutputWithContext(context.Background())
}

func (i TeamConfigMap) ToTeamConfigMapOutputWithContext(ctx context.Context) TeamConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamConfigMapOutput)
}

type TeamConfigOutput struct{ *pulumi.OutputState }

func (TeamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamConfig)(nil)).Elem()
}

func (o TeamConfigOutput) ToTeamConfigOutput() TeamConfigOutput {
	return o
}

func (o TeamConfigOutput) ToTeamConfigOutputWithContext(ctx context.Context) TeamConfigOutput {
	return o
}

// The `avatar` should be a the 'file' attribute from a getFile data source.
func (o TeamConfigOutput) Avatar() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TeamConfig) pulumi.StringMapOutput { return v.Avatar }).(pulumi.StringMapOutput)
}

// A description of the team.
func (o TeamConfigOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamConfig) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Hostname that'll be matched with emails on sign-up to automatically join the Team.
func (o TeamConfigOutput) EmailDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamConfig) pulumi.StringOutput { return v.EmailDomain }).(pulumi.StringOutput)
}

// Enables the Vercel Toolbar on your preview deployments: one of on, off or default.
func (o TeamConfigOutput) EnablePreviewFeedback() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamConfig) pulumi.StringOutput { return v.EnablePreviewFeedback }).(pulumi.StringOutput)
}

// Enables the Vercel Toolbar on your production deployments: one of on, off or default.
func (o TeamConfigOutput) EnableProductionFeedback() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamConfig) pulumi.StringOutput { return v.EnableProductionFeedback }).(pulumi.StringOutput)
}

// Indicates if ip addresses should be accessible in o11y tooling.
func (o TeamConfigOutput) HideIpAddresses() pulumi.BoolOutput {
	return o.ApplyT(func(v *TeamConfig) pulumi.BoolOutput { return v.HideIpAddresses }).(pulumi.BoolOutput)
}

// Indicates if ip addresses should be accessible in log drains.
func (o TeamConfigOutput) HideIpAddressesInLogDrains() pulumi.BoolOutput {
	return o.ApplyT(func(v *TeamConfig) pulumi.BoolOutput { return v.HideIpAddressesInLogDrains }).(pulumi.BoolOutput)
}

// A code that can be used to join this team. Only visible to Team owners.
func (o TeamConfigOutput) InviteCode() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamConfig) pulumi.StringOutput { return v.InviteCode }).(pulumi.StringOutput)
}

// The name of the team.
func (o TeamConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The hostname that is used as the preview deployment suffix.
func (o TeamConfigOutput) PreviewDeploymentSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamConfig) pulumi.StringOutput { return v.PreviewDeploymentSuffix }).(pulumi.StringOutput)
}

// Configuration for Remote Caching.
func (o TeamConfigOutput) RemoteCaching() TeamConfigRemoteCachingOutput {
	return o.ApplyT(func(v *TeamConfig) TeamConfigRemoteCachingOutput { return v.RemoteCaching }).(TeamConfigRemoteCachingOutput)
}

// Configuration for SAML authentication.
func (o TeamConfigOutput) Saml() TeamConfigSamlOutput {
	return o.ApplyT(func(v *TeamConfig) TeamConfigSamlOutput { return v.Saml }).(TeamConfigSamlOutput)
}

// Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.
func (o TeamConfigOutput) SensitiveEnvironmentVariablePolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamConfig) pulumi.StringOutput { return v.SensitiveEnvironmentVariablePolicy }).(pulumi.StringOutput)
}

// The slug of the team. Will be used in the URL of the team's dashboard.
func (o TeamConfigOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamConfig) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type TeamConfigArrayOutput struct{ *pulumi.OutputState }

func (TeamConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamConfig)(nil)).Elem()
}

func (o TeamConfigArrayOutput) ToTeamConfigArrayOutput() TeamConfigArrayOutput {
	return o
}

func (o TeamConfigArrayOutput) ToTeamConfigArrayOutputWithContext(ctx context.Context) TeamConfigArrayOutput {
	return o
}

func (o TeamConfigArrayOutput) Index(i pulumi.IntInput) TeamConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamConfig {
		return vs[0].([]*TeamConfig)[vs[1].(int)]
	}).(TeamConfigOutput)
}

type TeamConfigMapOutput struct{ *pulumi.OutputState }

func (TeamConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamConfig)(nil)).Elem()
}

func (o TeamConfigMapOutput) ToTeamConfigMapOutput() TeamConfigMapOutput {
	return o
}

func (o TeamConfigMapOutput) ToTeamConfigMapOutputWithContext(ctx context.Context) TeamConfigMapOutput {
	return o
}

func (o TeamConfigMapOutput) MapIndex(k pulumi.StringInput) TeamConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamConfig {
		return vs[0].(map[string]*TeamConfig)[vs[1].(string)]
	}).(TeamConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamConfigInput)(nil)).Elem(), &TeamConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamConfigArrayInput)(nil)).Elem(), TeamConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamConfigMapInput)(nil)).Elem(), TeamConfigMap{})
	pulumi.RegisterOutputType(TeamConfigOutput{})
	pulumi.RegisterOutputType(TeamConfigArrayOutput{})
	pulumi.RegisterOutputType(TeamConfigMapOutput{})
}
