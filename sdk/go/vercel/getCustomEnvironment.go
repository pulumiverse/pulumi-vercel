// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel/internal"
)

// Provides information about an existing CustomEnvironment resource.
//
// An CustomEnvironment allows a `Deployment` to be accessed through a different URL.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := vercel.LookupProject(ctx, &vercel.LookupProjectArgs{
//				Name: "example-project-with-custom-env",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vercel.LookupCustomEnvironment(ctx, &vercel.LookupCustomEnvironmentArgs{
//				ProjectId: exampleProject.Id,
//				Name:      "example-custom-env",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCustomEnvironment(ctx *pulumi.Context, args *LookupCustomEnvironmentArgs, opts ...pulumi.InvokeOption) (*LookupCustomEnvironmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCustomEnvironmentResult
	err := ctx.Invoke("vercel:index/getCustomEnvironment:getCustomEnvironment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCustomEnvironment.
type LookupCustomEnvironmentArgs struct {
	// The name of the environment.
	Name string `pulumi:"name"`
	// The ID of the existing Vercel Project.
	ProjectId string `pulumi:"projectId"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// A collection of values returned by getCustomEnvironment.
type LookupCustomEnvironmentResult struct {
	// The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.
	BranchTracking GetCustomEnvironmentBranchTracking `pulumi:"branchTracking"`
	// A description of what the environment is.
	Description string `pulumi:"description"`
	// The ID of the environment.
	Id string `pulumi:"id"`
	// The name of the environment.
	Name string `pulumi:"name"`
	// The ID of the existing Vercel Project.
	ProjectId string `pulumi:"projectId"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId string `pulumi:"teamId"`
}

func LookupCustomEnvironmentOutput(ctx *pulumi.Context, args LookupCustomEnvironmentOutputArgs, opts ...pulumi.InvokeOption) LookupCustomEnvironmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCustomEnvironmentResultOutput, error) {
			args := v.(LookupCustomEnvironmentArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupCustomEnvironmentResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getCustomEnvironment:getCustomEnvironment", args, &rv, "", opts...)
			if err != nil {
				return LookupCustomEnvironmentResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupCustomEnvironmentResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupCustomEnvironmentResultOutput), nil
			}
			return output, nil
		}).(LookupCustomEnvironmentResultOutput)
}

// A collection of arguments for invoking getCustomEnvironment.
type LookupCustomEnvironmentOutputArgs struct {
	// The name of the environment.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the existing Vercel Project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
}

func (LookupCustomEnvironmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCustomEnvironmentArgs)(nil)).Elem()
}

// A collection of values returned by getCustomEnvironment.
type LookupCustomEnvironmentResultOutput struct{ *pulumi.OutputState }

func (LookupCustomEnvironmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCustomEnvironmentResult)(nil)).Elem()
}

func (o LookupCustomEnvironmentResultOutput) ToLookupCustomEnvironmentResultOutput() LookupCustomEnvironmentResultOutput {
	return o
}

func (o LookupCustomEnvironmentResultOutput) ToLookupCustomEnvironmentResultOutputWithContext(ctx context.Context) LookupCustomEnvironmentResultOutput {
	return o
}

// The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.
func (o LookupCustomEnvironmentResultOutput) BranchTracking() GetCustomEnvironmentBranchTrackingOutput {
	return o.ApplyT(func(v LookupCustomEnvironmentResult) GetCustomEnvironmentBranchTracking { return v.BranchTracking }).(GetCustomEnvironmentBranchTrackingOutput)
}

// A description of what the environment is.
func (o LookupCustomEnvironmentResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomEnvironmentResult) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the environment.
func (o LookupCustomEnvironmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomEnvironmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the environment.
func (o LookupCustomEnvironmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomEnvironmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the existing Vercel Project.
func (o LookupCustomEnvironmentResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomEnvironmentResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
func (o LookupCustomEnvironmentResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomEnvironmentResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCustomEnvironmentResultOutput{})
}
