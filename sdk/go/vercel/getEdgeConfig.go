// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vercel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel/internal"
)

// Provides information about an existing Edge Config.
//
// An Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vercel.LookupEdgeConfig(ctx, &vercel.LookupEdgeConfigArgs{
//				Id: "ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupEdgeConfig(ctx *pulumi.Context, args *LookupEdgeConfigArgs, opts ...pulumi.InvokeOption) (*LookupEdgeConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEdgeConfigResult
	err := ctx.Invoke("vercel:index/getEdgeConfig:getEdgeConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEdgeConfig.
type LookupEdgeConfigArgs struct {
	// The Edge Config ID to be retrieved. This can be found by navigating to the Edge Config in the Vercel UI and looking at the URL. It should begin with `ecfg_`.
	Id string `pulumi:"id"`
	// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId *string `pulumi:"teamId"`
}

// A collection of values returned by getEdgeConfig.
type LookupEdgeConfigResult struct {
	// The Edge Config ID to be retrieved. This can be found by navigating to the Edge Config in the Vercel UI and looking at the URL. It should begin with `ecfg_`.
	Id string `pulumi:"id"`
	// The name/slug of the Edge Config.
	Name string `pulumi:"name"`
	// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId string `pulumi:"teamId"`
}

func LookupEdgeConfigOutput(ctx *pulumi.Context, args LookupEdgeConfigOutputArgs, opts ...pulumi.InvokeOption) LookupEdgeConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEdgeConfigResultOutput, error) {
			args := v.(LookupEdgeConfigArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupEdgeConfigResult
			secret, err := ctx.InvokePackageRaw("vercel:index/getEdgeConfig:getEdgeConfig", args, &rv, "", opts...)
			if err != nil {
				return LookupEdgeConfigResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupEdgeConfigResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupEdgeConfigResultOutput), nil
			}
			return output, nil
		}).(LookupEdgeConfigResultOutput)
}

// A collection of arguments for invoking getEdgeConfig.
type LookupEdgeConfigOutputArgs struct {
	// The Edge Config ID to be retrieved. This can be found by navigating to the Edge Config in the Vercel UI and looking at the URL. It should begin with `ecfg_`.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
}

func (LookupEdgeConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEdgeConfigArgs)(nil)).Elem()
}

// A collection of values returned by getEdgeConfig.
type LookupEdgeConfigResultOutput struct{ *pulumi.OutputState }

func (LookupEdgeConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEdgeConfigResult)(nil)).Elem()
}

func (o LookupEdgeConfigResultOutput) ToLookupEdgeConfigResultOutput() LookupEdgeConfigResultOutput {
	return o
}

func (o LookupEdgeConfigResultOutput) ToLookupEdgeConfigResultOutputWithContext(ctx context.Context) LookupEdgeConfigResultOutput {
	return o
}

// The Edge Config ID to be retrieved. This can be found by navigating to the Edge Config in the Vercel UI and looking at the URL. It should begin with `ecfg_`.
func (o LookupEdgeConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEdgeConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name/slug of the Edge Config.
func (o LookupEdgeConfigResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEdgeConfigResult) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
func (o LookupEdgeConfigResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEdgeConfigResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEdgeConfigResultOutput{})
}
