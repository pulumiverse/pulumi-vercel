# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDsyncGroupsResult',
    'AwaitableGetDsyncGroupsResult',
    'get_dsync_groups',
    'get_dsync_groups_output',
]

@pulumi.output_type
class GetDsyncGroupsResult:
    """
    A collection of values returned by getDsyncGroups.
    """
    def __init__(__self__, id=None, lists=None, map=None, team_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if map and not isinstance(map, dict):
            raise TypeError("Expected argument 'map' to be a dict")
        pulumi.set(__self__, "map", map)
        if team_id and not isinstance(team_id, str):
            raise TypeError("Expected argument 'team_id' to be a str")
        pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetDsyncGroupsListResult']:
        """
        A list of DSync groups for the team.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter
    def map(self) -> Mapping[str, str]:
        """
        A map of Identity Provider group names to their Vercel IDs. This can be used to look up the ID of a group by its name using the lookup function.
        """
        return pulumi.get(self, "map")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> str:
        """
        The ID of the team the Dsync Groups are associated to. Required when configuring a team resource if a default team has not been set in the provider.
        """
        return pulumi.get(self, "team_id")


class AwaitableGetDsyncGroupsResult(GetDsyncGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDsyncGroupsResult(
            id=self.id,
            lists=self.lists,
            map=self.map,
            team_id=self.team_id)


def get_dsync_groups(team_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDsyncGroupsResult:
    """
    Provides information about DSync groups for a team.


    :param str team_id: The ID of the team the Dsync Groups are associated to. Required when configuring a team resource if a default team has not been set in the provider.
    """
    __args__ = dict()
    __args__['teamId'] = team_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vercel:index/getDsyncGroups:getDsyncGroups', __args__, opts=opts, typ=GetDsyncGroupsResult).value

    return AwaitableGetDsyncGroupsResult(
        id=pulumi.get(__ret__, 'id'),
        lists=pulumi.get(__ret__, 'lists'),
        map=pulumi.get(__ret__, 'map'),
        team_id=pulumi.get(__ret__, 'team_id'))
def get_dsync_groups_output(team_id: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDsyncGroupsResult]:
    """
    Provides information about DSync groups for a team.


    :param str team_id: The ID of the team the Dsync Groups are associated to. Required when configuring a team resource if a default team has not been set in the provider.
    """
    __args__ = dict()
    __args__['teamId'] = team_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vercel:index/getDsyncGroups:getDsyncGroups', __args__, opts=opts, typ=GetDsyncGroupsResult)
    return __ret__.apply(lambda __response__: GetDsyncGroupsResult(
        id=pulumi.get(__response__, 'id'),
        lists=pulumi.get(__response__, 'lists'),
        map=pulumi.get(__response__, 'map'),
        team_id=pulumi.get(__response__, 'team_id')))
