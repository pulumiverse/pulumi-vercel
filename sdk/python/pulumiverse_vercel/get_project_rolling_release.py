# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetProjectRollingReleaseResult',
    'AwaitableGetProjectRollingReleaseResult',
    'get_project_rolling_release',
    'get_project_rolling_release_output',
]

@pulumi.output_type
class GetProjectRollingReleaseResult:
    """
    A collection of values returned by getProjectRollingRelease.
    """
    def __init__(__self__, advancement_type=None, id=None, project_id=None, stages=None, team_id=None):
        if advancement_type and not isinstance(advancement_type, str):
            raise TypeError("Expected argument 'advancement_type' to be a str")
        pulumi.set(__self__, "advancement_type", advancement_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if stages and not isinstance(stages, list):
            raise TypeError("Expected argument 'stages' to be a list")
        pulumi.set(__self__, "stages", stages)
        if team_id and not isinstance(team_id, str):
            raise TypeError("Expected argument 'team_id' to be a str")
        pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter(name="advancementType")
    def advancement_type(self) -> str:
        """
        The type of advancement for the rolling release. Either 'automatic' or 'manual-approval'.
        """
        return pulumi.get(self, "advancement_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def stages(self) -> Sequence['outputs.GetProjectRollingReleaseStageResult']:
        """
        The stages for the rolling release configuration.
        """
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> str:
        """
        The ID of the Vercel team.
        """
        return pulumi.get(self, "team_id")


class AwaitableGetProjectRollingReleaseResult(GetProjectRollingReleaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectRollingReleaseResult(
            advancement_type=self.advancement_type,
            id=self.id,
            project_id=self.project_id,
            stages=self.stages,
            team_id=self.team_id)


def get_project_rolling_release(project_id: Optional[str] = None,
                                team_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectRollingReleaseResult:
    """
    Data source for a Vercel project rolling release configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vercel as vercel

    example = vercel.get_project(name="example-project")
    example_get_project_rolling_release = vercel.get_project_rolling_release(project_id=example.id)
    ```


    :param str project_id: The ID of the project.
    :param str team_id: The ID of the Vercel team.
    """
    __args__ = dict()
    __args__['projectId'] = project_id
    __args__['teamId'] = team_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vercel:index/getProjectRollingRelease:getProjectRollingRelease', __args__, opts=opts, typ=GetProjectRollingReleaseResult).value

    return AwaitableGetProjectRollingReleaseResult(
        advancement_type=pulumi.get(__ret__, 'advancement_type'),
        id=pulumi.get(__ret__, 'id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        stages=pulumi.get(__ret__, 'stages'),
        team_id=pulumi.get(__ret__, 'team_id'))
def get_project_rolling_release_output(project_id: Optional[pulumi.Input[str]] = None,
                                       team_id: Optional[pulumi.Input[Optional[str]]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProjectRollingReleaseResult]:
    """
    Data source for a Vercel project rolling release configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_vercel as vercel

    example = vercel.get_project(name="example-project")
    example_get_project_rolling_release = vercel.get_project_rolling_release(project_id=example.id)
    ```


    :param str project_id: The ID of the project.
    :param str team_id: The ID of the Vercel team.
    """
    __args__ = dict()
    __args__['projectId'] = project_id
    __args__['teamId'] = team_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vercel:index/getProjectRollingRelease:getProjectRollingRelease', __args__, opts=opts, typ=GetProjectRollingReleaseResult)
    return __ret__.apply(lambda __response__: GetProjectRollingReleaseResult(
        advancement_type=pulumi.get(__response__, 'advancement_type'),
        id=pulumi.get(__response__, 'id'),
        project_id=pulumi.get(__response__, 'project_id'),
        stages=pulumi.get(__response__, 'stages'),
        team_id=pulumi.get(__response__, 'team_id')))
