// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    public static class GetDomainConfig
    {
        /// <summary>
        /// Provides domain configuration information for a Vercel project.
        /// 
        /// This data source returns configuration details for a domain associated with a specific project,
        /// including recommended CNAME and IPv4 values.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Vercel = Pulumi.Vercel;
        /// using Vercel = Pulumiverse.Vercel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myAwesomeProject = new Vercel.Project("my_awesome_project", new()
        ///     {
        ///         Name = "my-awesome-project",
        ///     });
        /// 
        ///     // 
        ///     // "vercel_domain_config" Usage
        ///     // 
        ///     var exampleCom = Vercel.GetDomainConfig.Invoke(new()
        ///     {
        ///         Domain = "example.com",
        ///         ProjectIdOrName = myAwesomeProject.Id,
        ///     });
        /// 
        ///     var wwwExampleCom = Vercel.GetDomainConfig.Invoke(new()
        ///     {
        ///         Domain = "www.example.com",
        ///         ProjectIdOrName = myAwesomeProject.Id,
        ///     });
        /// 
        ///     //
        ///     // External DNS provider example
        ///     // 
        ///     var exampleComA = new Aws.Index.Route53Record("example_com_a", new()
        ///     {
        ///         ZoneId = "...zone_id_from_somewhere...",
        ///         Name = exampleCom.Apply(getDomainConfigResult =&gt; getDomainConfigResult.Domain),
        ///         Type = "A",
        ///         Ttl = 300,
        ///         Records = exampleCom.Apply(getDomainConfigResult =&gt; getDomainConfigResult.RecommendedIpv4s),
        ///     });
        /// 
        ///     var wwwExampleComCname = new Aws.Index.Route53Record("www_example_com_cname", new()
        ///     {
        ///         ZoneId = "...zone_id_from_somewhere...",
        ///         Name = wwwExampleCom.Apply(getDomainConfigResult =&gt; getDomainConfigResult.Domain),
        ///         Type = "CNAME",
        ///         Ttl = 300,
        ///         Records = new[]
        ///         {
        ///             wwwExampleCom.Apply(getDomainConfigResult =&gt; getDomainConfigResult.RecommendedCname),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDomainConfigResult> InvokeAsync(GetDomainConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainConfigResult>("vercel:index/getDomainConfig:getDomainConfig", args ?? new GetDomainConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Provides domain configuration information for a Vercel project.
        /// 
        /// This data source returns configuration details for a domain associated with a specific project,
        /// including recommended CNAME and IPv4 values.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Vercel = Pulumi.Vercel;
        /// using Vercel = Pulumiverse.Vercel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myAwesomeProject = new Vercel.Project("my_awesome_project", new()
        ///     {
        ///         Name = "my-awesome-project",
        ///     });
        /// 
        ///     // 
        ///     // "vercel_domain_config" Usage
        ///     // 
        ///     var exampleCom = Vercel.GetDomainConfig.Invoke(new()
        ///     {
        ///         Domain = "example.com",
        ///         ProjectIdOrName = myAwesomeProject.Id,
        ///     });
        /// 
        ///     var wwwExampleCom = Vercel.GetDomainConfig.Invoke(new()
        ///     {
        ///         Domain = "www.example.com",
        ///         ProjectIdOrName = myAwesomeProject.Id,
        ///     });
        /// 
        ///     //
        ///     // External DNS provider example
        ///     // 
        ///     var exampleComA = new Aws.Index.Route53Record("example_com_a", new()
        ///     {
        ///         ZoneId = "...zone_id_from_somewhere...",
        ///         Name = exampleCom.Apply(getDomainConfigResult =&gt; getDomainConfigResult.Domain),
        ///         Type = "A",
        ///         Ttl = 300,
        ///         Records = exampleCom.Apply(getDomainConfigResult =&gt; getDomainConfigResult.RecommendedIpv4s),
        ///     });
        /// 
        ///     var wwwExampleComCname = new Aws.Index.Route53Record("www_example_com_cname", new()
        ///     {
        ///         ZoneId = "...zone_id_from_somewhere...",
        ///         Name = wwwExampleCom.Apply(getDomainConfigResult =&gt; getDomainConfigResult.Domain),
        ///         Type = "CNAME",
        ///         Ttl = 300,
        ///         Records = new[]
        ///         {
        ///             wwwExampleCom.Apply(getDomainConfigResult =&gt; getDomainConfigResult.RecommendedCname),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDomainConfigResult> Invoke(GetDomainConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainConfigResult>("vercel:index/getDomainConfig:getDomainConfig", args ?? new GetDomainConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain name to get configuration for.
        /// </summary>
        [Input("domain", required: true)]
        public string Domain { get; set; } = null!;

        /// <summary>
        /// The project ID or name associated with the domain.
        /// </summary>
        [Input("projectIdOrName", required: true)]
        public string ProjectIdOrName { get; set; } = null!;

        /// <summary>
        /// The ID of the team the domain config exists under. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public string? TeamId { get; set; }

        public GetDomainConfigArgs()
        {
        }
        public static new GetDomainConfigArgs Empty => new GetDomainConfigArgs();
    }

    public sealed class GetDomainConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain name to get configuration for.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// The project ID or name associated with the domain.
        /// </summary>
        [Input("projectIdOrName", required: true)]
        public Input<string> ProjectIdOrName { get; set; } = null!;

        /// <summary>
        /// The ID of the team the domain config exists under. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public GetDomainConfigInvokeArgs()
        {
        }
        public static new GetDomainConfigInvokeArgs Empty => new GetDomainConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainConfigResult
    {
        /// <summary>
        /// The domain name to get configuration for.
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The project ID or name associated with the domain.
        /// </summary>
        public readonly string ProjectIdOrName;
        /// <summary>
        /// The recommended CNAME value for the domain.
        /// </summary>
        public readonly string RecommendedCname;
        /// <summary>
        /// The recommended IPv4 values for the domain.
        /// </summary>
        public readonly ImmutableArray<string> RecommendedIpv4s;
        /// <summary>
        /// The ID of the team the domain config exists under. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        public readonly string TeamId;

        [OutputConstructor]
        private GetDomainConfigResult(
            string domain,

            string id,

            string projectIdOrName,

            string recommendedCname,

            ImmutableArray<string> recommendedIpv4s,

            string teamId)
        {
            Domain = domain;
            Id = id;
            ProjectIdOrName = projectIdOrName;
            RecommendedCname = recommendedCname;
            RecommendedIpv4s = recommendedIpv4s;
            TeamId = teamId;
        }
    }
}
