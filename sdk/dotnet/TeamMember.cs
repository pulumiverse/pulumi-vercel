// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    /// <summary>
    /// Provider a resource for managing a team member.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vercel = Pulumiverse.Vercel;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var byUserId = new Vercel.TeamMember("by_user_id", new()
    ///     {
    ///         TeamId = "team_xxxxxxxxxxxxxxxxxxxxxxxx",
    ///         UserId = "uuuuuuuuuuuuuuuuuuuuuuuuuu",
    ///         Role = "MEMBER",
    ///     });
    /// 
    ///     var byEmail = new Vercel.TeamMember("by_email", new()
    ///     {
    ///         TeamId = "team_xxxxxxxxxxxxxxxxxxxxxxxx",
    ///         Email = "example@example.com",
    ///         Role = "MEMBER",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// To import, use the team_id and user_id.
    /// 
    /// ```sh
    /// $ pulumi import vercel:index/teamMember:TeamMember example team_xxxxxxxxxxxxxxxxxxxxxxxx/uuuuuuuuuuuuuuuuuuuuuuuuuu
    /// ```
    /// </summary>
    [VercelResourceType("vercel:index/teamMember:TeamMember")]
    public partial class TeamMember : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of access groups IDs that the user should be granted access to.
        /// </summary>
        [Output("accessGroups")]
        public Output<ImmutableArray<string>> AccessGroups { get; private set; } = null!;

        /// <summary>
        /// Whether the user has confirmed their invitation.
        /// </summary>
        [Output("confirmed")]
        public Output<bool> Confirmed { get; private set; } = null!;

        /// <summary>
        /// The email of the user to add to the team. Must specify one of user_id or email.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of projects that the user should be granted access to, along with their role in each project.
        /// </summary>
        [Output("projects")]
        public Output<ImmutableArray<Outputs.TeamMemberProject>> Projects { get; private set; } = null!;

        /// <summary>
        /// The role that the user should have in the project. One of 'MEMBER', 'OWNER', 'VIEWER', 'DEVELOPER', 'BILLING' or 'CONTRIBUTOR'. Depending on your Team's plan, some of these roles may be unavailable.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// The ID of the existing Vercel Team.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;

        /// <summary>
        /// The ID of the user to add to the team. Must specify one of user_id or email.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a TeamMember resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TeamMember(string name, TeamMemberArgs args, CustomResourceOptions? options = null)
            : base("vercel:index/teamMember:TeamMember", name, args ?? new TeamMemberArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TeamMember(string name, Input<string> id, TeamMemberState? state = null, CustomResourceOptions? options = null)
            : base("vercel:index/teamMember:TeamMember", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TeamMember resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TeamMember Get(string name, Input<string> id, TeamMemberState? state = null, CustomResourceOptions? options = null)
        {
            return new TeamMember(name, id, state, options);
        }
    }

    public sealed class TeamMemberArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessGroups")]
        private InputList<string>? _accessGroups;

        /// <summary>
        /// If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of access groups IDs that the user should be granted access to.
        /// </summary>
        public InputList<string> AccessGroups
        {
            get => _accessGroups ?? (_accessGroups = new InputList<string>());
            set => _accessGroups = value;
        }

        /// <summary>
        /// The email of the user to add to the team. Must specify one of user_id or email.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("projects")]
        private InputList<Inputs.TeamMemberProjectArgs>? _projects;

        /// <summary>
        /// If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of projects that the user should be granted access to, along with their role in each project.
        /// </summary>
        public InputList<Inputs.TeamMemberProjectArgs> Projects
        {
            get => _projects ?? (_projects = new InputList<Inputs.TeamMemberProjectArgs>());
            set => _projects = value;
        }

        /// <summary>
        /// The role that the user should have in the project. One of 'MEMBER', 'OWNER', 'VIEWER', 'DEVELOPER', 'BILLING' or 'CONTRIBUTOR'. Depending on your Team's plan, some of these roles may be unavailable.
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        /// <summary>
        /// The ID of the existing Vercel Team.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        /// <summary>
        /// The ID of the user to add to the team. Must specify one of user_id or email.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public TeamMemberArgs()
        {
        }
        public static new TeamMemberArgs Empty => new TeamMemberArgs();
    }

    public sealed class TeamMemberState : global::Pulumi.ResourceArgs
    {
        [Input("accessGroups")]
        private InputList<string>? _accessGroups;

        /// <summary>
        /// If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of access groups IDs that the user should be granted access to.
        /// </summary>
        public InputList<string> AccessGroups
        {
            get => _accessGroups ?? (_accessGroups = new InputList<string>());
            set => _accessGroups = value;
        }

        /// <summary>
        /// Whether the user has confirmed their invitation.
        /// </summary>
        [Input("confirmed")]
        public Input<bool>? Confirmed { get; set; }

        /// <summary>
        /// The email of the user to add to the team. Must specify one of user_id or email.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("projects")]
        private InputList<Inputs.TeamMemberProjectGetArgs>? _projects;

        /// <summary>
        /// If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of projects that the user should be granted access to, along with their role in each project.
        /// </summary>
        public InputList<Inputs.TeamMemberProjectGetArgs> Projects
        {
            get => _projects ?? (_projects = new InputList<Inputs.TeamMemberProjectGetArgs>());
            set => _projects = value;
        }

        /// <summary>
        /// The role that the user should have in the project. One of 'MEMBER', 'OWNER', 'VIEWER', 'DEVELOPER', 'BILLING' or 'CONTRIBUTOR'. Depending on your Team's plan, some of these roles may be unavailable.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// The ID of the existing Vercel Team.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        /// <summary>
        /// The ID of the user to add to the team. Must specify one of user_id or email.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public TeamMemberState()
        {
        }
        public static new TeamMemberState Empty => new TeamMemberState();
    }
}
