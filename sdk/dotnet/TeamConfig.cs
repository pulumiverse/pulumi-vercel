// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    /// <summary>
    /// Manages the configuration of an existing Vercel Team.
    /// </summary>
    [VercelResourceType("vercel:index/teamConfig:TeamConfig")]
    public partial class TeamConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The `avatar` should be a the 'file' attribute from a vercel.getFile data source.
        /// </summary>
        [Output("avatar")]
        public Output<ImmutableDictionary<string, string>?> Avatar { get; private set; } = null!;

        /// <summary>
        /// A description of the team.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Hostname that'll be matched with emails on sign-up to automatically join the Team.
        /// </summary>
        [Output("emailDomain")]
        public Output<string> EmailDomain { get; private set; } = null!;

        /// <summary>
        /// Enables the Vercel Toolbar on your preview deployments: one of on, off or default.
        /// </summary>
        [Output("enablePreviewFeedback")]
        public Output<string> EnablePreviewFeedback { get; private set; } = null!;

        /// <summary>
        /// Enables the Vercel Toolbar on your production deployments: one of on, off or default.
        /// </summary>
        [Output("enableProductionFeedback")]
        public Output<string> EnableProductionFeedback { get; private set; } = null!;

        /// <summary>
        /// Indicates if ip addresses should be accessible in o11y tooling.
        /// </summary>
        [Output("hideIpAddresses")]
        public Output<bool> HideIpAddresses { get; private set; } = null!;

        /// <summary>
        /// Indicates if ip addresses should be accessible in log drains.
        /// </summary>
        [Output("hideIpAddressesInLogDrains")]
        public Output<bool> HideIpAddressesInLogDrains { get; private set; } = null!;

        /// <summary>
        /// A code that can be used to join this team. Only visible to Team owners.
        /// </summary>
        [Output("inviteCode")]
        public Output<string> InviteCode { get; private set; } = null!;

        /// <summary>
        /// The name of the team.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The hostname that is used as the preview deployment suffix.
        /// </summary>
        [Output("previewDeploymentSuffix")]
        public Output<string> PreviewDeploymentSuffix { get; private set; } = null!;

        /// <summary>
        /// Configuration for Remote Caching.
        /// </summary>
        [Output("remoteCaching")]
        public Output<Outputs.TeamConfigRemoteCaching> RemoteCaching { get; private set; } = null!;

        /// <summary>
        /// Configuration for SAML authentication.
        /// </summary>
        [Output("saml")]
        public Output<Outputs.TeamConfigSaml> Saml { get; private set; } = null!;

        /// <summary>
        /// Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.
        /// </summary>
        [Output("sensitiveEnvironmentVariablePolicy")]
        public Output<string> SensitiveEnvironmentVariablePolicy { get; private set; } = null!;

        /// <summary>
        /// The slug of the team. Will be used in the URL of the team's dashboard.
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;


        /// <summary>
        /// Create a TeamConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TeamConfig(string name, TeamConfigArgs? args = null, CustomResourceOptions? options = null)
            : base("vercel:index/teamConfig:TeamConfig", name, args ?? new TeamConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TeamConfig(string name, Input<string> id, TeamConfigState? state = null, CustomResourceOptions? options = null)
            : base("vercel:index/teamConfig:TeamConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TeamConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TeamConfig Get(string name, Input<string> id, TeamConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new TeamConfig(name, id, state, options);
        }
    }

    public sealed class TeamConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("avatar")]
        private InputMap<string>? _avatar;

        /// <summary>
        /// The `avatar` should be a the 'file' attribute from a vercel.getFile data source.
        /// </summary>
        public InputMap<string> Avatar
        {
            get => _avatar ?? (_avatar = new InputMap<string>());
            set => _avatar = value;
        }

        /// <summary>
        /// A description of the team.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Hostname that'll be matched with emails on sign-up to automatically join the Team.
        /// </summary>
        [Input("emailDomain")]
        public Input<string>? EmailDomain { get; set; }

        /// <summary>
        /// Enables the Vercel Toolbar on your preview deployments: one of on, off or default.
        /// </summary>
        [Input("enablePreviewFeedback")]
        public Input<string>? EnablePreviewFeedback { get; set; }

        /// <summary>
        /// Enables the Vercel Toolbar on your production deployments: one of on, off or default.
        /// </summary>
        [Input("enableProductionFeedback")]
        public Input<string>? EnableProductionFeedback { get; set; }

        /// <summary>
        /// Indicates if ip addresses should be accessible in o11y tooling.
        /// </summary>
        [Input("hideIpAddresses")]
        public Input<bool>? HideIpAddresses { get; set; }

        /// <summary>
        /// Indicates if ip addresses should be accessible in log drains.
        /// </summary>
        [Input("hideIpAddressesInLogDrains")]
        public Input<bool>? HideIpAddressesInLogDrains { get; set; }

        /// <summary>
        /// The name of the team.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The hostname that is used as the preview deployment suffix.
        /// </summary>
        [Input("previewDeploymentSuffix")]
        public Input<string>? PreviewDeploymentSuffix { get; set; }

        /// <summary>
        /// Configuration for Remote Caching.
        /// </summary>
        [Input("remoteCaching")]
        public Input<Inputs.TeamConfigRemoteCachingArgs>? RemoteCaching { get; set; }

        /// <summary>
        /// Configuration for SAML authentication.
        /// </summary>
        [Input("saml")]
        public Input<Inputs.TeamConfigSamlArgs>? Saml { get; set; }

        /// <summary>
        /// Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.
        /// </summary>
        [Input("sensitiveEnvironmentVariablePolicy")]
        public Input<string>? SensitiveEnvironmentVariablePolicy { get; set; }

        /// <summary>
        /// The slug of the team. Will be used in the URL of the team's dashboard.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public TeamConfigArgs()
        {
        }
        public static new TeamConfigArgs Empty => new TeamConfigArgs();
    }

    public sealed class TeamConfigState : global::Pulumi.ResourceArgs
    {
        [Input("avatar")]
        private InputMap<string>? _avatar;

        /// <summary>
        /// The `avatar` should be a the 'file' attribute from a vercel.getFile data source.
        /// </summary>
        public InputMap<string> Avatar
        {
            get => _avatar ?? (_avatar = new InputMap<string>());
            set => _avatar = value;
        }

        /// <summary>
        /// A description of the team.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Hostname that'll be matched with emails on sign-up to automatically join the Team.
        /// </summary>
        [Input("emailDomain")]
        public Input<string>? EmailDomain { get; set; }

        /// <summary>
        /// Enables the Vercel Toolbar on your preview deployments: one of on, off or default.
        /// </summary>
        [Input("enablePreviewFeedback")]
        public Input<string>? EnablePreviewFeedback { get; set; }

        /// <summary>
        /// Enables the Vercel Toolbar on your production deployments: one of on, off or default.
        /// </summary>
        [Input("enableProductionFeedback")]
        public Input<string>? EnableProductionFeedback { get; set; }

        /// <summary>
        /// Indicates if ip addresses should be accessible in o11y tooling.
        /// </summary>
        [Input("hideIpAddresses")]
        public Input<bool>? HideIpAddresses { get; set; }

        /// <summary>
        /// Indicates if ip addresses should be accessible in log drains.
        /// </summary>
        [Input("hideIpAddressesInLogDrains")]
        public Input<bool>? HideIpAddressesInLogDrains { get; set; }

        /// <summary>
        /// A code that can be used to join this team. Only visible to Team owners.
        /// </summary>
        [Input("inviteCode")]
        public Input<string>? InviteCode { get; set; }

        /// <summary>
        /// The name of the team.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The hostname that is used as the preview deployment suffix.
        /// </summary>
        [Input("previewDeploymentSuffix")]
        public Input<string>? PreviewDeploymentSuffix { get; set; }

        /// <summary>
        /// Configuration for Remote Caching.
        /// </summary>
        [Input("remoteCaching")]
        public Input<Inputs.TeamConfigRemoteCachingGetArgs>? RemoteCaching { get; set; }

        /// <summary>
        /// Configuration for SAML authentication.
        /// </summary>
        [Input("saml")]
        public Input<Inputs.TeamConfigSamlGetArgs>? Saml { get; set; }

        /// <summary>
        /// Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.
        /// </summary>
        [Input("sensitiveEnvironmentVariablePolicy")]
        public Input<string>? SensitiveEnvironmentVariablePolicy { get; set; }

        /// <summary>
        /// The slug of the team. Will be used in the URL of the team's dashboard.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public TeamConfigState()
        {
        }
        public static new TeamConfigState Empty => new TeamConfigState();
    }
}
