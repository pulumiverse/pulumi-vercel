// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    /// <summary>
    /// Provides a Custom Certificate Resource, allowing Custom Certificates to be uploaded to Vercel.
    /// 
    /// By default, Vercel provides all domains with a custom SSL certificates. However, Enterprise teams can upload their own custom SSL certificate.
    /// 
    /// For more detailed information, please see the [Vercel documentation](https://vercel.com/docs/domains/custom-SSL-certificate).
    /// </summary>
    [VercelResourceType("vercel:index/customCertificate:CustomCertificate")]
    public partial class CustomCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The certificate itself. Should be in PEM format.
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        /// <summary>
        /// The Certificate Authority root certificate such as one of Let's Encrypt's ISRG root certificates. This will be provided by your certificate issuer and is different to the core certificate. This may be included in their download process or available for download on their website. Should be in PEM format.
        /// </summary>
        [Output("certificateAuthorityCertificate")]
        public Output<string> CertificateAuthorityCertificate { get; private set; } = null!;

        /// <summary>
        /// The private key of the Certificate. Should be in PEM format.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// The ID of the team the Custom Certificate should exist under. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a CustomCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomCertificate(string name, CustomCertificateArgs args, CustomResourceOptions? options = null)
            : base("vercel:index/customCertificate:CustomCertificate", name, args ?? new CustomCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomCertificate(string name, Input<string> id, CustomCertificateState? state = null, CustomResourceOptions? options = null)
            : base("vercel:index/customCertificate:CustomCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomCertificate Get(string name, Input<string> id, CustomCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomCertificate(name, id, state, options);
        }
    }

    public sealed class CustomCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The certificate itself. Should be in PEM format.
        /// </summary>
        [Input("certificate", required: true)]
        public Input<string> Certificate { get; set; } = null!;

        /// <summary>
        /// The Certificate Authority root certificate such as one of Let's Encrypt's ISRG root certificates. This will be provided by your certificate issuer and is different to the core certificate. This may be included in their download process or available for download on their website. Should be in PEM format.
        /// </summary>
        [Input("certificateAuthorityCertificate", required: true)]
        public Input<string> CertificateAuthorityCertificate { get; set; } = null!;

        /// <summary>
        /// The private key of the Certificate. Should be in PEM format.
        /// </summary>
        [Input("privateKey", required: true)]
        public Input<string> PrivateKey { get; set; } = null!;

        /// <summary>
        /// The ID of the team the Custom Certificate should exist under. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public CustomCertificateArgs()
        {
        }
        public static new CustomCertificateArgs Empty => new CustomCertificateArgs();
    }

    public sealed class CustomCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The certificate itself. Should be in PEM format.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// The Certificate Authority root certificate such as one of Let's Encrypt's ISRG root certificates. This will be provided by your certificate issuer and is different to the core certificate. This may be included in their download process or available for download on their website. Should be in PEM format.
        /// </summary>
        [Input("certificateAuthorityCertificate")]
        public Input<string>? CertificateAuthorityCertificate { get; set; }

        /// <summary>
        /// The private key of the Certificate. Should be in PEM format.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// The ID of the team the Custom Certificate should exist under. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public CustomCertificateState()
        {
        }
        public static new CustomCertificateState Empty => new CustomCertificateState();
    }
}
