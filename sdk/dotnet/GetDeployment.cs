// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    public static class GetDeployment
    {
        /// <summary>
        /// Provides information about an existing Deployment.
        /// 
        /// A Deployment is the result of building your Project and making it available through a live URL.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vercel = Pulumi.Vercel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Vercel.GetDeployment.Invoke(new()
        ///     {
        ///         Id = "https://my-vercel-project.vercel.app",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDeploymentResult> InvokeAsync(GetDeploymentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeploymentResult>("vercel:index/getDeployment:getDeployment", args ?? new GetDeploymentArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about an existing Deployment.
        /// 
        /// A Deployment is the result of building your Project and making it available through a live URL.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vercel = Pulumi.Vercel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Vercel.GetDeployment.Invoke(new()
        ///     {
        ///         Id = "https://my-vercel-project.vercel.app",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDeploymentResult> Invoke(GetDeploymentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeploymentResult>("vercel:index/getDeployment:getDeployment", args ?? new GetDeploymentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeploymentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID or URL of the Deployment to read.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// The Team ID to the Deployment belong to. Required when reading a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public string? TeamId { get; set; }

        public GetDeploymentArgs()
        {
        }
        public static new GetDeploymentArgs Empty => new GetDeploymentArgs();
    }

    public sealed class GetDeploymentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID or URL of the Deployment to read.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// The Team ID to the Deployment belong to. Required when reading a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public GetDeploymentInvokeArgs()
        {
        }
        public static new GetDeploymentInvokeArgs Empty => new GetDeploymentInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeploymentResult
    {
        /// <summary>
        /// A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.
        /// </summary>
        public readonly ImmutableArray<string> Domains;
        /// <summary>
        /// The ID or URL of the Deployment to read.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// true if the deployment is a production deployment, meaning production aliases will be assigned.
        /// </summary>
        public readonly bool Production;
        /// <summary>
        /// The project ID to add the deployment to.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The branch or commit hash that has been deployed. Note this will only work if the project is configured to use a Git repository.
        /// </summary>
        public readonly string Ref;
        /// <summary>
        /// The Team ID to the Deployment belong to. Required when reading a team resource if a default team has not been set in the provider.
        /// </summary>
        public readonly string TeamId;
        /// <summary>
        /// A unique URL that is automatically generated for a deployment.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetDeploymentResult(
            ImmutableArray<string> domains,

            string id,

            bool production,

            string projectId,

            string @ref,

            string teamId,

            string url)
        {
            Domains = domains;
            Id = id;
            Production = production;
            ProjectId = projectId;
            Ref = @ref;
            TeamId = teamId;
            Url = url;
        }
    }
}
