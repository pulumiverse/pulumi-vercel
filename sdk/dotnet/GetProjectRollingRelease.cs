// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    public static class GetProjectRollingRelease
    {
        /// <summary>
        /// Data source for a Vercel project rolling release configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vercel = Pulumi.Vercel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Vercel.GetProject.Invoke(new()
        ///     {
        ///         Name = "example-project",
        ///     });
        /// 
        ///     var exampleGetProjectRollingRelease = Vercel.GetProjectRollingRelease.Invoke(new()
        ///     {
        ///         ProjectId = example.Apply(getProjectResult =&gt; getProjectResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProjectRollingReleaseResult> InvokeAsync(GetProjectRollingReleaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectRollingReleaseResult>("vercel:index/getProjectRollingRelease:getProjectRollingRelease", args ?? new GetProjectRollingReleaseArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for a Vercel project rolling release configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vercel = Pulumi.Vercel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Vercel.GetProject.Invoke(new()
        ///     {
        ///         Name = "example-project",
        ///     });
        /// 
        ///     var exampleGetProjectRollingRelease = Vercel.GetProjectRollingRelease.Invoke(new()
        ///     {
        ///         ProjectId = example.Apply(getProjectResult =&gt; getProjectResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectRollingReleaseResult> Invoke(GetProjectRollingReleaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectRollingReleaseResult>("vercel:index/getProjectRollingRelease:getProjectRollingRelease", args ?? new GetProjectRollingReleaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectRollingReleaseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// The ID of the Vercel team.
        /// </summary>
        [Input("teamId")]
        public string? TeamId { get; set; }

        public GetProjectRollingReleaseArgs()
        {
        }
        public static new GetProjectRollingReleaseArgs Empty => new GetProjectRollingReleaseArgs();
    }

    public sealed class GetProjectRollingReleaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The ID of the Vercel team.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public GetProjectRollingReleaseInvokeArgs()
        {
        }
        public static new GetProjectRollingReleaseInvokeArgs Empty => new GetProjectRollingReleaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectRollingReleaseResult
    {
        /// <summary>
        /// The type of advancement for the rolling release. Either 'automatic' or 'manual-approval'.
        /// </summary>
        public readonly string AdvancementType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The stages for the rolling release configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectRollingReleaseStageResult> Stages;
        /// <summary>
        /// The ID of the Vercel team.
        /// </summary>
        public readonly string TeamId;

        [OutputConstructor]
        private GetProjectRollingReleaseResult(
            string advancementType,

            string id,

            string projectId,

            ImmutableArray<Outputs.GetProjectRollingReleaseStageResult> stages,

            string teamId)
        {
            AdvancementType = advancementType;
            Id = id;
            ProjectId = projectId;
            Stages = stages;
            TeamId = teamId;
        }
    }
}
