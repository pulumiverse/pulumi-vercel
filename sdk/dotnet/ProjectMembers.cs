// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vercel = Pulumiverse.Vercel;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleProject = new Vercel.Project("exampleProject");
    /// 
    ///     var exampleProjectMembers = new Vercel.ProjectMembers("exampleProjectMembers", new()
    ///     {
    ///         ProjectId = exampleProject.Id,
    ///         Members = new[]
    ///         {
    ///             new Vercel.Inputs.ProjectMembersMemberArgs
    ///             {
    ///                 Email = "user@example.com",
    ///                 Role = "PROJECT_VIEWER",
    ///             },
    ///             new Vercel.Inputs.ProjectMembersMemberArgs
    ///             {
    ///                 Username = "some-example-user",
    ///                 Role = "PROJECT_DEVELOPER",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [VercelResourceType("vercel:index/projectMembers:ProjectMembers")]
    public partial class ProjectMembers : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The set of members to manage for this project.
        /// </summary>
        [Output("members")]
        public Output<ImmutableArray<Outputs.ProjectMembersMember>> Members { get; private set; } = null!;

        /// <summary>
        /// The ID of the existing Vercel Project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectMembers resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectMembers(string name, ProjectMembersArgs args, CustomResourceOptions? options = null)
            : base("vercel:index/projectMembers:ProjectMembers", name, args ?? new ProjectMembersArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectMembers(string name, Input<string> id, ProjectMembersState? state = null, CustomResourceOptions? options = null)
            : base("vercel:index/projectMembers:ProjectMembers", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectMembers resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectMembers Get(string name, Input<string> id, ProjectMembersState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectMembers(name, id, state, options);
        }
    }

    public sealed class ProjectMembersArgs : global::Pulumi.ResourceArgs
    {
        [Input("members", required: true)]
        private InputList<Inputs.ProjectMembersMemberArgs>? _members;

        /// <summary>
        /// The set of members to manage for this project.
        /// </summary>
        public InputList<Inputs.ProjectMembersMemberArgs> Members
        {
            get => _members ?? (_members = new InputList<Inputs.ProjectMembersMemberArgs>());
            set => _members = value;
        }

        /// <summary>
        /// The ID of the existing Vercel Project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public ProjectMembersArgs()
        {
        }
        public static new ProjectMembersArgs Empty => new ProjectMembersArgs();
    }

    public sealed class ProjectMembersState : global::Pulumi.ResourceArgs
    {
        [Input("members")]
        private InputList<Inputs.ProjectMembersMemberGetArgs>? _members;

        /// <summary>
        /// The set of members to manage for this project.
        /// </summary>
        public InputList<Inputs.ProjectMembersMemberGetArgs> Members
        {
            get => _members ?? (_members = new InputList<Inputs.ProjectMembersMemberGetArgs>());
            set => _members = value;
        }

        /// <summary>
        /// The ID of the existing Vercel Project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public ProjectMembersState()
        {
        }
        public static new ProjectMembersState Empty => new ProjectMembersState();
    }
}
