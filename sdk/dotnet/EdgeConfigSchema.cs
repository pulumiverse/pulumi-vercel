// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    /// <summary>
    /// An Edge Config Schema provides an existing Edge Config with a JSON schema. Use schema protection to prevent unexpected updates that may cause bugs or downtime.
    /// 
    /// ## Import
    /// 
    /// If importing into a personal account, or with a team configured on
    /// 
    /// the provider, simply use the edge config id.
    /// 
    /// - edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.
    /// 
    /// ```sh
    /// $ pulumi import vercel:index/edgeConfigSchema:EdgeConfigSchema example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
    /// ```
    /// 
    /// Alternatively, you can import via the team_id and edge_config_id.
    /// 
    /// - team_id can be found in the team `settings` tab in the Vercel UI.
    /// 
    /// - edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.
    /// 
    /// ```sh
    /// $ pulumi import vercel:index/edgeConfigSchema:EdgeConfigSchema example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
    /// ```
    /// </summary>
    [VercelResourceType("vercel:index/edgeConfigSchema:EdgeConfigSchema")]
    public partial class EdgeConfigSchema : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A JSON schema that will be used to validate data in the Edge Config.
        /// </summary>
        [Output("definition")]
        public Output<string> Definition { get; private set; } = null!;

        /// <summary>
        /// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a EdgeConfigSchema resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgeConfigSchema(string name, EdgeConfigSchemaArgs args, CustomResourceOptions? options = null)
            : base("vercel:index/edgeConfigSchema:EdgeConfigSchema", name, args ?? new EdgeConfigSchemaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgeConfigSchema(string name, Input<string> id, EdgeConfigSchemaState? state = null, CustomResourceOptions? options = null)
            : base("vercel:index/edgeConfigSchema:EdgeConfigSchema", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgeConfigSchema resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgeConfigSchema Get(string name, Input<string> id, EdgeConfigSchemaState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgeConfigSchema(name, id, state, options);
        }
    }

    public sealed class EdgeConfigSchemaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A JSON schema that will be used to validate data in the Edge Config.
        /// </summary>
        [Input("definition", required: true)]
        public Input<string> Definition { get; set; } = null!;

        /// <summary>
        /// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public EdgeConfigSchemaArgs()
        {
        }
        public static new EdgeConfigSchemaArgs Empty => new EdgeConfigSchemaArgs();
    }

    public sealed class EdgeConfigSchemaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A JSON schema that will be used to validate data in the Edge Config.
        /// </summary>
        [Input("definition")]
        public Input<string>? Definition { get; set; }

        /// <summary>
        /// The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public EdgeConfigSchemaState()
        {
        }
        public static new EdgeConfigSchemaState Empty => new EdgeConfigSchemaState();
    }
}
