// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    public static class GetMicrofrontendGroupMembership
    {
        /// <summary>
        /// Provides information about an existing Microfrontend Group Membership.
        /// 
        /// A Microfrontend Group Membership is a definition of a Vercel Project being a part of a Microfrontend Group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vercel = Pulumi.Vercel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Vercel.GetMicrofrontendGroupMembership.Invoke(new()
        ///     {
        ///         ProjectId = "prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        ///         MicrofrontendGroupId = "mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMicrofrontendGroupMembershipResult> InvokeAsync(GetMicrofrontendGroupMembershipArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMicrofrontendGroupMembershipResult>("vercel:index/getMicrofrontendGroupMembership:getMicrofrontendGroupMembership", args ?? new GetMicrofrontendGroupMembershipArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about an existing Microfrontend Group Membership.
        /// 
        /// A Microfrontend Group Membership is a definition of a Vercel Project being a part of a Microfrontend Group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vercel = Pulumi.Vercel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Vercel.GetMicrofrontendGroupMembership.Invoke(new()
        ///     {
        ///         ProjectId = "prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        ///         MicrofrontendGroupId = "mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMicrofrontendGroupMembershipResult> Invoke(GetMicrofrontendGroupMembershipInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMicrofrontendGroupMembershipResult>("vercel:index/getMicrofrontendGroupMembership:getMicrofrontendGroupMembership", args ?? new GetMicrofrontendGroupMembershipInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMicrofrontendGroupMembershipArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the microfrontend group.
        /// </summary>
        [Input("microfrontendGroupId", required: true)]
        public string MicrofrontendGroupId { get; set; } = null!;

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public string? TeamId { get; set; }

        public GetMicrofrontendGroupMembershipArgs()
        {
        }
        public static new GetMicrofrontendGroupMembershipArgs Empty => new GetMicrofrontendGroupMembershipArgs();
    }

    public sealed class GetMicrofrontendGroupMembershipInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the microfrontend group.
        /// </summary>
        [Input("microfrontendGroupId", required: true)]
        public Input<string> MicrofrontendGroupId { get; set; } = null!;

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public GetMicrofrontendGroupMembershipInvokeArgs()
        {
        }
        public static new GetMicrofrontendGroupMembershipInvokeArgs Empty => new GetMicrofrontendGroupMembershipInvokeArgs();
    }


    [OutputType]
    public sealed class GetMicrofrontendGroupMembershipResult
    {
        /// <summary>
        /// The default route for the project. Used for the screenshot of deployments.
        /// </summary>
        public readonly string DefaultRoute;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the microfrontend group.
        /// </summary>
        public readonly string MicrofrontendGroupId;
        /// <summary>
        /// The ID of the project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Whether the project is route observability for this project. If dalse, the project will be route observability for all projects to the default project.
        /// </summary>
        public readonly bool RouteObservabilityToThisProject;
        /// <summary>
        /// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        public readonly string TeamId;

        [OutputConstructor]
        private GetMicrofrontendGroupMembershipResult(
            string defaultRoute,

            string id,

            string microfrontendGroupId,

            string projectId,

            bool routeObservabilityToThisProject,

            string teamId)
        {
            DefaultRoute = defaultRoute;
            Id = id;
            MicrofrontendGroupId = microfrontendGroupId;
            ProjectId = projectId;
            RouteObservabilityToThisProject = routeObservabilityToThisProject;
            TeamId = teamId;
        }
    }
}
