// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    /// <summary>
    /// Provides a Microfrontend Group resource.
    /// 
    /// A Microfrontend Group is a definition of a microfrontend belonging to a Vercel Team.
    /// 
    /// ## Import
    /// 
    /// If importing into a personal account, or with a team configured on the provider, simply use the record id.
    /// 
    /// - the microfrontend ID can be taken from the microfrontend settings page
    /// 
    /// ```sh
    /// $ pulumi import vercel:index/microfrontendGroup:MicrofrontendGroup example mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
    /// ```
    /// 
    /// Alternatively, you can import via the team_id and microfrontend_id.
    /// 
    /// - team_id can be found in the team `settings` tab in the Vercel UI.
    /// 
    /// - the microfrontend ID can be taken from the microfrontend settings page
    /// 
    /// ```sh
    /// $ pulumi import vercel:index/microfrontendGroup:MicrofrontendGroup example team_xxxxxxxxxxxxxxxxxxxxxxxx/mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
    /// ```
    /// </summary>
    [VercelResourceType("vercel:index/microfrontendGroup:MicrofrontendGroup")]
    public partial class MicrofrontendGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The default app for the project. Used as the entry point for the microfrontend.
        /// </summary>
        [Output("defaultApp")]
        public Output<Outputs.MicrofrontendGroupDefaultApp> DefaultApp { get; private set; } = null!;

        /// <summary>
        /// A human readable name for the microfrontends group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A slugified version of the name.
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a MicrofrontendGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MicrofrontendGroup(string name, MicrofrontendGroupArgs args, CustomResourceOptions? options = null)
            : base("vercel:index/microfrontendGroup:MicrofrontendGroup", name, args ?? new MicrofrontendGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MicrofrontendGroup(string name, Input<string> id, MicrofrontendGroupState? state = null, CustomResourceOptions? options = null)
            : base("vercel:index/microfrontendGroup:MicrofrontendGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MicrofrontendGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MicrofrontendGroup Get(string name, Input<string> id, MicrofrontendGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new MicrofrontendGroup(name, id, state, options);
        }
    }

    public sealed class MicrofrontendGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default app for the project. Used as the entry point for the microfrontend.
        /// </summary>
        [Input("defaultApp", required: true)]
        public Input<Inputs.MicrofrontendGroupDefaultAppArgs> DefaultApp { get; set; } = null!;

        /// <summary>
        /// A human readable name for the microfrontends group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public MicrofrontendGroupArgs()
        {
        }
        public static new MicrofrontendGroupArgs Empty => new MicrofrontendGroupArgs();
    }

    public sealed class MicrofrontendGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default app for the project. Used as the entry point for the microfrontend.
        /// </summary>
        [Input("defaultApp")]
        public Input<Inputs.MicrofrontendGroupDefaultAppGetArgs>? DefaultApp { get; set; }

        /// <summary>
        /// A human readable name for the microfrontends group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A slugified version of the name.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public MicrofrontendGroupState()
        {
        }
        public static new MicrofrontendGroupState Empty => new MicrofrontendGroupState();
    }
}
