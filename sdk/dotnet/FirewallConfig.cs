// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    /// <summary>
    /// Define Custom Rules to shape the way your traffic is handled by the Vercel Edge Network.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import vercel:index/firewallConfig:FirewallConfig example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
    /// ```
    /// </summary>
    [VercelResourceType("vercel:index/firewallConfig:FirewallConfig")]
    public partial class FirewallConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether firewall is enabled or not.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// IP rules to apply to the project.
        /// </summary>
        [Output("ipRules")]
        public Output<Outputs.FirewallConfigIpRules?> IpRules { get; private set; } = null!;

        /// <summary>
        /// The managed rulesets that are enabled.
        /// </summary>
        [Output("managedRulesets")]
        public Output<Outputs.FirewallConfigManagedRulesets?> ManagedRulesets { get; private set; } = null!;

        /// <summary>
        /// The ID of the project this configuration belongs to.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Custom rules to apply to the project
        /// </summary>
        [Output("rules")]
        public Output<Outputs.FirewallConfigRules?> Rules { get; private set; } = null!;

        /// <summary>
        /// The ID of the team this project belongs to.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a FirewallConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FirewallConfig(string name, FirewallConfigArgs args, CustomResourceOptions? options = null)
            : base("vercel:index/firewallConfig:FirewallConfig", name, args ?? new FirewallConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FirewallConfig(string name, Input<string> id, FirewallConfigState? state = null, CustomResourceOptions? options = null)
            : base("vercel:index/firewallConfig:FirewallConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FirewallConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FirewallConfig Get(string name, Input<string> id, FirewallConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new FirewallConfig(name, id, state, options);
        }
    }

    public sealed class FirewallConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether firewall is enabled or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// IP rules to apply to the project.
        /// </summary>
        [Input("ipRules")]
        public Input<Inputs.FirewallConfigIpRulesArgs>? IpRules { get; set; }

        /// <summary>
        /// The managed rulesets that are enabled.
        /// </summary>
        [Input("managedRulesets")]
        public Input<Inputs.FirewallConfigManagedRulesetsArgs>? ManagedRulesets { get; set; }

        /// <summary>
        /// The ID of the project this configuration belongs to.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Custom rules to apply to the project
        /// </summary>
        [Input("rules")]
        public Input<Inputs.FirewallConfigRulesArgs>? Rules { get; set; }

        /// <summary>
        /// The ID of the team this project belongs to.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public FirewallConfigArgs()
        {
        }
        public static new FirewallConfigArgs Empty => new FirewallConfigArgs();
    }

    public sealed class FirewallConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether firewall is enabled or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// IP rules to apply to the project.
        /// </summary>
        [Input("ipRules")]
        public Input<Inputs.FirewallConfigIpRulesGetArgs>? IpRules { get; set; }

        /// <summary>
        /// The managed rulesets that are enabled.
        /// </summary>
        [Input("managedRulesets")]
        public Input<Inputs.FirewallConfigManagedRulesetsGetArgs>? ManagedRulesets { get; set; }

        /// <summary>
        /// The ID of the project this configuration belongs to.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Custom rules to apply to the project
        /// </summary>
        [Input("rules")]
        public Input<Inputs.FirewallConfigRulesGetArgs>? Rules { get; set; }

        /// <summary>
        /// The ID of the team this project belongs to.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public FirewallConfigState()
        {
        }
        public static new FirewallConfigState Empty => new FirewallConfigState();
    }
}
