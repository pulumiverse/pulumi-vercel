// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vercel
{
    /// <summary>
    /// Provides a Configurable Log Drain resource.
    /// 
    /// &gt; For Log Drain integrations, please see the [Integration Log Drain docs](https://vercel.com/docs/observability/log-drains#log-drains-integration).
    /// 
    /// Log Drains collect all of your logs using a service specializing in storing app logs.
    /// 
    /// Teams on Pro and Enterprise plans can subscribe to log drains that are generic and configurable from the Vercel dashboard without creating an integration. This allows you to use a HTTP service to receive logs through Vercel's log drains.
    /// 
    /// &gt; Only Pro and Enterprise teams can create Configurable Log Drains.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vercel = Pulumi.Vercel;
    /// using Vercel = Pulumiverse.Vercel;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleEndpointVerification = Vercel.GetEndpointVerification.Invoke();
    /// 
    ///     var exampleProject = new Vercel.Project("exampleProject");
    /// 
    ///     var exampleLogDrain = new Vercel.LogDrain("exampleLogDrain", new()
    ///     {
    ///         DeliveryFormat = "json",
    ///         Environments = new[]
    ///         {
    ///             "production",
    ///         },
    ///         Headers = 
    ///         {
    ///             { "some-key", "some-value" },
    ///         },
    ///         ProjectIds = new[]
    ///         {
    ///             exampleProject.Id,
    ///         },
    ///         SamplingRate = 0.8,
    ///         Secret = "a_very_long_and_very_well_specified_secret",
    ///         Sources = new[]
    ///         {
    ///             "static",
    ///         },
    ///         Endpoint = "https://example.com/my-log-drain-endpoint",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// If importing into a personal account, or with a team configured on
    /// 
    /// the provider, simply use the log_drain_id.
    /// 
    /// - log_drain_id can be found by querying the Vercel REST API (https://vercel.com/docs/rest-api/endpoints/logDrains#retrieves-a-list-of-all-the-log-drains).
    /// 
    /// ```sh
    /// $ pulumi import vercel:index/logDrain:LogDrain example ld_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    /// ```
    /// 
    /// Alternatively, you can import via the team_id and edge_config_id.
    /// 
    /// - team_id can be found in the team `settings` tab in the Vercel UI.
    /// 
    /// - log_drain_id can be found by querying the Vercel REST API (https://vercel.com/docs/rest-api/endpoints/logDrains#retrieves-a-list-of-all-the-log-drains).
    /// 
    /// ```sh
    /// $ pulumi import vercel:index/logDrain:LogDrain example team_xxxxxxxxxxxxxxxxxxxxxxxx/ld_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    /// ```
    /// </summary>
    [VercelResourceType("vercel:index/logDrain:LogDrain")]
    public partial class LogDrain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The format log data should be delivered in. Can be `json` or `ndjson`.
        /// </summary>
        [Output("deliveryFormat")]
        public Output<string> DeliveryFormat { get; private set; } = null!;

        /// <summary>
        /// Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpoint_verification data source. The value the `x-vercel-verify` header should be can be read from the `vercel_endpoint_verification_code` data source.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// Logs from the selected environments will be forwarded to your webhook. At least one must be present.
        /// </summary>
        [Output("environments")]
        public Output<ImmutableArray<string>> Environments { get; private set; } = null!;

        /// <summary>
        /// Custom headers to include in requests to the log drain endpoint.
        /// </summary>
        [Output("headers")]
        public Output<ImmutableDictionary<string, string>?> Headers { get; private set; } = null!;

        /// <summary>
        /// A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.
        /// </summary>
        [Output("projectIds")]
        public Output<ImmutableArray<string>> ProjectIds { get; private set; } = null!;

        /// <summary>
        /// A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.
        /// </summary>
        [Output("samplingRate")]
        public Output<double?> SamplingRate { get; private set; } = null!;

        /// <summary>
        /// A custom secret to be used for signing log events. You can use this secret to verify that log events are coming from Vercel and are not tampered with. See https://vercel.com/docs/observability/log-drains/log-drains-reference#secure-log-drains for full info.
        /// </summary>
        [Output("secret")]
        public Output<string> Secret { get; private set; } = null!;

        /// <summary>
        /// A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `lambda`.
        /// </summary>
        [Output("sources")]
        public Output<ImmutableArray<string>> Sources { get; private set; } = null!;

        /// <summary>
        /// The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a LogDrain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogDrain(string name, LogDrainArgs args, CustomResourceOptions? options = null)
            : base("vercel:index/logDrain:LogDrain", name, args ?? new LogDrainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogDrain(string name, Input<string> id, LogDrainState? state = null, CustomResourceOptions? options = null)
            : base("vercel:index/logDrain:LogDrain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "secret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogDrain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogDrain Get(string name, Input<string> id, LogDrainState? state = null, CustomResourceOptions? options = null)
        {
            return new LogDrain(name, id, state, options);
        }
    }

    public sealed class LogDrainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The format log data should be delivered in. Can be `json` or `ndjson`.
        /// </summary>
        [Input("deliveryFormat", required: true)]
        public Input<string> DeliveryFormat { get; set; } = null!;

        /// <summary>
        /// Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpoint_verification data source. The value the `x-vercel-verify` header should be can be read from the `vercel_endpoint_verification_code` data source.
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        [Input("environments", required: true)]
        private InputList<string>? _environments;

        /// <summary>
        /// Logs from the selected environments will be forwarded to your webhook. At least one must be present.
        /// </summary>
        public InputList<string> Environments
        {
            get => _environments ?? (_environments = new InputList<string>());
            set => _environments = value;
        }

        [Input("headers")]
        private InputMap<string>? _headers;

        /// <summary>
        /// Custom headers to include in requests to the log drain endpoint.
        /// </summary>
        public InputMap<string> Headers
        {
            get => _headers ?? (_headers = new InputMap<string>());
            set => _headers = value;
        }

        [Input("projectIds")]
        private InputList<string>? _projectIds;

        /// <summary>
        /// A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.
        /// </summary>
        public InputList<string> ProjectIds
        {
            get => _projectIds ?? (_projectIds = new InputList<string>());
            set => _projectIds = value;
        }

        /// <summary>
        /// A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.
        /// </summary>
        [Input("samplingRate")]
        public Input<double>? SamplingRate { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// A custom secret to be used for signing log events. You can use this secret to verify that log events are coming from Vercel and are not tampered with. See https://vercel.com/docs/observability/log-drains/log-drains-reference#secure-log-drains for full info.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sources", required: true)]
        private InputList<string>? _sources;

        /// <summary>
        /// A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `lambda`.
        /// </summary>
        public InputList<string> Sources
        {
            get => _sources ?? (_sources = new InputList<string>());
            set => _sources = value;
        }

        /// <summary>
        /// The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public LogDrainArgs()
        {
        }
        public static new LogDrainArgs Empty => new LogDrainArgs();
    }

    public sealed class LogDrainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The format log data should be delivered in. Can be `json` or `ndjson`.
        /// </summary>
        [Input("deliveryFormat")]
        public Input<string>? DeliveryFormat { get; set; }

        /// <summary>
        /// Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpoint_verification data source. The value the `x-vercel-verify` header should be can be read from the `vercel_endpoint_verification_code` data source.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        [Input("environments")]
        private InputList<string>? _environments;

        /// <summary>
        /// Logs from the selected environments will be forwarded to your webhook. At least one must be present.
        /// </summary>
        public InputList<string> Environments
        {
            get => _environments ?? (_environments = new InputList<string>());
            set => _environments = value;
        }

        [Input("headers")]
        private InputMap<string>? _headers;

        /// <summary>
        /// Custom headers to include in requests to the log drain endpoint.
        /// </summary>
        public InputMap<string> Headers
        {
            get => _headers ?? (_headers = new InputMap<string>());
            set => _headers = value;
        }

        [Input("projectIds")]
        private InputList<string>? _projectIds;

        /// <summary>
        /// A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.
        /// </summary>
        public InputList<string> ProjectIds
        {
            get => _projectIds ?? (_projectIds = new InputList<string>());
            set => _projectIds = value;
        }

        /// <summary>
        /// A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.
        /// </summary>
        [Input("samplingRate")]
        public Input<double>? SamplingRate { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// A custom secret to be used for signing log events. You can use this secret to verify that log events are coming from Vercel and are not tampered with. See https://vercel.com/docs/observability/log-drains/log-drains-reference#secure-log-drains for full info.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sources")]
        private InputList<string>? _sources;

        /// <summary>
        /// A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `lambda`.
        /// </summary>
        public InputList<string> Sources
        {
            get => _sources ?? (_sources = new InputList<string>());
            set => _sources = value;
        }

        /// <summary>
        /// The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public LogDrainState()
        {
        }
        public static new LogDrainState Empty => new LogDrainState();
    }
}
