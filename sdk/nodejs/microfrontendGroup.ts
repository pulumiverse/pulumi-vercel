// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Microfrontend Group resource.
 *
 * A Microfrontend Group is a definition of a microfrontend belonging to a Vercel Team.
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on the provider, simply use the record id.
 *
 * - the microfrontend ID can be taken from the microfrontend settings page
 *
 * ```sh
 * $ pulumi import vercel:index/microfrontendGroup:MicrofrontendGroup example mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * ```
 *
 * Alternatively, you can import via the team_id and microfrontend_id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - the microfrontend ID can be taken from the microfrontend settings page
 *
 * ```sh
 * $ pulumi import vercel:index/microfrontendGroup:MicrofrontendGroup example team_xxxxxxxxxxxxxxxxxxxxxxxx/mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * ```
 */
export class MicrofrontendGroup extends pulumi.CustomResource {
    /**
     * Get an existing MicrofrontendGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MicrofrontendGroupState, opts?: pulumi.CustomResourceOptions): MicrofrontendGroup {
        return new MicrofrontendGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vercel:index/microfrontendGroup:MicrofrontendGroup';

    /**
     * Returns true if the given object is an instance of MicrofrontendGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MicrofrontendGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MicrofrontendGroup.__pulumiType;
    }

    /**
     * The default app for the project. Used as the entry point for the microfrontend.
     */
    public readonly defaultApp!: pulumi.Output<outputs.MicrofrontendGroupDefaultApp>;
    /**
     * A human readable name for the microfrontends group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A slugified version of the name.
     */
    public /*out*/ readonly slug!: pulumi.Output<string>;
    /**
     * The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a MicrofrontendGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MicrofrontendGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MicrofrontendGroupArgs | MicrofrontendGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MicrofrontendGroupState | undefined;
            resourceInputs["defaultApp"] = state ? state.defaultApp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as MicrofrontendGroupArgs | undefined;
            if ((!args || args.defaultApp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultApp'");
            }
            resourceInputs["defaultApp"] = args ? args.defaultApp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["slug"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MicrofrontendGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MicrofrontendGroup resources.
 */
export interface MicrofrontendGroupState {
    /**
     * The default app for the project. Used as the entry point for the microfrontend.
     */
    defaultApp?: pulumi.Input<inputs.MicrofrontendGroupDefaultApp>;
    /**
     * A human readable name for the microfrontends group.
     */
    name?: pulumi.Input<string>;
    /**
     * A slugified version of the name.
     */
    slug?: pulumi.Input<string>;
    /**
     * The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MicrofrontendGroup resource.
 */
export interface MicrofrontendGroupArgs {
    /**
     * The default app for the project. Used as the entry point for the microfrontend.
     */
    defaultApp: pulumi.Input<inputs.MicrofrontendGroupDefaultApp>;
    /**
     * A human readable name for the microfrontends group.
     */
    name?: pulumi.Input<string>;
    /**
     * The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}
