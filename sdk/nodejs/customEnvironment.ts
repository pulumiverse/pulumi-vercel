// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Environments help manage the deployment lifecycle on the Vercel platform.
 *
 * By default, all teams use three environments when developing their project: Production, Preview, and Development. However, teams can also create custom environments to suit their needs. To learn more about the limits for each plan, see limits.
 *
 * Custom environments allow you to configure customized, pre-production environments for your project, such as staging or QA, with branch rules that will automatically deploy your branch when the branch name matches the rule. With custom environments you can also attach a domain to your environment, set environment variables, or import environment variables from another environment.
 *
 * Custom environments are designed as pre-production environments intended for long-running use. This contrasts with regular preview environments, which are designed for creating ephemeral, short-lived deployments.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const exampleProject = new vercel.Project("exampleProject", {});
 * const exampleCustomEnvironment = new vercel.CustomEnvironment("exampleCustomEnvironment", {
 *     projectId: exampleProject.id,
 *     description: "A description of the custom environment",
 *     branchTracking: {
 *         pattern: "staging-",
 *         type: "startsWith",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on
 *
 * the provider, simply use the project_id and custom environment name.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * ```sh
 * $ pulumi import vercel:index/customEnvironment:CustomEnvironment example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example-custom-env
 * ```
 *
 * Alternatively, you can import via the team_id, project_id and environment variable id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * Note also, that the value field for sensitive environment variables will be imported as `null`.
 *
 * ```sh
 * $ pulumi import vercel:index/customEnvironment:CustomEnvironment example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example-custom-env
 * ```
 */
export class CustomEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing CustomEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomEnvironmentState, opts?: pulumi.CustomResourceOptions): CustomEnvironment {
        return new CustomEnvironment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vercel:index/customEnvironment:CustomEnvironment';

    /**
     * Returns true if the given object is an instance of CustomEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomEnvironment.__pulumiType;
    }

    /**
     * The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.
     */
    public readonly branchTracking!: pulumi.Output<outputs.CustomEnvironmentBranchTracking>;
    /**
     * A description of what the environment is.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name of the environment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the existing Vercel Project.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a CustomEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomEnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomEnvironmentArgs | CustomEnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomEnvironmentState | undefined;
            resourceInputs["branchTracking"] = state ? state.branchTracking : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as CustomEnvironmentArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["branchTracking"] = args ? args.branchTracking : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomEnvironment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomEnvironment resources.
 */
export interface CustomEnvironmentState {
    /**
     * The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.
     */
    branchTracking?: pulumi.Input<inputs.CustomEnvironmentBranchTracking>;
    /**
     * A description of what the environment is.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the environment.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the existing Vercel Project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomEnvironment resource.
 */
export interface CustomEnvironmentArgs {
    /**
     * The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.
     */
    branchTracking?: pulumi.Input<inputs.CustomEnvironmentBranchTracking>;
    /**
     * A description of what the environment is.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the environment.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the existing Vercel Project.
     */
    projectId: pulumi.Input<string>;
    /**
     * The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}
