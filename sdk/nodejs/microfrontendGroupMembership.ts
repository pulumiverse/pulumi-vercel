// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Microfrontend Group Membership resource.
 *
 * A Microfrontend Group Membership is a definition of a Vercel Project being a part of a Microfrontend Group.
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on the provider, simply use the record id.
 *
 * - the microfrontend ID can be taken from the microfrontend settings page
 *
 * - the project ID can be taken from the project settings page
 *
 * ```sh
 * $ pulumi import vercel:index/microfrontendGroupMembership:MicrofrontendGroupMembership example mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/pid_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * ```
 *
 * Alternatively, you can import via the team_id and microfrontend_id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - the microfrontend ID can be taken from the microfrontend settings page
 *
 * - the project ID can be taken from the project settings page
 *
 * ```sh
 * $ pulumi import vercel:index/microfrontendGroupMembership:MicrofrontendGroupMembership example team_xxxxxxxxxxxxxxxxxxxxxxxx/mfe_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/pid_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * ```
 */
export class MicrofrontendGroupMembership extends pulumi.CustomResource {
    /**
     * Get an existing MicrofrontendGroupMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MicrofrontendGroupMembershipState, opts?: pulumi.CustomResourceOptions): MicrofrontendGroupMembership {
        return new MicrofrontendGroupMembership(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vercel:index/microfrontendGroupMembership:MicrofrontendGroupMembership';

    /**
     * Returns true if the given object is an instance of MicrofrontendGroupMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MicrofrontendGroupMembership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MicrofrontendGroupMembership.__pulumiType;
    }

    /**
     * The default route for the project. Used for the screenshot of deployments.
     */
    public readonly defaultRoute!: pulumi.Output<string>;
    /**
     * The ID of the microfrontend group.
     */
    public readonly microfrontendGroupId!: pulumi.Output<string>;
    /**
     * The ID of the project.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Whether the project is route observability for this project. If dalse, the project will be route observability for all projects to the default project.
     */
    public readonly routeObservabilityToThisProject!: pulumi.Output<boolean>;
    /**
     * The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a MicrofrontendGroupMembership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MicrofrontendGroupMembershipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MicrofrontendGroupMembershipArgs | MicrofrontendGroupMembershipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MicrofrontendGroupMembershipState | undefined;
            resourceInputs["defaultRoute"] = state ? state.defaultRoute : undefined;
            resourceInputs["microfrontendGroupId"] = state ? state.microfrontendGroupId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["routeObservabilityToThisProject"] = state ? state.routeObservabilityToThisProject : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as MicrofrontendGroupMembershipArgs | undefined;
            if ((!args || args.microfrontendGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'microfrontendGroupId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["defaultRoute"] = args ? args.defaultRoute : undefined;
            resourceInputs["microfrontendGroupId"] = args ? args.microfrontendGroupId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["routeObservabilityToThisProject"] = args ? args.routeObservabilityToThisProject : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MicrofrontendGroupMembership.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MicrofrontendGroupMembership resources.
 */
export interface MicrofrontendGroupMembershipState {
    /**
     * The default route for the project. Used for the screenshot of deployments.
     */
    defaultRoute?: pulumi.Input<string>;
    /**
     * The ID of the microfrontend group.
     */
    microfrontendGroupId?: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Whether the project is route observability for this project. If dalse, the project will be route observability for all projects to the default project.
     */
    routeObservabilityToThisProject?: pulumi.Input<boolean>;
    /**
     * The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MicrofrontendGroupMembership resource.
 */
export interface MicrofrontendGroupMembershipArgs {
    /**
     * The default route for the project. Used for the screenshot of deployments.
     */
    defaultRoute?: pulumi.Input<string>;
    /**
     * The ID of the microfrontend group.
     */
    microfrontendGroupId: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId: pulumi.Input<string>;
    /**
     * Whether the project is route observability for this project. If dalse, the project will be route observability for all projects to the default project.
     */
    routeObservabilityToThisProject?: pulumi.Input<boolean>;
    /**
     * The team ID to add the microfrontend group to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}
