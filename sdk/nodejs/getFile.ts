// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides information about a file on disk.
 *
 * This will read a single file, providing metadata for use with a `vercel.Deployment`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumi/vercel";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * // In this example, we are assuming that a single index.html file
 * // is being deployed. This file lives directly next to the terraform file.
 * const example = vercel.getFile({
 *     path: "index.html",
 * });
 * const exampleGetProject = vercel.getProject({
 *     name: "my-project",
 * });
 * const exampleDeployment = new vercel.Deployment("example", {
 *     projectId: exampleGetProject.then(exampleGetProject => exampleGetProject.id),
 *     files: example.then(example => example.file),
 * });
 * ```
 */
export function getFile(args: GetFileArgs, opts?: pulumi.InvokeOptions): Promise<GetFileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vercel:index/getFile:getFile", {
        "path": args.path,
    }, opts);
}

/**
 * A collection of arguments for invoking getFile.
 */
export interface GetFileArgs {
    path: string;
}

/**
 * A collection of values returned by getFile.
 */
export interface GetFileResult {
    /**
     * A map of filename to metadata about the file. The metadata contains the file size and hash, and allows a deployment to be created if the file changes.
     */
    readonly file: {[key: string]: string};
    /**
     * The ID of this resource.
     */
    readonly id: string;
    readonly path: string;
}
/**
 * Provides information about a file on disk.
 *
 * This will read a single file, providing metadata for use with a `vercel.Deployment`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumi/vercel";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * // In this example, we are assuming that a single index.html file
 * // is being deployed. This file lives directly next to the terraform file.
 * const example = vercel.getFile({
 *     path: "index.html",
 * });
 * const exampleGetProject = vercel.getProject({
 *     name: "my-project",
 * });
 * const exampleDeployment = new vercel.Deployment("example", {
 *     projectId: exampleGetProject.then(exampleGetProject => exampleGetProject.id),
 *     files: example.then(example => example.file),
 * });
 * ```
 */
export function getFileOutput(args: GetFileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vercel:index/getFile:getFile", {
        "path": args.path,
    }, opts);
}

/**
 * A collection of arguments for invoking getFile.
 */
export interface GetFileOutputArgs {
    path: pulumi.Input<string>;
}
