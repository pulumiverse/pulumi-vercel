// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessGroupArgs, AccessGroupState } from "./accessGroup";
export type AccessGroup = import("./accessGroup").AccessGroup;
export const AccessGroup: typeof import("./accessGroup").AccessGroup = null as any;
utilities.lazyLoad(exports, ["AccessGroup"], () => require("./accessGroup"));

export { AccessGroupProjectArgs, AccessGroupProjectState } from "./accessGroupProject";
export type AccessGroupProject = import("./accessGroupProject").AccessGroupProject;
export const AccessGroupProject: typeof import("./accessGroupProject").AccessGroupProject = null as any;
utilities.lazyLoad(exports, ["AccessGroupProject"], () => require("./accessGroupProject"));

export { AliasArgs, AliasState } from "./alias";
export type Alias = import("./alias").Alias;
export const Alias: typeof import("./alias").Alias = null as any;
utilities.lazyLoad(exports, ["Alias"], () => require("./alias"));

export { AttackChallengeModeArgs, AttackChallengeModeState } from "./attackChallengeMode";
export type AttackChallengeMode = import("./attackChallengeMode").AttackChallengeMode;
export const AttackChallengeMode: typeof import("./attackChallengeMode").AttackChallengeMode = null as any;
utilities.lazyLoad(exports, ["AttackChallengeMode"], () => require("./attackChallengeMode"));

export { CustomCertificateArgs, CustomCertificateState } from "./customCertificate";
export type CustomCertificate = import("./customCertificate").CustomCertificate;
export const CustomCertificate: typeof import("./customCertificate").CustomCertificate = null as any;
utilities.lazyLoad(exports, ["CustomCertificate"], () => require("./customCertificate"));

export { CustomEnvironmentArgs, CustomEnvironmentState } from "./customEnvironment";
export type CustomEnvironment = import("./customEnvironment").CustomEnvironment;
export const CustomEnvironment: typeof import("./customEnvironment").CustomEnvironment = null as any;
utilities.lazyLoad(exports, ["CustomEnvironment"], () => require("./customEnvironment"));

export { DeploymentArgs, DeploymentState } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { EdgeConfigArgs, EdgeConfigState } from "./edgeConfig";
export type EdgeConfig = import("./edgeConfig").EdgeConfig;
export const EdgeConfig: typeof import("./edgeConfig").EdgeConfig = null as any;
utilities.lazyLoad(exports, ["EdgeConfig"], () => require("./edgeConfig"));

export { EdgeConfigItemArgs, EdgeConfigItemState } from "./edgeConfigItem";
export type EdgeConfigItem = import("./edgeConfigItem").EdgeConfigItem;
export const EdgeConfigItem: typeof import("./edgeConfigItem").EdgeConfigItem = null as any;
utilities.lazyLoad(exports, ["EdgeConfigItem"], () => require("./edgeConfigItem"));

export { EdgeConfigSchemaArgs, EdgeConfigSchemaState } from "./edgeConfigSchema";
export type EdgeConfigSchema = import("./edgeConfigSchema").EdgeConfigSchema;
export const EdgeConfigSchema: typeof import("./edgeConfigSchema").EdgeConfigSchema = null as any;
utilities.lazyLoad(exports, ["EdgeConfigSchema"], () => require("./edgeConfigSchema"));

export { EdgeConfigTokenArgs, EdgeConfigTokenState } from "./edgeConfigToken";
export type EdgeConfigToken = import("./edgeConfigToken").EdgeConfigToken;
export const EdgeConfigToken: typeof import("./edgeConfigToken").EdgeConfigToken = null as any;
utilities.lazyLoad(exports, ["EdgeConfigToken"], () => require("./edgeConfigToken"));

export { FirewallBypassArgs, FirewallBypassState } from "./firewallBypass";
export type FirewallBypass = import("./firewallBypass").FirewallBypass;
export const FirewallBypass: typeof import("./firewallBypass").FirewallBypass = null as any;
utilities.lazyLoad(exports, ["FirewallBypass"], () => require("./firewallBypass"));

export { FirewallConfigArgs, FirewallConfigState } from "./firewallConfig";
export type FirewallConfig = import("./firewallConfig").FirewallConfig;
export const FirewallConfig: typeof import("./firewallConfig").FirewallConfig = null as any;
utilities.lazyLoad(exports, ["FirewallConfig"], () => require("./firewallConfig"));

export { GetAccessGroupArgs, GetAccessGroupResult, GetAccessGroupOutputArgs } from "./getAccessGroup";
export const getAccessGroup: typeof import("./getAccessGroup").getAccessGroup = null as any;
export const getAccessGroupOutput: typeof import("./getAccessGroup").getAccessGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAccessGroup","getAccessGroupOutput"], () => require("./getAccessGroup"));

export { GetAccessGroupProjectArgs, GetAccessGroupProjectResult, GetAccessGroupProjectOutputArgs } from "./getAccessGroupProject";
export const getAccessGroupProject: typeof import("./getAccessGroupProject").getAccessGroupProject = null as any;
export const getAccessGroupProjectOutput: typeof import("./getAccessGroupProject").getAccessGroupProjectOutput = null as any;
utilities.lazyLoad(exports, ["getAccessGroupProject","getAccessGroupProjectOutput"], () => require("./getAccessGroupProject"));

export { GetAliasArgs, GetAliasResult, GetAliasOutputArgs } from "./getAlias";
export const getAlias: typeof import("./getAlias").getAlias = null as any;
export const getAliasOutput: typeof import("./getAlias").getAliasOutput = null as any;
utilities.lazyLoad(exports, ["getAlias","getAliasOutput"], () => require("./getAlias"));

export { GetAttackChallengeModeArgs, GetAttackChallengeModeResult, GetAttackChallengeModeOutputArgs } from "./getAttackChallengeMode";
export const getAttackChallengeMode: typeof import("./getAttackChallengeMode").getAttackChallengeMode = null as any;
export const getAttackChallengeModeOutput: typeof import("./getAttackChallengeMode").getAttackChallengeModeOutput = null as any;
utilities.lazyLoad(exports, ["getAttackChallengeMode","getAttackChallengeModeOutput"], () => require("./getAttackChallengeMode"));

export { GetCustomEnvironmentArgs, GetCustomEnvironmentResult, GetCustomEnvironmentOutputArgs } from "./getCustomEnvironment";
export const getCustomEnvironment: typeof import("./getCustomEnvironment").getCustomEnvironment = null as any;
export const getCustomEnvironmentOutput: typeof import("./getCustomEnvironment").getCustomEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getCustomEnvironment","getCustomEnvironmentOutput"], () => require("./getCustomEnvironment"));

export { GetDeploymentArgs, GetDeploymentResult, GetDeploymentOutputArgs } from "./getDeployment";
export const getDeployment: typeof import("./getDeployment").getDeployment = null as any;
export const getDeploymentOutput: typeof import("./getDeployment").getDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getDeployment","getDeploymentOutput"], () => require("./getDeployment"));

export { GetEdgeConfigArgs, GetEdgeConfigResult, GetEdgeConfigOutputArgs } from "./getEdgeConfig";
export const getEdgeConfig: typeof import("./getEdgeConfig").getEdgeConfig = null as any;
export const getEdgeConfigOutput: typeof import("./getEdgeConfig").getEdgeConfigOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeConfig","getEdgeConfigOutput"], () => require("./getEdgeConfig"));

export { GetEdgeConfigItemArgs, GetEdgeConfigItemResult, GetEdgeConfigItemOutputArgs } from "./getEdgeConfigItem";
export const getEdgeConfigItem: typeof import("./getEdgeConfigItem").getEdgeConfigItem = null as any;
export const getEdgeConfigItemOutput: typeof import("./getEdgeConfigItem").getEdgeConfigItemOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeConfigItem","getEdgeConfigItemOutput"], () => require("./getEdgeConfigItem"));

export { GetEdgeConfigSchemaArgs, GetEdgeConfigSchemaResult, GetEdgeConfigSchemaOutputArgs } from "./getEdgeConfigSchema";
export const getEdgeConfigSchema: typeof import("./getEdgeConfigSchema").getEdgeConfigSchema = null as any;
export const getEdgeConfigSchemaOutput: typeof import("./getEdgeConfigSchema").getEdgeConfigSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeConfigSchema","getEdgeConfigSchemaOutput"], () => require("./getEdgeConfigSchema"));

export { GetEdgeConfigTokenArgs, GetEdgeConfigTokenResult, GetEdgeConfigTokenOutputArgs } from "./getEdgeConfigToken";
export const getEdgeConfigToken: typeof import("./getEdgeConfigToken").getEdgeConfigToken = null as any;
export const getEdgeConfigTokenOutput: typeof import("./getEdgeConfigToken").getEdgeConfigTokenOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeConfigToken","getEdgeConfigTokenOutput"], () => require("./getEdgeConfigToken"));

export { GetEndpointVerificationArgs, GetEndpointVerificationResult, GetEndpointVerificationOutputArgs } from "./getEndpointVerification";
export const getEndpointVerification: typeof import("./getEndpointVerification").getEndpointVerification = null as any;
export const getEndpointVerificationOutput: typeof import("./getEndpointVerification").getEndpointVerificationOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointVerification","getEndpointVerificationOutput"], () => require("./getEndpointVerification"));

export { GetFileArgs, GetFileResult, GetFileOutputArgs } from "./getFile";
export const getFile: typeof import("./getFile").getFile = null as any;
export const getFileOutput: typeof import("./getFile").getFileOutput = null as any;
utilities.lazyLoad(exports, ["getFile","getFileOutput"], () => require("./getFile"));

export { GetLogDrainArgs, GetLogDrainResult, GetLogDrainOutputArgs } from "./getLogDrain";
export const getLogDrain: typeof import("./getLogDrain").getLogDrain = null as any;
export const getLogDrainOutput: typeof import("./getLogDrain").getLogDrainOutput = null as any;
utilities.lazyLoad(exports, ["getLogDrain","getLogDrainOutput"], () => require("./getLogDrain"));

export { GetMicrofrontendGroupArgs, GetMicrofrontendGroupResult, GetMicrofrontendGroupOutputArgs } from "./getMicrofrontendGroup";
export const getMicrofrontendGroup: typeof import("./getMicrofrontendGroup").getMicrofrontendGroup = null as any;
export const getMicrofrontendGroupOutput: typeof import("./getMicrofrontendGroup").getMicrofrontendGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMicrofrontendGroup","getMicrofrontendGroupOutput"], () => require("./getMicrofrontendGroup"));

export { GetMicrofrontendGroupMembershipArgs, GetMicrofrontendGroupMembershipResult, GetMicrofrontendGroupMembershipOutputArgs } from "./getMicrofrontendGroupMembership";
export const getMicrofrontendGroupMembership: typeof import("./getMicrofrontendGroupMembership").getMicrofrontendGroupMembership = null as any;
export const getMicrofrontendGroupMembershipOutput: typeof import("./getMicrofrontendGroupMembership").getMicrofrontendGroupMembershipOutput = null as any;
utilities.lazyLoad(exports, ["getMicrofrontendGroupMembership","getMicrofrontendGroupMembershipOutput"], () => require("./getMicrofrontendGroupMembership"));

export { GetPrebuiltProjectArgs, GetPrebuiltProjectResult, GetPrebuiltProjectOutputArgs } from "./getPrebuiltProject";
export const getPrebuiltProject: typeof import("./getPrebuiltProject").getPrebuiltProject = null as any;
export const getPrebuiltProjectOutput: typeof import("./getPrebuiltProject").getPrebuiltProjectOutput = null as any;
utilities.lazyLoad(exports, ["getPrebuiltProject","getPrebuiltProjectOutput"], () => require("./getPrebuiltProject"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectDeploymentRetentionArgs, GetProjectDeploymentRetentionResult, GetProjectDeploymentRetentionOutputArgs } from "./getProjectDeploymentRetention";
export const getProjectDeploymentRetention: typeof import("./getProjectDeploymentRetention").getProjectDeploymentRetention = null as any;
export const getProjectDeploymentRetentionOutput: typeof import("./getProjectDeploymentRetention").getProjectDeploymentRetentionOutput = null as any;
utilities.lazyLoad(exports, ["getProjectDeploymentRetention","getProjectDeploymentRetentionOutput"], () => require("./getProjectDeploymentRetention"));

export { GetProjectDirectoryArgs, GetProjectDirectoryResult, GetProjectDirectoryOutputArgs } from "./getProjectDirectory";
export const getProjectDirectory: typeof import("./getProjectDirectory").getProjectDirectory = null as any;
export const getProjectDirectoryOutput: typeof import("./getProjectDirectory").getProjectDirectoryOutput = null as any;
utilities.lazyLoad(exports, ["getProjectDirectory","getProjectDirectoryOutput"], () => require("./getProjectDirectory"));

export { GetProjectMembersArgs, GetProjectMembersResult, GetProjectMembersOutputArgs } from "./getProjectMembers";
export const getProjectMembers: typeof import("./getProjectMembers").getProjectMembers = null as any;
export const getProjectMembersOutput: typeof import("./getProjectMembers").getProjectMembersOutput = null as any;
utilities.lazyLoad(exports, ["getProjectMembers","getProjectMembersOutput"], () => require("./getProjectMembers"));

export { GetSharedEnvironmentVariableArgs, GetSharedEnvironmentVariableResult, GetSharedEnvironmentVariableOutputArgs } from "./getSharedEnvironmentVariable";
export const getSharedEnvironmentVariable: typeof import("./getSharedEnvironmentVariable").getSharedEnvironmentVariable = null as any;
export const getSharedEnvironmentVariableOutput: typeof import("./getSharedEnvironmentVariable").getSharedEnvironmentVariableOutput = null as any;
utilities.lazyLoad(exports, ["getSharedEnvironmentVariable","getSharedEnvironmentVariableOutput"], () => require("./getSharedEnvironmentVariable"));

export { GetTeamConfigArgs, GetTeamConfigResult, GetTeamConfigOutputArgs } from "./getTeamConfig";
export const getTeamConfig: typeof import("./getTeamConfig").getTeamConfig = null as any;
export const getTeamConfigOutput: typeof import("./getTeamConfig").getTeamConfigOutput = null as any;
utilities.lazyLoad(exports, ["getTeamConfig","getTeamConfigOutput"], () => require("./getTeamConfig"));

export { GetTeamMemberArgs, GetTeamMemberResult, GetTeamMemberOutputArgs } from "./getTeamMember";
export const getTeamMember: typeof import("./getTeamMember").getTeamMember = null as any;
export const getTeamMemberOutput: typeof import("./getTeamMember").getTeamMemberOutput = null as any;
utilities.lazyLoad(exports, ["getTeamMember","getTeamMemberOutput"], () => require("./getTeamMember"));

export { IntegrationProjectAccessArgs, IntegrationProjectAccessState } from "./integrationProjectAccess";
export type IntegrationProjectAccess = import("./integrationProjectAccess").IntegrationProjectAccess;
export const IntegrationProjectAccess: typeof import("./integrationProjectAccess").IntegrationProjectAccess = null as any;
utilities.lazyLoad(exports, ["IntegrationProjectAccess"], () => require("./integrationProjectAccess"));

export { LogDrainArgs, LogDrainState } from "./logDrain";
export type LogDrain = import("./logDrain").LogDrain;
export const LogDrain: typeof import("./logDrain").LogDrain = null as any;
utilities.lazyLoad(exports, ["LogDrain"], () => require("./logDrain"));

export { MicrofrontendGroupArgs, MicrofrontendGroupState } from "./microfrontendGroup";
export type MicrofrontendGroup = import("./microfrontendGroup").MicrofrontendGroup;
export const MicrofrontendGroup: typeof import("./microfrontendGroup").MicrofrontendGroup = null as any;
utilities.lazyLoad(exports, ["MicrofrontendGroup"], () => require("./microfrontendGroup"));

export { MicrofrontendGroupMembershipArgs, MicrofrontendGroupMembershipState } from "./microfrontendGroupMembership";
export type MicrofrontendGroupMembership = import("./microfrontendGroupMembership").MicrofrontendGroupMembership;
export const MicrofrontendGroupMembership: typeof import("./microfrontendGroupMembership").MicrofrontendGroupMembership = null as any;
utilities.lazyLoad(exports, ["MicrofrontendGroupMembership"], () => require("./microfrontendGroupMembership"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectDeploymentRetentionArgs, ProjectDeploymentRetentionState } from "./projectDeploymentRetention";
export type ProjectDeploymentRetention = import("./projectDeploymentRetention").ProjectDeploymentRetention;
export const ProjectDeploymentRetention: typeof import("./projectDeploymentRetention").ProjectDeploymentRetention = null as any;
utilities.lazyLoad(exports, ["ProjectDeploymentRetention"], () => require("./projectDeploymentRetention"));

export { ProjectDomainArgs, ProjectDomainState } from "./projectDomain";
export type ProjectDomain = import("./projectDomain").ProjectDomain;
export const ProjectDomain: typeof import("./projectDomain").ProjectDomain = null as any;
utilities.lazyLoad(exports, ["ProjectDomain"], () => require("./projectDomain"));

export { ProjectEnvironmentVariableArgs, ProjectEnvironmentVariableState } from "./projectEnvironmentVariable";
export type ProjectEnvironmentVariable = import("./projectEnvironmentVariable").ProjectEnvironmentVariable;
export const ProjectEnvironmentVariable: typeof import("./projectEnvironmentVariable").ProjectEnvironmentVariable = null as any;
utilities.lazyLoad(exports, ["ProjectEnvironmentVariable"], () => require("./projectEnvironmentVariable"));

export { ProjectEnvironmentVariablesArgs, ProjectEnvironmentVariablesState } from "./projectEnvironmentVariables";
export type ProjectEnvironmentVariables = import("./projectEnvironmentVariables").ProjectEnvironmentVariables;
export const ProjectEnvironmentVariables: typeof import("./projectEnvironmentVariables").ProjectEnvironmentVariables = null as any;
utilities.lazyLoad(exports, ["ProjectEnvironmentVariables"], () => require("./projectEnvironmentVariables"));

export { ProjectMembersArgs, ProjectMembersState } from "./projectMembers";
export type ProjectMembers = import("./projectMembers").ProjectMembers;
export const ProjectMembers: typeof import("./projectMembers").ProjectMembers = null as any;
utilities.lazyLoad(exports, ["ProjectMembers"], () => require("./projectMembers"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SharedEnvironmentVariableArgs, SharedEnvironmentVariableState } from "./sharedEnvironmentVariable";
export type SharedEnvironmentVariable = import("./sharedEnvironmentVariable").SharedEnvironmentVariable;
export const SharedEnvironmentVariable: typeof import("./sharedEnvironmentVariable").SharedEnvironmentVariable = null as any;
utilities.lazyLoad(exports, ["SharedEnvironmentVariable"], () => require("./sharedEnvironmentVariable"));

export { SharedEnvironmentVariableProjectLinkArgs, SharedEnvironmentVariableProjectLinkState } from "./sharedEnvironmentVariableProjectLink";
export type SharedEnvironmentVariableProjectLink = import("./sharedEnvironmentVariableProjectLink").SharedEnvironmentVariableProjectLink;
export const SharedEnvironmentVariableProjectLink: typeof import("./sharedEnvironmentVariableProjectLink").SharedEnvironmentVariableProjectLink = null as any;
utilities.lazyLoad(exports, ["SharedEnvironmentVariableProjectLink"], () => require("./sharedEnvironmentVariableProjectLink"));

export { TeamConfigArgs, TeamConfigState } from "./teamConfig";
export type TeamConfig = import("./teamConfig").TeamConfig;
export const TeamConfig: typeof import("./teamConfig").TeamConfig = null as any;
utilities.lazyLoad(exports, ["TeamConfig"], () => require("./teamConfig"));

export { TeamMemberArgs, TeamMemberState } from "./teamMember";
export type TeamMember = import("./teamMember").TeamMember;
export const TeamMember: typeof import("./teamMember").TeamMember = null as any;
utilities.lazyLoad(exports, ["TeamMember"], () => require("./teamMember"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vercel:index/accessGroup:AccessGroup":
                return new AccessGroup(name, <any>undefined, { urn })
            case "vercel:index/accessGroupProject:AccessGroupProject":
                return new AccessGroupProject(name, <any>undefined, { urn })
            case "vercel:index/alias:Alias":
                return new Alias(name, <any>undefined, { urn })
            case "vercel:index/attackChallengeMode:AttackChallengeMode":
                return new AttackChallengeMode(name, <any>undefined, { urn })
            case "vercel:index/customCertificate:CustomCertificate":
                return new CustomCertificate(name, <any>undefined, { urn })
            case "vercel:index/customEnvironment:CustomEnvironment":
                return new CustomEnvironment(name, <any>undefined, { urn })
            case "vercel:index/deployment:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "vercel:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "vercel:index/edgeConfig:EdgeConfig":
                return new EdgeConfig(name, <any>undefined, { urn })
            case "vercel:index/edgeConfigItem:EdgeConfigItem":
                return new EdgeConfigItem(name, <any>undefined, { urn })
            case "vercel:index/edgeConfigSchema:EdgeConfigSchema":
                return new EdgeConfigSchema(name, <any>undefined, { urn })
            case "vercel:index/edgeConfigToken:EdgeConfigToken":
                return new EdgeConfigToken(name, <any>undefined, { urn })
            case "vercel:index/firewallBypass:FirewallBypass":
                return new FirewallBypass(name, <any>undefined, { urn })
            case "vercel:index/firewallConfig:FirewallConfig":
                return new FirewallConfig(name, <any>undefined, { urn })
            case "vercel:index/integrationProjectAccess:IntegrationProjectAccess":
                return new IntegrationProjectAccess(name, <any>undefined, { urn })
            case "vercel:index/logDrain:LogDrain":
                return new LogDrain(name, <any>undefined, { urn })
            case "vercel:index/microfrontendGroup:MicrofrontendGroup":
                return new MicrofrontendGroup(name, <any>undefined, { urn })
            case "vercel:index/microfrontendGroupMembership:MicrofrontendGroupMembership":
                return new MicrofrontendGroupMembership(name, <any>undefined, { urn })
            case "vercel:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "vercel:index/projectDeploymentRetention:ProjectDeploymentRetention":
                return new ProjectDeploymentRetention(name, <any>undefined, { urn })
            case "vercel:index/projectDomain:ProjectDomain":
                return new ProjectDomain(name, <any>undefined, { urn })
            case "vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable":
                return new ProjectEnvironmentVariable(name, <any>undefined, { urn })
            case "vercel:index/projectEnvironmentVariables:ProjectEnvironmentVariables":
                return new ProjectEnvironmentVariables(name, <any>undefined, { urn })
            case "vercel:index/projectMembers:ProjectMembers":
                return new ProjectMembers(name, <any>undefined, { urn })
            case "vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable":
                return new SharedEnvironmentVariable(name, <any>undefined, { urn })
            case "vercel:index/sharedEnvironmentVariableProjectLink:SharedEnvironmentVariableProjectLink":
                return new SharedEnvironmentVariableProjectLink(name, <any>undefined, { urn })
            case "vercel:index/teamConfig:TeamConfig":
                return new TeamConfig(name, <any>undefined, { urn })
            case "vercel:index/teamMember:TeamMember":
                return new TeamMember(name, <any>undefined, { urn })
            case "vercel:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vercel", "index/accessGroup", _module)
pulumi.runtime.registerResourceModule("vercel", "index/accessGroupProject", _module)
pulumi.runtime.registerResourceModule("vercel", "index/alias", _module)
pulumi.runtime.registerResourceModule("vercel", "index/attackChallengeMode", _module)
pulumi.runtime.registerResourceModule("vercel", "index/customCertificate", _module)
pulumi.runtime.registerResourceModule("vercel", "index/customEnvironment", _module)
pulumi.runtime.registerResourceModule("vercel", "index/deployment", _module)
pulumi.runtime.registerResourceModule("vercel", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("vercel", "index/edgeConfig", _module)
pulumi.runtime.registerResourceModule("vercel", "index/edgeConfigItem", _module)
pulumi.runtime.registerResourceModule("vercel", "index/edgeConfigSchema", _module)
pulumi.runtime.registerResourceModule("vercel", "index/edgeConfigToken", _module)
pulumi.runtime.registerResourceModule("vercel", "index/firewallBypass", _module)
pulumi.runtime.registerResourceModule("vercel", "index/firewallConfig", _module)
pulumi.runtime.registerResourceModule("vercel", "index/integrationProjectAccess", _module)
pulumi.runtime.registerResourceModule("vercel", "index/logDrain", _module)
pulumi.runtime.registerResourceModule("vercel", "index/microfrontendGroup", _module)
pulumi.runtime.registerResourceModule("vercel", "index/microfrontendGroupMembership", _module)
pulumi.runtime.registerResourceModule("vercel", "index/project", _module)
pulumi.runtime.registerResourceModule("vercel", "index/projectDeploymentRetention", _module)
pulumi.runtime.registerResourceModule("vercel", "index/projectDomain", _module)
pulumi.runtime.registerResourceModule("vercel", "index/projectEnvironmentVariable", _module)
pulumi.runtime.registerResourceModule("vercel", "index/projectEnvironmentVariables", _module)
pulumi.runtime.registerResourceModule("vercel", "index/projectMembers", _module)
pulumi.runtime.registerResourceModule("vercel", "index/sharedEnvironmentVariable", _module)
pulumi.runtime.registerResourceModule("vercel", "index/sharedEnvironmentVariableProjectLink", _module)
pulumi.runtime.registerResourceModule("vercel", "index/teamConfig", _module)
pulumi.runtime.registerResourceModule("vercel", "index/teamMember", _module)
pulumi.runtime.registerResourceModule("vercel", "index/webhook", _module)
pulumi.runtime.registerResourcePackage("vercel", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:vercel") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
