// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provider a resource for managing a team member.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const byUserId = new vercel.TeamMember("byUserId", {
 *     role: "MEMBER",
 *     teamId: "team_xxxxxxxxxxxxxxxxxxxxxxxx",
 *     userId: "uuuuuuuuuuuuuuuuuuuuuuuuuu",
 * });
 * const byEmail = new vercel.TeamMember("byEmail", {
 *     email: "example@example.com",
 *     role: "MEMBER",
 *     teamId: "team_xxxxxxxxxxxxxxxxxxxxxxxx",
 * });
 * ```
 *
 * ## Import
 *
 * To import, use the team_id and user_id.
 *
 * ```sh
 * $ pulumi import vercel:index/teamMember:TeamMember example team_xxxxxxxxxxxxxxxxxxxxxxxx/uuuuuuuuuuuuuuuuuuuuuuuuuu
 * ```
 */
export class TeamMember extends pulumi.CustomResource {
    /**
     * Get an existing TeamMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamMemberState, opts?: pulumi.CustomResourceOptions): TeamMember {
        return new TeamMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vercel:index/teamMember:TeamMember';

    /**
     * Returns true if the given object is an instance of TeamMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamMember.__pulumiType;
    }

    /**
     * If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `accessGroups` or both must be specified. A set of access groups IDs that the user should be granted access to.
     */
    public readonly accessGroups!: pulumi.Output<string[] | undefined>;
    /**
     * Whether the user has confirmed their invitation.
     */
    public /*out*/ readonly confirmed!: pulumi.Output<boolean>;
    /**
     * The email of the user to add to the team. Must specify one of userId or email.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `accessGroups` or both must be specified. A set of projects that the user should be granted access to, along with their role in each project.
     */
    public readonly projects!: pulumi.Output<outputs.TeamMemberProject[] | undefined>;
    /**
     * The role that the user should have in the project. One of 'MEMBER', 'OWNER', 'VIEWER', 'DEVELOPER', 'BILLING' or 'CONTRIBUTOR'. Depending on your Team's plan, some of these roles may be unavailable.
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * The ID of the existing Vercel Team.
     */
    public readonly teamId!: pulumi.Output<string>;
    /**
     * The ID of the user to add to the team. Must specify one of userId or email.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a TeamMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamMemberArgs | TeamMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamMemberState | undefined;
            resourceInputs["accessGroups"] = state ? state.accessGroups : undefined;
            resourceInputs["confirmed"] = state ? state.confirmed : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["projects"] = state ? state.projects : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as TeamMemberArgs | undefined;
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["accessGroups"] = args ? args.accessGroups : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["projects"] = args ? args.projects : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["confirmed"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamMember.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamMember resources.
 */
export interface TeamMemberState {
    /**
     * If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `accessGroups` or both must be specified. A set of access groups IDs that the user should be granted access to.
     */
    accessGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the user has confirmed their invitation.
     */
    confirmed?: pulumi.Input<boolean>;
    /**
     * The email of the user to add to the team. Must specify one of userId or email.
     */
    email?: pulumi.Input<string>;
    /**
     * If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `accessGroups` or both must be specified. A set of projects that the user should be granted access to, along with their role in each project.
     */
    projects?: pulumi.Input<pulumi.Input<inputs.TeamMemberProject>[]>;
    /**
     * The role that the user should have in the project. One of 'MEMBER', 'OWNER', 'VIEWER', 'DEVELOPER', 'BILLING' or 'CONTRIBUTOR'. Depending on your Team's plan, some of these roles may be unavailable.
     */
    role?: pulumi.Input<string>;
    /**
     * The ID of the existing Vercel Team.
     */
    teamId?: pulumi.Input<string>;
    /**
     * The ID of the user to add to the team. Must specify one of userId or email.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamMember resource.
 */
export interface TeamMemberArgs {
    /**
     * If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `accessGroups` or both must be specified. A set of access groups IDs that the user should be granted access to.
     */
    accessGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The email of the user to add to the team. Must specify one of userId or email.
     */
    email?: pulumi.Input<string>;
    /**
     * If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `accessGroups` or both must be specified. A set of projects that the user should be granted access to, along with their role in each project.
     */
    projects?: pulumi.Input<pulumi.Input<inputs.TeamMemberProject>[]>;
    /**
     * The role that the user should have in the project. One of 'MEMBER', 'OWNER', 'VIEWER', 'DEVELOPER', 'BILLING' or 'CONTRIBUTOR'. Depending on your Team's plan, some of these roles may be unavailable.
     */
    role: pulumi.Input<string>;
    /**
     * The ID of the existing Vercel Team.
     */
    teamId: pulumi.Input<string>;
    /**
     * The ID of the user to add to the team. Must specify one of userId or email.
     */
    userId?: pulumi.Input<string>;
}
