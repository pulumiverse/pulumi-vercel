// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Project Domain resource.
 *
 * A Project Domain is used to associate a domain name with a `vercel.Project`.
 *
 * By default, Project Domains will be automatically applied to any `production` deployments.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const example = new vercel.Project("example", {name: "example-project"});
 * // A simple domain that will be automatically
 * // applied to each production deployment
 * const exampleProjectDomain = new vercel.ProjectDomain("example", {
 *     projectId: example.id,
 *     domain: "i-love.vercel.app",
 * });
 * // A redirect of a domain name to a second domain name.
 * // The status_code can optionally be controlled.
 * const exampleRedirect = new vercel.ProjectDomain("example_redirect", {
 *     projectId: example.id,
 *     domain: "i-also-love.vercel.app",
 *     redirect: exampleProjectDomain.domain,
 *     redirectStatusCode: 307,
 * });
 * ```
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on
 *
 * the provider, simply use the project ID and domain.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * ```sh
 * $ pulumi import vercel:index/projectDomain:ProjectDomain example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example.com
 * ```
 *
 * Alternatively, you can import via the team_id, project_id and domain name.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * ```sh
 * $ pulumi import vercel:index/projectDomain:ProjectDomain example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example.com
 * ```
 */
export class ProjectDomain extends pulumi.CustomResource {
    /**
     * Get an existing ProjectDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectDomainState, opts?: pulumi.CustomResourceOptions): ProjectDomain {
        return new ProjectDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vercel:index/projectDomain:ProjectDomain';

    /**
     * Returns true if the given object is an instance of ProjectDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectDomain.__pulumiType;
    }

    /**
     * The name of the Custom Environment to link to the Project Domain. Deployments from this custom environment will be assigned the domain name.
     */
    public readonly customEnvironmentId!: pulumi.Output<string | undefined>;
    /**
     * The domain name to associate with the project.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.
     */
    public readonly gitBranch!: pulumi.Output<string | undefined>;
    /**
     * The project ID to add the deployment to.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The domain name that serves as a target destination for redirects.
     */
    public readonly redirect!: pulumi.Output<string | undefined>;
    /**
     * The HTTP status code to use when serving as a redirect.
     */
    public readonly redirectStatusCode!: pulumi.Output<number | undefined>;
    /**
     * The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a ProjectDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectDomainArgs | ProjectDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectDomainState | undefined;
            resourceInputs["customEnvironmentId"] = state ? state.customEnvironmentId : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["gitBranch"] = state ? state.gitBranch : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["redirect"] = state ? state.redirect : undefined;
            resourceInputs["redirectStatusCode"] = state ? state.redirectStatusCode : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as ProjectDomainArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["customEnvironmentId"] = args ? args.customEnvironmentId : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["gitBranch"] = args ? args.gitBranch : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["redirect"] = args ? args.redirect : undefined;
            resourceInputs["redirectStatusCode"] = args ? args.redirectStatusCode : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectDomain resources.
 */
export interface ProjectDomainState {
    /**
     * The name of the Custom Environment to link to the Project Domain. Deployments from this custom environment will be assigned the domain name.
     */
    customEnvironmentId?: pulumi.Input<string>;
    /**
     * The domain name to associate with the project.
     */
    domain?: pulumi.Input<string>;
    /**
     * Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.
     */
    gitBranch?: pulumi.Input<string>;
    /**
     * The project ID to add the deployment to.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The domain name that serves as a target destination for redirects.
     */
    redirect?: pulumi.Input<string>;
    /**
     * The HTTP status code to use when serving as a redirect.
     */
    redirectStatusCode?: pulumi.Input<number>;
    /**
     * The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectDomain resource.
 */
export interface ProjectDomainArgs {
    /**
     * The name of the Custom Environment to link to the Project Domain. Deployments from this custom environment will be assigned the domain name.
     */
    customEnvironmentId?: pulumi.Input<string>;
    /**
     * The domain name to associate with the project.
     */
    domain: pulumi.Input<string>;
    /**
     * Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.
     */
    gitBranch?: pulumi.Input<string>;
    /**
     * The project ID to add the deployment to.
     */
    projectId: pulumi.Input<string>;
    /**
     * The domain name that serves as a target destination for redirects.
     */
    redirect?: pulumi.Input<string>;
    /**
     * The HTTP status code to use when serving as a redirect.
     */
    redirectStatusCode?: pulumi.Input<number>;
    /**
     * The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}
