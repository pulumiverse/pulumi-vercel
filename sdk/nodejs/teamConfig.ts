// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages the configuration of an existing Vercel Team.
 *
 * ## Import
 *
 * Team config can be imported via the team ID.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * ```sh
 * $ pulumi import vercel:index/teamConfig:TeamConfig example team_xxxxxxxxxxxxxxxxxxxxxxxx
 * ```
 */
export class TeamConfig extends pulumi.CustomResource {
    /**
     * Get an existing TeamConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamConfigState, opts?: pulumi.CustomResourceOptions): TeamConfig {
        return new TeamConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vercel:index/teamConfig:TeamConfig';

    /**
     * Returns true if the given object is an instance of TeamConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamConfig.__pulumiType;
    }

    /**
     * The `avatar` should be a the 'file' attribute from a vercel.getFile data source.
     */
    public readonly avatar!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A description of the team.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Hostname that'll be matched with emails on sign-up to automatically join the Team.
     */
    public readonly emailDomain!: pulumi.Output<string>;
    /**
     * Enables the Vercel Toolbar on your preview deployments: one of on, off or default.
     */
    public readonly enablePreviewFeedback!: pulumi.Output<string>;
    /**
     * Enables the Vercel Toolbar on your production deployments: one of on, off or default.
     */
    public readonly enableProductionFeedback!: pulumi.Output<string>;
    /**
     * Indicates if ip addresses should be accessible in o11y tooling.
     */
    public readonly hideIpAddresses!: pulumi.Output<boolean>;
    /**
     * Indicates if ip addresses should be accessible in log drains.
     */
    public readonly hideIpAddressesInLogDrains!: pulumi.Output<boolean>;
    /**
     * A code that can be used to join this team. Only visible to Team owners.
     */
    public /*out*/ readonly inviteCode!: pulumi.Output<string>;
    /**
     * The name of the team.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The hostname that is used as the preview deployment suffix.
     */
    public readonly previewDeploymentSuffix!: pulumi.Output<string>;
    /**
     * Configuration for Remote Caching.
     */
    public readonly remoteCaching!: pulumi.Output<outputs.TeamConfigRemoteCaching>;
    /**
     * Configuration for SAML authentication.
     */
    public readonly saml!: pulumi.Output<outputs.TeamConfigSaml>;
    /**
     * Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.
     */
    public readonly sensitiveEnvironmentVariablePolicy!: pulumi.Output<string>;
    /**
     * The slug of the team. Will be used in the URL of the team's dashboard.
     */
    public readonly slug!: pulumi.Output<string>;

    /**
     * Create a TeamConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TeamConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamConfigArgs | TeamConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamConfigState | undefined;
            resourceInputs["avatar"] = state ? state.avatar : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["emailDomain"] = state ? state.emailDomain : undefined;
            resourceInputs["enablePreviewFeedback"] = state ? state.enablePreviewFeedback : undefined;
            resourceInputs["enableProductionFeedback"] = state ? state.enableProductionFeedback : undefined;
            resourceInputs["hideIpAddresses"] = state ? state.hideIpAddresses : undefined;
            resourceInputs["hideIpAddressesInLogDrains"] = state ? state.hideIpAddressesInLogDrains : undefined;
            resourceInputs["inviteCode"] = state ? state.inviteCode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["previewDeploymentSuffix"] = state ? state.previewDeploymentSuffix : undefined;
            resourceInputs["remoteCaching"] = state ? state.remoteCaching : undefined;
            resourceInputs["saml"] = state ? state.saml : undefined;
            resourceInputs["sensitiveEnvironmentVariablePolicy"] = state ? state.sensitiveEnvironmentVariablePolicy : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
        } else {
            const args = argsOrState as TeamConfigArgs | undefined;
            resourceInputs["avatar"] = args ? args.avatar : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["emailDomain"] = args ? args.emailDomain : undefined;
            resourceInputs["enablePreviewFeedback"] = args ? args.enablePreviewFeedback : undefined;
            resourceInputs["enableProductionFeedback"] = args ? args.enableProductionFeedback : undefined;
            resourceInputs["hideIpAddresses"] = args ? args.hideIpAddresses : undefined;
            resourceInputs["hideIpAddressesInLogDrains"] = args ? args.hideIpAddressesInLogDrains : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["previewDeploymentSuffix"] = args ? args.previewDeploymentSuffix : undefined;
            resourceInputs["remoteCaching"] = args ? args.remoteCaching : undefined;
            resourceInputs["saml"] = args ? args.saml : undefined;
            resourceInputs["sensitiveEnvironmentVariablePolicy"] = args ? args.sensitiveEnvironmentVariablePolicy : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["inviteCode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamConfig resources.
 */
export interface TeamConfigState {
    /**
     * The `avatar` should be a the 'file' attribute from a vercel.getFile data source.
     */
    avatar?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A description of the team.
     */
    description?: pulumi.Input<string>;
    /**
     * Hostname that'll be matched with emails on sign-up to automatically join the Team.
     */
    emailDomain?: pulumi.Input<string>;
    /**
     * Enables the Vercel Toolbar on your preview deployments: one of on, off or default.
     */
    enablePreviewFeedback?: pulumi.Input<string>;
    /**
     * Enables the Vercel Toolbar on your production deployments: one of on, off or default.
     */
    enableProductionFeedback?: pulumi.Input<string>;
    /**
     * Indicates if ip addresses should be accessible in o11y tooling.
     */
    hideIpAddresses?: pulumi.Input<boolean>;
    /**
     * Indicates if ip addresses should be accessible in log drains.
     */
    hideIpAddressesInLogDrains?: pulumi.Input<boolean>;
    /**
     * A code that can be used to join this team. Only visible to Team owners.
     */
    inviteCode?: pulumi.Input<string>;
    /**
     * The name of the team.
     */
    name?: pulumi.Input<string>;
    /**
     * The hostname that is used as the preview deployment suffix.
     */
    previewDeploymentSuffix?: pulumi.Input<string>;
    /**
     * Configuration for Remote Caching.
     */
    remoteCaching?: pulumi.Input<inputs.TeamConfigRemoteCaching>;
    /**
     * Configuration for SAML authentication.
     */
    saml?: pulumi.Input<inputs.TeamConfigSaml>;
    /**
     * Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.
     */
    sensitiveEnvironmentVariablePolicy?: pulumi.Input<string>;
    /**
     * The slug of the team. Will be used in the URL of the team's dashboard.
     */
    slug?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamConfig resource.
 */
export interface TeamConfigArgs {
    /**
     * The `avatar` should be a the 'file' attribute from a vercel.getFile data source.
     */
    avatar?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A description of the team.
     */
    description?: pulumi.Input<string>;
    /**
     * Hostname that'll be matched with emails on sign-up to automatically join the Team.
     */
    emailDomain?: pulumi.Input<string>;
    /**
     * Enables the Vercel Toolbar on your preview deployments: one of on, off or default.
     */
    enablePreviewFeedback?: pulumi.Input<string>;
    /**
     * Enables the Vercel Toolbar on your production deployments: one of on, off or default.
     */
    enableProductionFeedback?: pulumi.Input<string>;
    /**
     * Indicates if ip addresses should be accessible in o11y tooling.
     */
    hideIpAddresses?: pulumi.Input<boolean>;
    /**
     * Indicates if ip addresses should be accessible in log drains.
     */
    hideIpAddressesInLogDrains?: pulumi.Input<boolean>;
    /**
     * The name of the team.
     */
    name?: pulumi.Input<string>;
    /**
     * The hostname that is used as the preview deployment suffix.
     */
    previewDeploymentSuffix?: pulumi.Input<string>;
    /**
     * Configuration for Remote Caching.
     */
    remoteCaching?: pulumi.Input<inputs.TeamConfigRemoteCaching>;
    /**
     * Configuration for SAML authentication.
     */
    saml?: pulumi.Input<inputs.TeamConfigSaml>;
    /**
     * Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.
     */
    sensitiveEnvironmentVariablePolicy?: pulumi.Input<string>;
    /**
     * The slug of the team. Will be used in the URL of the team's dashboard.
     */
    slug?: pulumi.Input<string>;
}
