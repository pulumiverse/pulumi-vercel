// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Custom Certificate Resource, allowing Custom Certificates to be uploaded to Vercel.
 *
 * By default, Vercel provides all domains with a custom SSL certificates. However, Enterprise teams can upload their own custom SSL certificate.
 *
 * For more detailed information, please see the [Vercel documentation](https://vercel.com/docs/domains/custom-SSL-certificate).
 */
export class CustomCertificate extends pulumi.CustomResource {
    /**
     * Get an existing CustomCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomCertificateState, opts?: pulumi.CustomResourceOptions): CustomCertificate {
        return new CustomCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vercel:index/customCertificate:CustomCertificate';

    /**
     * Returns true if the given object is an instance of CustomCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomCertificate.__pulumiType;
    }

    /**
     * The certificate itself. Should be in PEM format.
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * The Certificate Authority root certificate such as one of Let's Encrypt's ISRG root certificates. This will be provided by your certificate issuer and is different to the core certificate. This may be included in their download process or available for download on their website. Should be in PEM format.
     */
    public readonly certificateAuthorityCertificate!: pulumi.Output<string>;
    /**
     * The private key of the Certificate. Should be in PEM format.
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * The ID of the team the Custom Certificate should exist under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a CustomCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomCertificateArgs | CustomCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomCertificateState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["certificateAuthorityCertificate"] = state ? state.certificateAuthorityCertificate : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as CustomCertificateArgs | undefined;
            if ((!args || args.certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            if ((!args || args.certificateAuthorityCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthorityCertificate'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["certificateAuthorityCertificate"] = args ? args.certificateAuthorityCertificate : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomCertificate resources.
 */
export interface CustomCertificateState {
    /**
     * The certificate itself. Should be in PEM format.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The Certificate Authority root certificate such as one of Let's Encrypt's ISRG root certificates. This will be provided by your certificate issuer and is different to the core certificate. This may be included in their download process or available for download on their website. Should be in PEM format.
     */
    certificateAuthorityCertificate?: pulumi.Input<string>;
    /**
     * The private key of the Certificate. Should be in PEM format.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The ID of the team the Custom Certificate should exist under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomCertificate resource.
 */
export interface CustomCertificateArgs {
    /**
     * The certificate itself. Should be in PEM format.
     */
    certificate: pulumi.Input<string>;
    /**
     * The Certificate Authority root certificate such as one of Let's Encrypt's ISRG root certificates. This will be provided by your certificate issuer and is different to the core certificate. This may be included in their download process or available for download on their website. Should be in PEM format.
     */
    certificateAuthorityCertificate: pulumi.Input<string>;
    /**
     * The private key of the Certificate. Should be in PEM format.
     */
    privateKey: pulumi.Input<string>;
    /**
     * The ID of the team the Custom Certificate should exist under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}
