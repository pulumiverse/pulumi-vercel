// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class ProjectEnvironmentVariables extends pulumi.CustomResource {
    /**
     * Get an existing ProjectEnvironmentVariables resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectEnvironmentVariablesState, opts?: pulumi.CustomResourceOptions): ProjectEnvironmentVariables {
        return new ProjectEnvironmentVariables(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vercel:index/projectEnvironmentVariables:ProjectEnvironmentVariables';

    /**
     * Returns true if the given object is an instance of ProjectEnvironmentVariables.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectEnvironmentVariables {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectEnvironmentVariables.__pulumiType;
    }

    /**
     * The ID of the Vercel project.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
     */
    public readonly teamId!: pulumi.Output<string>;
    /**
     * A set of Environment Variables that should be configured for the project.
     */
    public readonly variables!: pulumi.Output<outputs.ProjectEnvironmentVariablesVariable[]>;

    /**
     * Create a ProjectEnvironmentVariables resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectEnvironmentVariablesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectEnvironmentVariablesArgs | ProjectEnvironmentVariablesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectEnvironmentVariablesState | undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["variables"] = state ? state.variables : undefined;
        } else {
            const args = argsOrState as ProjectEnvironmentVariablesArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.variables === undefined) && !opts.urn) {
                throw new Error("Missing required property 'variables'");
            }
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["variables"] = args ? args.variables : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectEnvironmentVariables.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectEnvironmentVariables resources.
 */
export interface ProjectEnvironmentVariablesState {
    /**
     * The ID of the Vercel project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
    /**
     * A set of Environment Variables that should be configured for the project.
     */
    variables?: pulumi.Input<pulumi.Input<inputs.ProjectEnvironmentVariablesVariable>[]>;
}

/**
 * The set of arguments for constructing a ProjectEnvironmentVariables resource.
 */
export interface ProjectEnvironmentVariablesArgs {
    /**
     * The ID of the Vercel project.
     */
    projectId: pulumi.Input<string>;
    /**
     * The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
    /**
     * A set of Environment Variables that should be configured for the project.
     */
    variables: pulumi.Input<pulumi.Input<inputs.ProjectEnvironmentVariablesVariable>[]>;
}
