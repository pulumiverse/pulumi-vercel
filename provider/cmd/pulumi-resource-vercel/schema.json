{
    "name": "vercel",
    "displayName": "Vercel",
    "keywords": [
        "pulumi",
        "vercel",
        "category/cloud"
    ],
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`vercel` Terraform Provider](https://github.com/vercel/terraform-provider-vercel).",
    "repository": "https://github.com/pulumiverse/pulumi-vercel",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "com.pulumiverse",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@pulumiverse/vercel",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vercel/terraform-provider-vercel)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-vercel` repo](https://github.com/pulumiverse/pulumi-vercel/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-vercel` repo](https://github.com/vercel/terraform-provider-vercel/issues).",
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_vercel",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vercel/terraform-provider-vercel)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-vercel` repo](https://github.com/pulumiverse/pulumi-vercel/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-vercel` repo](https://github.com/vercel/terraform-provider-vercel/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "apiToken": {
                "type": "string",
                "description": "The Vercel API Token to use. This can also be specified with the `VERCEL_API_TOKEN` shell environment variable. Tokens\ncan be created from your [Vercel settings](https://vercel.com/account/tokens).\n",
                "secret": true
            },
            "team": {
                "type": "string",
                "description": "The default Vercel Team to use when creating resources or reading data sources. This can be provided as either a team\nslug, or team ID. The slug and ID are both available from the Team Settings page in the Vercel dashboard.\n"
            }
        }
    },
    "types": {
        "vercel:index/CustomEnvironmentBranchTracking:CustomEnvironmentBranchTracking": {
            "properties": {
                "pattern": {
                    "type": "string",
                    "description": "The pattern of the branch name to track.\n"
                },
                "type": {
                    "type": "string",
                    "description": "How a branch name should be matched against the pattern. Must be one of 'startsWith', 'endsWith' or 'equals'.\n"
                }
            },
            "type": "object",
            "required": [
                "pattern",
                "type"
            ]
        },
        "vercel:index/DeploymentProjectSettings:DeploymentProjectSettings": {
            "properties": {
                "buildCommand": {
                    "type": "string",
                    "description": "The build command for this deployment. If omitted, this value will be taken from the project or automatically detected.\n"
                },
                "framework": {
                    "type": "string",
                    "description": "The framework that is being used for this deployment. If omitted, no framework is selected.\n"
                },
                "installCommand": {
                    "type": "string",
                    "description": "The install command for this deployment. If omitted, this value will be taken from the project or automatically detected.\n"
                },
                "outputDirectory": {
                    "type": "string",
                    "description": "The output directory of the deployment. If omitted, this value will be taken from the project or automatically detected.\n"
                },
                "rootDirectory": {
                    "type": "string",
                    "description": "The name of a directory or relative path to the source code of your project. When null is used it will default to the project root.\n"
                }
            },
            "type": "object"
        },
        "vercel:index/DnsRecordSrv:DnsRecordSrv": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "The TCP or UDP port on which the service is to be found.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the target host, lower value means more preferred.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The canonical hostname of the machine providing the service, ending in a dot.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "A relative weight for records with the same priority, higher value means higher chance of getting picked.\n"
                }
            },
            "type": "object",
            "required": [
                "port",
                "priority",
                "target",
                "weight"
            ]
        },
        "vercel:index/FirewallConfigIpRules:FirewallConfigIpRules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/FirewallConfigIpRulesRule:FirewallConfigIpRulesRule"
                    }
                }
            },
            "type": "object"
        },
        "vercel:index/FirewallConfigIpRulesRule:FirewallConfigIpRulesRule": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hosts to apply these rules to\n"
                },
                "id": {
                    "type": "string"
                },
                "ip": {
                    "type": "string",
                    "description": "IP or CIDR to block\n"
                },
                "notes": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "action",
                "hostname",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "hostname",
                        "id",
                        "ip"
                    ]
                }
            }
        },
        "vercel:index/FirewallConfigManagedRulesets:FirewallConfigManagedRulesets": {
            "properties": {
                "owasp": {
                    "$ref": "#/types/vercel:index/FirewallConfigManagedRulesetsOwasp:FirewallConfigManagedRulesetsOwasp",
                    "description": "Enable the owasp managed rulesets and select ruleset behaviors\n"
                }
            },
            "type": "object"
        },
        "vercel:index/FirewallConfigManagedRulesetsOwasp:FirewallConfigManagedRulesetsOwasp": {
            "properties": {
                "gen": {
                    "$ref": "#/types/vercel:index/FirewallConfigManagedRulesetsOwaspGen:FirewallConfigManagedRulesetsOwaspGen",
                    "description": "Generic Attack Detection\n"
                },
                "java": {
                    "$ref": "#/types/vercel:index/FirewallConfigManagedRulesetsOwaspJava:FirewallConfigManagedRulesetsOwaspJava",
                    "description": "Java Attack Detection\n"
                },
                "lfi": {
                    "$ref": "#/types/vercel:index/FirewallConfigManagedRulesetsOwaspLfi:FirewallConfigManagedRulesetsOwaspLfi",
                    "description": "Local File Inclusion Rules\n"
                },
                "ma": {
                    "$ref": "#/types/vercel:index/FirewallConfigManagedRulesetsOwaspMa:FirewallConfigManagedRulesetsOwaspMa",
                    "description": "Multipart Rules\n"
                },
                "php": {
                    "$ref": "#/types/vercel:index/FirewallConfigManagedRulesetsOwaspPhp:FirewallConfigManagedRulesetsOwaspPhp",
                    "description": "PHP Attack Detection\n"
                },
                "rce": {
                    "$ref": "#/types/vercel:index/FirewallConfigManagedRulesetsOwaspRce:FirewallConfigManagedRulesetsOwaspRce",
                    "description": "Remote Code Execution Rules\n"
                },
                "rfi": {
                    "$ref": "#/types/vercel:index/FirewallConfigManagedRulesetsOwaspRfi:FirewallConfigManagedRulesetsOwaspRfi",
                    "description": "Remote File Inclusion Rules\n"
                },
                "sd": {
                    "$ref": "#/types/vercel:index/FirewallConfigManagedRulesetsOwaspSd:FirewallConfigManagedRulesetsOwaspSd",
                    "description": "Scanner Detection Rules\n"
                },
                "sqli": {
                    "$ref": "#/types/vercel:index/FirewallConfigManagedRulesetsOwaspSqli:FirewallConfigManagedRulesetsOwaspSqli",
                    "description": "SQL Injection Rules\n"
                },
                "xss": {
                    "$ref": "#/types/vercel:index/FirewallConfigManagedRulesetsOwaspXss:FirewallConfigManagedRulesetsOwaspXss",
                    "description": "Cross Site Scripting Rules\n"
                }
            },
            "type": "object"
        },
        "vercel:index/FirewallConfigManagedRulesetsOwaspGen:FirewallConfigManagedRulesetsOwaspGen": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "vercel:index/FirewallConfigManagedRulesetsOwaspJava:FirewallConfigManagedRulesetsOwaspJava": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "vercel:index/FirewallConfigManagedRulesetsOwaspLfi:FirewallConfigManagedRulesetsOwaspLfi": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "vercel:index/FirewallConfigManagedRulesetsOwaspMa:FirewallConfigManagedRulesetsOwaspMa": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "vercel:index/FirewallConfigManagedRulesetsOwaspPhp:FirewallConfigManagedRulesetsOwaspPhp": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "vercel:index/FirewallConfigManagedRulesetsOwaspRce:FirewallConfigManagedRulesetsOwaspRce": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "vercel:index/FirewallConfigManagedRulesetsOwaspRfi:FirewallConfigManagedRulesetsOwaspRfi": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "vercel:index/FirewallConfigManagedRulesetsOwaspSd:FirewallConfigManagedRulesetsOwaspSd": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "vercel:index/FirewallConfigManagedRulesetsOwaspSqli:FirewallConfigManagedRulesetsOwaspSqli": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "vercel:index/FirewallConfigManagedRulesetsOwaspXss:FirewallConfigManagedRulesetsOwaspXss": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "vercel:index/FirewallConfigRules:FirewallConfigRules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/FirewallConfigRulesRule:FirewallConfigRulesRule"
                    }
                }
            },
            "type": "object"
        },
        "vercel:index/FirewallConfigRulesRule:FirewallConfigRulesRule": {
            "properties": {
                "action": {
                    "$ref": "#/types/vercel:index/FirewallConfigRulesRuleAction:FirewallConfigRulesRuleAction",
                    "description": "Actions to take when the condition groups match a request\n"
                },
                "active": {
                    "type": "boolean",
                    "description": "Rule is active or disabled\n"
                },
                "conditionGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/FirewallConfigRulesRuleConditionGroup:FirewallConfigRulesRuleConditionGroup"
                    },
                    "description": "Sets of conditions that may match a request\n"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Name to identify the rule\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "conditionGroups",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "conditionGroups",
                        "id",
                        "name"
                    ]
                }
            }
        },
        "vercel:index/FirewallConfigRulesRuleAction:FirewallConfigRulesRuleAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Base action\n"
                },
                "actionDuration": {
                    "type": "string",
                    "description": "Forward persistence of a rule aciton\n"
                },
                "rateLimit": {
                    "$ref": "#/types/vercel:index/FirewallConfigRulesRuleActionRateLimit:FirewallConfigRulesRuleActionRateLimit",
                    "description": "Behavior or a rate limiting action. Required if action is rate*limit\n"
                },
                "redirect": {
                    "$ref": "#/types/vercel:index/FirewallConfigRulesRuleActionRedirect:FirewallConfigRulesRuleActionRedirect",
                    "description": "How to redirect a request. Required if action is redirect\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "vercel:index/FirewallConfigRulesRuleActionRateLimit:FirewallConfigRulesRuleActionRateLimit": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action to take when rate limit is exceeded\n"
                },
                "algo": {
                    "type": "string",
                    "description": "Rate limiting algorithm\n"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Keys used to bucket an individual client\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "number of requests allowed in the window\n"
                },
                "window": {
                    "type": "integer",
                    "description": "Time window in seconds\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "algo",
                "keys",
                "limit",
                "window"
            ]
        },
        "vercel:index/FirewallConfigRulesRuleActionRedirect:FirewallConfigRulesRuleActionRedirect": {
            "properties": {
                "location": {
                    "type": "string"
                },
                "permanent": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "location",
                "permanent"
            ]
        },
        "vercel:index/FirewallConfigRulesRuleConditionGroup:FirewallConfigRulesRuleConditionGroup": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/FirewallConfigRulesRuleConditionGroupCondition:FirewallConfigRulesRuleConditionGroupCondition"
                    },
                    "description": "Conditions that must all match within a group\n"
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "vercel:index/FirewallConfigRulesRuleConditionGroupCondition:FirewallConfigRulesRuleConditionGroupCondition": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key within type to match against\n"
                },
                "neg": {
                    "type": "boolean"
                },
                "op": {
                    "type": "string",
                    "description": "How to comparse type to value\n"
                },
                "type": {
                    "type": "string",
                    "description": "Request key type to match against\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "op",
                "type"
            ]
        },
        "vercel:index/ProjectEnvironment:ProjectEnvironment": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "A comment explaining what the environment variable is for.\n"
                },
                "customEnvironmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of Custom Environments that the Environment Variable should be present on. At least one of `target` or `custom_environment_ids` must be set.\n"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "The git branch of the Environment Variable.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment Variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "sensitive": {
                    "type": "boolean",
                    "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`. At least one of `target` or `custom_environment_ids` must be set.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "customEnvironmentIds",
                        "id",
                        "key",
                        "sensitive",
                        "targets",
                        "value"
                    ]
                }
            }
        },
        "vercel:index/ProjectEnvironmentVariablesVariable:ProjectEnvironmentVariablesVariable": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "A comment explaining what the environment variable is for.\n"
                },
                "customEnvironmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of Custom Environments that the Environment Variable should be present on. At least one of `target` or `custom_environment_ids` must be set.\n"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "The git branch of the Environment Variable.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment Variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "sensitive": {
                    "type": "boolean",
                    "description": "Whether the Environment Variable is sensitive or not.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`. At least one of `target` or `custom_environment_ids` must be set.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "customEnvironmentIds",
                        "id",
                        "key",
                        "sensitive",
                        "targets",
                        "value"
                    ]
                }
            }
        },
        "vercel:index/ProjectGitComments:ProjectGitComments": {
            "properties": {
                "onCommit": {
                    "type": "boolean",
                    "description": "Whether Commit comments are enabled\n"
                },
                "onPullRequest": {
                    "type": "boolean",
                    "description": "Whether Pull Request comments are enabled\n"
                }
            },
            "type": "object",
            "required": [
                "onCommit",
                "onPullRequest"
            ]
        },
        "vercel:index/ProjectGitRepository:ProjectGitRepository": {
            "properties": {
                "deployHooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectGitRepositoryDeployHook:ProjectGitRepositoryDeployHook"
                    },
                    "description": "Deploy hooks are unique URLs that allow you to trigger a deployment of a given branch. See https://vercel.com/docs/deployments/deploy-hooks for full information.\n"
                },
                "productionBranch": {
                    "type": "string",
                    "description": "By default, every commit pushed to the main branch will trigger a Production Deployment instead of the usual Preview Deployment. You can switch to a different branch here.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "The name of the git repository. For example: `vercel/next.js`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The git provider of the repository. Must be either `github`, `gitlab`, or `bitbucket`.\n"
                }
            },
            "type": "object",
            "required": [
                "repo",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "productionBranch",
                        "repo",
                        "type"
                    ]
                }
            }
        },
        "vercel:index/ProjectGitRepositoryDeployHook:ProjectGitRepositoryDeployHook": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the deploy hook.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the deploy hook.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch or commit hash that should be deployed.\n"
                },
                "url": {
                    "type": "string",
                    "description": "A URL that, when a POST request is made to, will trigger a new deployment.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "ref"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "ref",
                        "url"
                    ]
                }
            }
        },
        "vercel:index/ProjectMembersMember:ProjectMembersMember": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The email of the user to add to the project. Exactly one of `user_id`, `email`, or `username` must be specified.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that the user should have in the project. One of 'MEMBER', 'PROJECT*DEVELOPER', or 'PROJECT*VIEWER'.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user to add to the project. Exactly one of `user_id`, `email`, or `username` must be specified.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user to add to the project. Exactly one of `user_id`, `email`, or `username` must be specified.\n"
                }
            },
            "type": "object",
            "required": [
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "email",
                        "role",
                        "userId",
                        "username"
                    ]
                }
            }
        },
        "vercel:index/ProjectOidcTokenConfig:ProjectOidcTokenConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "When true, Vercel issued OpenID Connect (OIDC) tokens will be available on the compute environments. See https://vercel.com/docs/security/secure-backend-access/oidc for more information.\n"
                },
                "issuerMode": {
                    "type": "string",
                    "description": "Configures the URL of the `iss` claim. `team` = `https://oidc.vercel.com/[team_slug]` `global` = `https://oidc.vercel.com`\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "issuerMode"
                    ]
                }
            }
        },
        "vercel:index/ProjectOptionsAllowlist:ProjectOptionsAllowlist": {
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectOptionsAllowlistPath:ProjectOptionsAllowlistPath"
                    },
                    "description": "The allowed paths for the OPTIONS Allowlist. Incoming requests will bypass Deployment Protection if they have the method `OPTIONS` and **start with** one of the path values.\n"
                }
            },
            "type": "object",
            "required": [
                "paths"
            ]
        },
        "vercel:index/ProjectOptionsAllowlistPath:ProjectOptionsAllowlistPath": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "The path prefix to compare with the incoming request path.\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "vercel:index/ProjectPasswordProtection:ProjectPasswordProtection": {
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment environment to protect. Must be one of `standard_protection`, `all_deployments`, or `only_preview_deployments`.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password that visitors must enter to gain access to your Preview Deployments. Drift detection is not possible for this field.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "deploymentType",
                "password"
            ]
        },
        "vercel:index/ProjectResourceConfig:ProjectResourceConfig": {
            "properties": {
                "functionDefaultCpuType": {
                    "type": "string",
                    "description": "The amount of CPU available to your Serverless Functions. Should be one of 'standard_legacy' (0.6vCPU), 'standard' (1vCPU) or 'performance' (1.7vCPUs).\n"
                },
                "functionDefaultTimeout": {
                    "type": "integer",
                    "description": "The default timeout for Serverless Functions.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "functionDefaultCpuType",
                        "functionDefaultTimeout"
                    ]
                }
            }
        },
        "vercel:index/ProjectTrustedIps:ProjectTrustedIps": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectTrustedIpsAddress:ProjectTrustedIpsAddress"
                    },
                    "description": "The allowed IP addressses and CIDR ranges with optional descriptions.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment environment to protect. Must be one of `standard_protection`, `all_deployments`, `only_production_deployments`, or `only_preview_deployments`.\n"
                },
                "protectionMode": {
                    "type": "string",
                    "description": "Whether or not Trusted IPs is optional to access a deployment. Must be either `trusted_ip_required` or `trusted_ip_optional`. `trusted_ip_optional` is only available with Standalone Trusted IPs.\n"
                }
            },
            "type": "object",
            "required": [
                "addresses",
                "deploymentType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addresses",
                        "deploymentType",
                        "protectionMode"
                    ]
                }
            }
        },
        "vercel:index/ProjectTrustedIpsAddress:ProjectTrustedIpsAddress": {
            "properties": {
                "note": {
                    "type": "string",
                    "description": "A description for the value\n"
                },
                "value": {
                    "type": "string",
                    "description": "The address or CIDR range that can access deployments.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "vercel:index/ProjectVercelAuthentication:ProjectVercelAuthentication": {
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment environment to protect. Must be one of `standard_protection`, `all_deployments`, `only_preview_deployments`, or `none`.\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentType"
            ]
        },
        "vercel:index/TeamConfigRemoteCaching:TeamConfigRemoteCaching": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates if Remote Caching is enabled.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "vercel:index/TeamConfigSaml:TeamConfigSaml": {
            "properties": {
                "accessGroupId": {
                    "type": "string",
                    "description": "The ID of the access group to use for the team.\n"
                },
                "enforced": {
                    "type": "boolean",
                    "description": "Indicates if SAML is enforced for the team.\n"
                },
                "roles": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Directory groups to role or access group mappings.\n"
                }
            },
            "type": "object",
            "required": [
                "enforced"
            ]
        },
        "vercel:index/TeamMemberProject:TeamMemberProject": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project that the user should be granted access to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that the user should have in the project.\n"
                }
            },
            "type": "object",
            "required": [
                "projectId",
                "role"
            ]
        },
        "vercel:index/getCustomEnvironmentBranchTracking:getCustomEnvironmentBranchTracking": {
            "properties": {
                "pattern": {
                    "type": "string",
                    "description": "The pattern of the branch name to track.\n"
                },
                "type": {
                    "type": "string",
                    "description": "How a branch name should be matched against the pattern. Must be one of 'startsWith', 'endsWith' or 'equals'.\n"
                }
            },
            "type": "object",
            "required": [
                "pattern",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectEnvironment:getProjectEnvironment": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "A comment explaining what the environment variable is for.\n"
                },
                "customEnvironmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of Custom Environments that the Environment Variable should be present on.\n"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "The git branch of the environment variable.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the environment variable\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the environment variable.\n"
                },
                "sensitive": {
                    "type": "boolean",
                    "description": "Whether the Environment Variable is sensitive or not. Note that the value will be `null` for sensitive environment variables.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the environment variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the environment variable.\n"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "customEnvironmentIds",
                "gitBranch",
                "id",
                "key",
                "sensitive",
                "targets",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectGitComments:getProjectGitComments": {
            "properties": {
                "onCommit": {
                    "type": "boolean",
                    "description": "Whether Commit comments are enabled\n"
                },
                "onPullRequest": {
                    "type": "boolean",
                    "description": "Whether Pull Request comments are enabled\n"
                }
            },
            "type": "object",
            "required": [
                "onCommit",
                "onPullRequest"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectGitRepository:getProjectGitRepository": {
            "properties": {
                "deployHooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/getProjectGitRepositoryDeployHook:getProjectGitRepositoryDeployHook"
                    },
                    "description": "Deploy hooks are unique URLs that allow you to trigger a deployment of a given branch. See https://vercel.com/docs/deployments/deploy-hooks for full information.\n"
                },
                "productionBranch": {
                    "type": "string",
                    "description": "By default, every commit pushed to the main branch will trigger a Production Deployment instead of the usual Preview Deployment. You can switch to a different branch here.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "The name of the git repository. For example: `vercel/next.js`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The git provider of the repository. Must be either `github`, `gitlab`, or `bitbucket`.\n"
                }
            },
            "type": "object",
            "required": [
                "deployHooks",
                "productionBranch",
                "repo",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectGitRepositoryDeployHook:getProjectGitRepositoryDeployHook": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the deploy hook.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the deploy hook.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch or commit hash that should be deployed.\n"
                },
                "url": {
                    "type": "string",
                    "description": "A URL that, when a POST request is made to, will trigger a new deployment.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "ref",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectMembersMember:getProjectMembersMember": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role of the user in the project. One of 'MEMBER', 'PROJECT*DEVELOPER', or 'PROJECT*VIEWER'.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user.\n"
                }
            },
            "type": "object",
            "required": [
                "email",
                "role",
                "userId",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectOidcTokenConfig:getProjectOidcTokenConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "When true, Vercel issued OpenID Connect (OIDC) tokens will be available on the compute environments. See https://vercel.com/docs/security/secure-backend-access/oidc for more information.\n"
                },
                "issuerMode": {
                    "type": "string",
                    "description": "Configures the URL of the `iss` claim. `team` = `https://oidc.vercel.com/[team_slug]` `global` = `https://oidc.vercel.com`\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "issuerMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectOptionsAllowlist:getProjectOptionsAllowlist": {
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/getProjectOptionsAllowlistPath:getProjectOptionsAllowlistPath"
                    },
                    "description": "The allowed paths for the OPTIONS Allowlist. Incoming requests will bypass Deployment Protection if they have the method `OPTIONS` and **start with** one of the path values.\n"
                }
            },
            "type": "object",
            "required": [
                "paths"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectOptionsAllowlistPath:getProjectOptionsAllowlistPath": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectPasswordProtection:getProjectPasswordProtection": {
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment environment that will be protected.\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectResourceConfig:getProjectResourceConfig": {
            "properties": {
                "functionDefaultCpuType": {
                    "type": "string",
                    "description": "The amount of CPU available to your Serverless Functions. Should be one of 'standard_legacy' (0.6vCPU), 'standard' (1vCPU) or 'performance' (1.7vCPUs).\n"
                },
                "functionDefaultTimeout": {
                    "type": "integer",
                    "description": "The default timeout for Serverless Functions.\n"
                }
            },
            "type": "object",
            "required": [
                "functionDefaultCpuType",
                "functionDefaultTimeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectTrustedIps:getProjectTrustedIps": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/getProjectTrustedIpsAddress:getProjectTrustedIpsAddress"
                    },
                    "description": "The allowed IP addressses and CIDR ranges with optional descriptions.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment environment that will be protected.\n"
                },
                "protectionMode": {
                    "type": "string",
                    "description": "Whether or not Trusted IPs is required or optional to access a deployment.\n"
                }
            },
            "type": "object",
            "required": [
                "addresses",
                "deploymentType",
                "protectionMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectTrustedIpsAddress:getProjectTrustedIpsAddress": {
            "properties": {
                "note": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "note",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectVercelAuthentication:getProjectVercelAuthentication": {
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment environment that will be protected.\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getTeamConfigRemoteCaching:getTeamConfigRemoteCaching": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates if Remote Caching is enabled.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getTeamConfigSaml:getTeamConfigSaml": {
            "properties": {
                "accessGroupId": {
                    "type": "string",
                    "description": "The ID of the access group to use for the team.\n"
                },
                "enforced": {
                    "type": "boolean",
                    "description": "Indicates if SAML is enforced for the team.\n"
                },
                "roles": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Directory groups to role or access group mappings.\n"
                }
            },
            "type": "object",
            "required": [
                "accessGroupId",
                "enforced",
                "roles"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getTeamMemberProject:getTeamMemberProject": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project that the user should be granted access to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that the user should have in the project.\n"
                }
            },
            "type": "object",
            "required": [
                "projectId",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the vercel package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiToken": {
                "type": "string",
                "description": "The Vercel API Token to use. This can also be specified with the `VERCEL_API_TOKEN` shell environment variable. Tokens\ncan be created from your [Vercel settings](https://vercel.com/account/tokens).\n",
                "secret": true
            },
            "team": {
                "type": "string",
                "description": "The default Vercel Team to use when creating resources or reading data sources. This can be provided as either a team\nslug, or team ID. The slug and ID are both available from the Team Settings page in the Vercel dashboard.\n"
            }
        },
        "inputProperties": {
            "apiToken": {
                "type": "string",
                "description": "The Vercel API Token to use. This can also be specified with the `VERCEL_API_TOKEN` shell environment variable. Tokens\ncan be created from your [Vercel settings](https://vercel.com/account/tokens).\n",
                "secret": true
            },
            "team": {
                "type": "string",
                "description": "The default Vercel Team to use when creating resources or reading data sources. This can be provided as either a team\nslug, or team ID. The slug and ID are both available from the Team Settings page in the Vercel dashboard.\n"
            }
        }
    },
    "resources": {
        "vercel:index/accessGroup:AccessGroup": {
            "description": "Provides an Access Group Resource.\n\nAccess Groups provide a way to manage groups of Vercel users across projects on your team. They are a set of project role assignations, a combination of Vercel users and the projects they work on.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/accounts/team-members-and-roles/access-groups).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.AccessGroup(\"example\", {name: \"example-access-group\"});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.AccessGroup(\"example\", name=\"example-access-group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.AccessGroup(\"example\", new()\n    {\n        Name = \"example-access-group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.NewAccessGroup(ctx, \"example\", \u0026vercel.AccessGroupArgs{\n\t\t\tName: pulumi.String(\"example-access-group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.AccessGroup;\nimport com.pulumi.vercel.AccessGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AccessGroup(\"example\", AccessGroupArgs.builder()\n            .name(\"example-access-group\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:AccessGroup\n    properties:\n      name: example-access-group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the access_group_id.\n\n```sh\n$ pulumi import vercel:index/accessGroup:AccessGroup example ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\nIf importing to a team, use the team_id and access_group_id.\n\n```sh\n$ pulumi import vercel:index/accessGroup:AccessGroup example team_xxxxxxxxxxxxxxxxxxxxxxxx/ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Access Group\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Access Group should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "name",
                "teamId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Access Group\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Access Group should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessGroup resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Access Group\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Access Group should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/accessGroupProject:AccessGroupProject": {
            "description": "Provides an Access Group Project Resource.\n\nAn Access Group Project resource defines the relationship between a `vercel.AccessGroup` and a `vercel.Project`.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/accounts/team-members-and-roles/access-groups).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.Project(\"example\", {name: \"example-project\"});\nconst exampleAccessGroup = new vercel.AccessGroup(\"example\", {name: \"example-access-group\"});\nconst exampleAccessGroupProject = new vercel.AccessGroupProject(\"example\", {\n    projectId: example.id,\n    accessGroupId: exampleAccessGroup.id,\n    role: \"ADMIN\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.Project(\"example\", name=\"example-project\")\nexample_access_group = vercel.AccessGroup(\"example\", name=\"example-access-group\")\nexample_access_group_project = vercel.AccessGroupProject(\"example\",\n    project_id=example.id,\n    access_group_id=example_access_group.id,\n    role=\"ADMIN\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.Project(\"example\", new()\n    {\n        Name = \"example-project\",\n    });\n\n    var exampleAccessGroup = new Vercel.AccessGroup(\"example\", new()\n    {\n        Name = \"example-access-group\",\n    });\n\n    var exampleAccessGroupProject = new Vercel.AccessGroupProject(\"example\", new()\n    {\n        ProjectId = example.Id,\n        AccessGroupId = exampleAccessGroup.Id,\n        Role = \"ADMIN\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tName: pulumi.String(\"example-project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAccessGroup, err := vercel.NewAccessGroup(ctx, \"example\", \u0026vercel.AccessGroupArgs{\n\t\t\tName: pulumi.String(\"example-access-group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewAccessGroupProject(ctx, \"example\", \u0026vercel.AccessGroupProjectArgs{\n\t\t\tProjectId:     example.ID(),\n\t\t\tAccessGroupId: exampleAccessGroup.ID(),\n\t\t\tRole:          pulumi.String(\"ADMIN\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.AccessGroup;\nimport com.pulumi.vercel.AccessGroupArgs;\nimport com.pulumi.vercel.AccessGroupProject;\nimport com.pulumi.vercel.AccessGroupProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()\n            .name(\"example-project\")\n            .build());\n\n        var exampleAccessGroup = new AccessGroup(\"exampleAccessGroup\", AccessGroupArgs.builder()\n            .name(\"example-access-group\")\n            .build());\n\n        var exampleAccessGroupProject = new AccessGroupProject(\"exampleAccessGroupProject\", AccessGroupProjectArgs.builder()\n            .projectId(example.id())\n            .accessGroupId(exampleAccessGroup.id())\n            .role(\"ADMIN\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:Project\n    properties:\n      name: example-project\n  exampleAccessGroup:\n    type: vercel:AccessGroup\n    name: example\n    properties:\n      name: example-access-group\n  exampleAccessGroupProject:\n    type: vercel:AccessGroupProject\n    name: example\n    properties:\n      projectId: ${example.id}\n      accessGroupId: ${exampleAccessGroup.id}\n      role: ADMIN\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, use the access_group_id and project_id.\n\n```sh\n$ pulumi import vercel:index/accessGroupProject:AccessGroupProject example ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\nIf importing to a team, use the team_id, access_group_id and project_id.\n\n```sh\n$ pulumi import vercel:index/accessGroupProject:AccessGroupProject example team_xxxxxxxxxxxxxxxxxxxxxxxx/ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "accessGroupId": {
                    "type": "string",
                    "description": "The ID of the Access Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID to assign to the access group.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The project role to assign to the access group. Must be either `ADMIN`, `PROJECT_DEVELOPER`, or `PROJECT_VIEWER`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the access group project should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "accessGroupId",
                "projectId",
                "role",
                "teamId"
            ],
            "inputProperties": {
                "accessGroupId": {
                    "type": "string",
                    "description": "The ID of the Access Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID to assign to the access group.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The project role to assign to the access group. Must be either `ADMIN`, `PROJECT_DEVELOPER`, or `PROJECT_VIEWER`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the access group project should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "accessGroupId",
                "projectId",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessGroupProject resources.\n",
                "properties": {
                    "accessGroupId": {
                        "type": "string",
                        "description": "The ID of the Access Group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID to assign to the access group.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The project role to assign to the access group. Must be either `ADMIN`, `PROJECT_DEVELOPER`, or `PROJECT_VIEWER`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the access group project should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/alias:Alias": {
            "description": "Provides an Alias resource.\n\nAn Alias allows a `vercel.Deployment` to be accessed through a different URL.\n",
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The Alias we want to assign to the deployment defined in the URL.\n",
                    "language": {
                        "csharp": {
                            "name": "DeploymentAlias"
                        }
                    }
                },
                "deploymentId": {
                    "type": "string",
                    "description": "The id of the Deployment the Alias should be associated with.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "alias",
                "deploymentId",
                "teamId"
            ],
            "inputProperties": {
                "alias": {
                    "type": "string",
                    "description": "The Alias we want to assign to the deployment defined in the URL.\n",
                    "language": {
                        "csharp": {
                            "name": "DeploymentAlias"
                        }
                    }
                },
                "deploymentId": {
                    "type": "string",
                    "description": "The id of the Deployment the Alias should be associated with.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "alias",
                "deploymentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alias resources.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "The Alias we want to assign to the deployment defined in the URL.\n",
                        "language": {
                            "csharp": {
                                "name": "DeploymentAlias"
                            }
                        }
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "The id of the Deployment the Alias should be associated with.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/attackChallengeMode:AttackChallengeMode": {
            "description": "Provides an Attack Challenge Mode resource.\n\nAttack Challenge Mode prevent malicious traffic by showing a verification challenge for every visitor.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.Project(\"example\", {name: \"example-project\"});\nconst exampleAttackChallengeMode = new vercel.AttackChallengeMode(\"example\", {\n    projectId: example.id,\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.Project(\"example\", name=\"example-project\")\nexample_attack_challenge_mode = vercel.AttackChallengeMode(\"example\",\n    project_id=example.id,\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.Project(\"example\", new()\n    {\n        Name = \"example-project\",\n    });\n\n    var exampleAttackChallengeMode = new Vercel.AttackChallengeMode(\"example\", new()\n    {\n        ProjectId = example.Id,\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tName: pulumi.String(\"example-project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewAttackChallengeMode(ctx, \"example\", \u0026vercel.AttackChallengeModeArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.AttackChallengeMode;\nimport com.pulumi.vercel.AttackChallengeModeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()\n            .name(\"example-project\")\n            .build());\n\n        var exampleAttackChallengeMode = new AttackChallengeMode(\"exampleAttackChallengeMode\", AttackChallengeModeArgs.builder()\n            .projectId(example.id())\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:Project\n    properties:\n      name: example-project\n  exampleAttackChallengeMode:\n    type: vercel:AttackChallengeMode\n    name: example\n    properties:\n      projectId: ${example.id}\n      enabled: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nYou can import via the team_id and project_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n$ pulumi import vercel:index/attackChallengeMode:AttackChallengeMode example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether Attack Challenge Mode is enabled or not.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project to toggle Attack Challenge Mode on.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "enabled",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether Attack Challenge Mode is enabled or not.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project to toggle Attack Challenge Mode on.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AttackChallengeMode resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether Attack Challenge Mode is enabled or not.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project to toggle Attack Challenge Mode on.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/customEnvironment:CustomEnvironment": {
            "description": "Environments help manage the deployment lifecycle on the Vercel platform.\n\nBy default, all teams use three environments when developing their project: Production, Preview, and Development. However, teams can also create custom environments to suit their needs. To learn more about the limits for each plan, see limits.\n\nCustom environments allow you to configure customized, pre-production environments for your project, such as staging or QA, with branch rules that will automatically deploy your branch when the branch name matches the rule. With custom environments you can also attach a domain to your environment, set environment variables, or import environment variables from another environment.\n\nCustom environments are designed as pre-production environments intended for long-running use. This contrasts with regular preview environments, which are designed for creating ephemeral, short-lived deployments.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.Project(\"example\", {name: \"example-project-with-custom-env\"});\nconst exampleCustomEnvironment = new vercel.CustomEnvironment(\"example\", {\n    projectId: example.id,\n    name: \"example-custom-env\",\n    description: \"A description of the custom environment\",\n    branchTracking: {\n        pattern: \"staging-\",\n        type: \"startsWith\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.Project(\"example\", name=\"example-project-with-custom-env\")\nexample_custom_environment = vercel.CustomEnvironment(\"example\",\n    project_id=example.id,\n    name=\"example-custom-env\",\n    description=\"A description of the custom environment\",\n    branch_tracking={\n        \"pattern\": \"staging-\",\n        \"type\": \"startsWith\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.Project(\"example\", new()\n    {\n        Name = \"example-project-with-custom-env\",\n    });\n\n    var exampleCustomEnvironment = new Vercel.CustomEnvironment(\"example\", new()\n    {\n        ProjectId = example.Id,\n        Name = \"example-custom-env\",\n        Description = \"A description of the custom environment\",\n        BranchTracking = new Vercel.Inputs.CustomEnvironmentBranchTrackingArgs\n        {\n            Pattern = \"staging-\",\n            Type = \"startsWith\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tName: pulumi.String(\"example-project-with-custom-env\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewCustomEnvironment(ctx, \"example\", \u0026vercel.CustomEnvironmentArgs{\n\t\t\tProjectId:   example.ID(),\n\t\t\tName:        pulumi.String(\"example-custom-env\"),\n\t\t\tDescription: pulumi.String(\"A description of the custom environment\"),\n\t\t\tBranchTracking: \u0026vercel.CustomEnvironmentBranchTrackingArgs{\n\t\t\t\tPattern: pulumi.String(\"staging-\"),\n\t\t\t\tType:    pulumi.String(\"startsWith\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.CustomEnvironment;\nimport com.pulumi.vercel.CustomEnvironmentArgs;\nimport com.pulumi.vercel.inputs.CustomEnvironmentBranchTrackingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()\n            .name(\"example-project-with-custom-env\")\n            .build());\n\n        var exampleCustomEnvironment = new CustomEnvironment(\"exampleCustomEnvironment\", CustomEnvironmentArgs.builder()\n            .projectId(example.id())\n            .name(\"example-custom-env\")\n            .description(\"A description of the custom environment\")\n            .branchTracking(CustomEnvironmentBranchTrackingArgs.builder()\n                .pattern(\"staging-\")\n                .type(\"startsWith\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:Project\n    properties:\n      name: example-project-with-custom-env\n  exampleCustomEnvironment:\n    type: vercel:CustomEnvironment\n    name: example\n    properties:\n      projectId: ${example.id}\n      name: example-custom-env\n      description: A description of the custom environment\n      branchTracking:\n        pattern: staging-\n        type: startsWith\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the project_id and custom environment name.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n$ pulumi import vercel:index/customEnvironment:CustomEnvironment example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example-custom-env\n```\n\nAlternatively, you can import via the team_id, project_id and environment variable id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n#\n\nNote also, that the value field for sensitive environment variables will be imported as `null`.\n\n```sh\n$ pulumi import vercel:index/customEnvironment:CustomEnvironment example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example-custom-env\n```\n\n",
            "properties": {
                "branchTracking": {
                    "$ref": "#/types/vercel:index/CustomEnvironmentBranchTracking:CustomEnvironmentBranchTracking",
                    "description": "The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of what the environment is.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the existing Vercel Project.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "branchTracking",
                "description",
                "name",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "branchTracking": {
                    "$ref": "#/types/vercel:index/CustomEnvironmentBranchTracking:CustomEnvironmentBranchTracking",
                    "description": "The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of what the environment is.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the existing Vercel Project.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomEnvironment resources.\n",
                "properties": {
                    "branchTracking": {
                        "$ref": "#/types/vercel:index/CustomEnvironmentBranchTracking:CustomEnvironmentBranchTracking",
                        "description": "The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of what the environment is.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the existing Vercel Project.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/deployment:Deployment": {
            "properties": {
                "deleteOnDestroy": {
                    "type": "boolean"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.\n"
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `vercel.Project` resource.\n"
                },
                "files": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of files to be uploaded for the deployment. This should be provided by a `vercel.getProjectDirectory` or `vercel.getFile` data source. Required if `git_source` is not set.\n"
                },
                "pathPrefix": {
                    "type": "string",
                    "description": "If specified then the `path_prefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.\n"
                },
                "production": {
                    "type": "boolean",
                    "description": "true if the deployment is a production deployment, meaning production aliases will be assigned.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID to add the deployment to.\n"
                },
                "projectSettings": {
                    "$ref": "#/types/vercel:index/DeploymentProjectSettings:DeploymentProjectSettings",
                    "description": "Project settings that will be applied to the deployment.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `files` is not set.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "url": {
                    "type": "string",
                    "description": "A unique URL that is automatically generated for a deployment.\n"
                }
            },
            "required": [
                "domains",
                "production",
                "projectId",
                "teamId",
                "url"
            ],
            "inputProperties": {
                "deleteOnDestroy": {
                    "type": "boolean"
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `vercel.Project` resource.\n"
                },
                "files": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of files to be uploaded for the deployment. This should be provided by a `vercel.getProjectDirectory` or `vercel.getFile` data source. Required if `git_source` is not set.\n"
                },
                "pathPrefix": {
                    "type": "string",
                    "description": "If specified then the `path_prefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.\n"
                },
                "production": {
                    "type": "boolean",
                    "description": "true if the deployment is a production deployment, meaning production aliases will be assigned.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID to add the deployment to.\n"
                },
                "projectSettings": {
                    "$ref": "#/types/vercel:index/DeploymentProjectSettings:DeploymentProjectSettings",
                    "description": "Project settings that will be applied to the deployment.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `files` is not set.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Deployment resources.\n",
                "properties": {
                    "deleteOnDestroy": {
                        "type": "boolean"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.\n"
                    },
                    "environment": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `vercel.Project` resource.\n"
                    },
                    "files": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of files to be uploaded for the deployment. This should be provided by a `vercel.getProjectDirectory` or `vercel.getFile` data source. Required if `git_source` is not set.\n"
                    },
                    "pathPrefix": {
                        "type": "string",
                        "description": "If specified then the `path_prefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.\n"
                    },
                    "production": {
                        "type": "boolean",
                        "description": "true if the deployment is a production deployment, meaning production aliases will be assigned.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID to add the deployment to.\n"
                    },
                    "projectSettings": {
                        "$ref": "#/types/vercel:index/DeploymentProjectSettings:DeploymentProjectSettings",
                        "description": "Project settings that will be applied to the deployment.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `files` is not set.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "A unique URL that is automatically generated for a deployment.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/dnsRecord:DnsRecord": {
            "description": "Provides a DNS Record resource.\n\nDNS records are instructions that live in authoritative DNS servers and provide information about a domain.\n\n\u003e The `value` field must be specified on all DNS record types except `SRV`. When using `SRV` DNS records, the `srv` field must be specified.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/custom-domains#dns-records)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst a = new vercel.DnsRecord(\"a\", {\n    domain: \"example.com\",\n    name: \"subdomain\",\n    type: \"A\",\n    ttl: 60,\n    value: \"192.168.0.1\",\n});\nconst aaaa = new vercel.DnsRecord(\"aaaa\", {\n    domain: \"example.com\",\n    name: \"subdomain\",\n    type: \"AAAA\",\n    ttl: 60,\n    value: \"::0\",\n});\nconst alias = new vercel.DnsRecord(\"alias\", {\n    domain: \"example.com\",\n    name: \"subdomain\",\n    type: \"ALIAS\",\n    ttl: 60,\n    value: \"example2.com.\",\n});\nconst caa = new vercel.DnsRecord(\"caa\", {\n    domain: \"example.com\",\n    name: \"subdomain\",\n    type: \"CAA\",\n    ttl: 60,\n    value: \"1 issue \\\"letsencrypt.org\\\"\",\n});\nconst cname = new vercel.DnsRecord(\"cname\", {\n    domain: \"example.com\",\n    name: \"subdomain\",\n    type: \"CNAME\",\n    ttl: 60,\n    value: \"example2.com.\",\n});\nconst mx = new vercel.DnsRecord(\"mx\", {\n    domain: \"example.com\",\n    name: \"subdomain\",\n    type: \"MX\",\n    ttl: 60,\n    mxPriority: 333,\n    value: \"example2.com.\",\n});\nconst srv = new vercel.DnsRecord(\"srv\", {\n    domain: \"example.com\",\n    name: \"subdomain\",\n    type: \"SRV\",\n    ttl: 60,\n    srv: {\n        port: 6000,\n        weight: 60,\n        priority: 127,\n        target: \"example2.com.\",\n    },\n});\nconst txt = new vercel.DnsRecord(\"txt\", {\n    domain: \"example.com\",\n    name: \"subdomain\",\n    type: \"TXT\",\n    ttl: 60,\n    value: \"some text value\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\na = vercel.DnsRecord(\"a\",\n    domain=\"example.com\",\n    name=\"subdomain\",\n    type=\"A\",\n    ttl=60,\n    value=\"192.168.0.1\")\naaaa = vercel.DnsRecord(\"aaaa\",\n    domain=\"example.com\",\n    name=\"subdomain\",\n    type=\"AAAA\",\n    ttl=60,\n    value=\"::0\")\nalias = vercel.DnsRecord(\"alias\",\n    domain=\"example.com\",\n    name=\"subdomain\",\n    type=\"ALIAS\",\n    ttl=60,\n    value=\"example2.com.\")\ncaa = vercel.DnsRecord(\"caa\",\n    domain=\"example.com\",\n    name=\"subdomain\",\n    type=\"CAA\",\n    ttl=60,\n    value=\"1 issue \\\"letsencrypt.org\\\"\")\ncname = vercel.DnsRecord(\"cname\",\n    domain=\"example.com\",\n    name=\"subdomain\",\n    type=\"CNAME\",\n    ttl=60,\n    value=\"example2.com.\")\nmx = vercel.DnsRecord(\"mx\",\n    domain=\"example.com\",\n    name=\"subdomain\",\n    type=\"MX\",\n    ttl=60,\n    mx_priority=333,\n    value=\"example2.com.\")\nsrv = vercel.DnsRecord(\"srv\",\n    domain=\"example.com\",\n    name=\"subdomain\",\n    type=\"SRV\",\n    ttl=60,\n    srv={\n        \"port\": 6000,\n        \"weight\": 60,\n        \"priority\": 127,\n        \"target\": \"example2.com.\",\n    })\ntxt = vercel.DnsRecord(\"txt\",\n    domain=\"example.com\",\n    name=\"subdomain\",\n    type=\"TXT\",\n    ttl=60,\n    value=\"some text value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var a = new Vercel.DnsRecord(\"a\", new()\n    {\n        Domain = \"example.com\",\n        Name = \"subdomain\",\n        Type = \"A\",\n        Ttl = 60,\n        Value = \"192.168.0.1\",\n    });\n\n    var aaaa = new Vercel.DnsRecord(\"aaaa\", new()\n    {\n        Domain = \"example.com\",\n        Name = \"subdomain\",\n        Type = \"AAAA\",\n        Ttl = 60,\n        Value = \"::0\",\n    });\n\n    var @alias = new Vercel.DnsRecord(\"alias\", new()\n    {\n        Domain = \"example.com\",\n        Name = \"subdomain\",\n        Type = \"ALIAS\",\n        Ttl = 60,\n        Value = \"example2.com.\",\n    });\n\n    var caa = new Vercel.DnsRecord(\"caa\", new()\n    {\n        Domain = \"example.com\",\n        Name = \"subdomain\",\n        Type = \"CAA\",\n        Ttl = 60,\n        Value = \"1 issue \\\"letsencrypt.org\\\"\",\n    });\n\n    var cname = new Vercel.DnsRecord(\"cname\", new()\n    {\n        Domain = \"example.com\",\n        Name = \"subdomain\",\n        Type = \"CNAME\",\n        Ttl = 60,\n        Value = \"example2.com.\",\n    });\n\n    var mx = new Vercel.DnsRecord(\"mx\", new()\n    {\n        Domain = \"example.com\",\n        Name = \"subdomain\",\n        Type = \"MX\",\n        Ttl = 60,\n        MxPriority = 333,\n        Value = \"example2.com.\",\n    });\n\n    var srv = new Vercel.DnsRecord(\"srv\", new()\n    {\n        Domain = \"example.com\",\n        Name = \"subdomain\",\n        Type = \"SRV\",\n        Ttl = 60,\n        Srv = new Vercel.Inputs.DnsRecordSrvArgs\n        {\n            Port = 6000,\n            Weight = 60,\n            Priority = 127,\n            Target = \"example2.com.\",\n        },\n    });\n\n    var txt = new Vercel.DnsRecord(\"txt\", new()\n    {\n        Domain = \"example.com\",\n        Name = \"subdomain\",\n        Type = \"TXT\",\n        Ttl = 60,\n        Value = \"some text value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.NewDnsRecord(ctx, \"a\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tName:   pulumi.String(\"subdomain\"),\n\t\t\tType:   pulumi.String(\"A\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tValue:  pulumi.String(\"192.168.0.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"aaaa\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tName:   pulumi.String(\"subdomain\"),\n\t\t\tType:   pulumi.String(\"AAAA\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tValue:  pulumi.String(\"::0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"alias\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tName:   pulumi.String(\"subdomain\"),\n\t\t\tType:   pulumi.String(\"ALIAS\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tValue:  pulumi.String(\"example2.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"caa\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tName:   pulumi.String(\"subdomain\"),\n\t\t\tType:   pulumi.String(\"CAA\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tValue:  pulumi.String(\"1 issue \\\"letsencrypt.org\\\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"cname\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tName:   pulumi.String(\"subdomain\"),\n\t\t\tType:   pulumi.String(\"CNAME\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tValue:  pulumi.String(\"example2.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"mx\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain:     pulumi.String(\"example.com\"),\n\t\t\tName:       pulumi.String(\"subdomain\"),\n\t\t\tType:       pulumi.String(\"MX\"),\n\t\t\tTtl:        pulumi.Int(60),\n\t\t\tMxPriority: pulumi.Int(333),\n\t\t\tValue:      pulumi.String(\"example2.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"srv\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tName:   pulumi.String(\"subdomain\"),\n\t\t\tType:   pulumi.String(\"SRV\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tSrv: \u0026vercel.DnsRecordSrvArgs{\n\t\t\t\tPort:     pulumi.Int(6000),\n\t\t\t\tWeight:   pulumi.Int(60),\n\t\t\t\tPriority: pulumi.Int(127),\n\t\t\t\tTarget:   pulumi.String(\"example2.com.\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"txt\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tName:   pulumi.String(\"subdomain\"),\n\t\t\tType:   pulumi.String(\"TXT\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tValue:  pulumi.String(\"some text value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.DnsRecord;\nimport com.pulumi.vercel.DnsRecordArgs;\nimport com.pulumi.vercel.inputs.DnsRecordSrvArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var a = new DnsRecord(\"a\", DnsRecordArgs.builder()\n            .domain(\"example.com\")\n            .name(\"subdomain\")\n            .type(\"A\")\n            .ttl(60)\n            .value(\"192.168.0.1\")\n            .build());\n\n        var aaaa = new DnsRecord(\"aaaa\", DnsRecordArgs.builder()\n            .domain(\"example.com\")\n            .name(\"subdomain\")\n            .type(\"AAAA\")\n            .ttl(60)\n            .value(\"::0\")\n            .build());\n\n        var alias = new DnsRecord(\"alias\", DnsRecordArgs.builder()\n            .domain(\"example.com\")\n            .name(\"subdomain\")\n            .type(\"ALIAS\")\n            .ttl(60)\n            .value(\"example2.com.\")\n            .build());\n\n        var caa = new DnsRecord(\"caa\", DnsRecordArgs.builder()\n            .domain(\"example.com\")\n            .name(\"subdomain\")\n            .type(\"CAA\")\n            .ttl(60)\n            .value(\"1 issue \\\"letsencrypt.org\\\"\")\n            .build());\n\n        var cname = new DnsRecord(\"cname\", DnsRecordArgs.builder()\n            .domain(\"example.com\")\n            .name(\"subdomain\")\n            .type(\"CNAME\")\n            .ttl(60)\n            .value(\"example2.com.\")\n            .build());\n\n        var mx = new DnsRecord(\"mx\", DnsRecordArgs.builder()\n            .domain(\"example.com\")\n            .name(\"subdomain\")\n            .type(\"MX\")\n            .ttl(60)\n            .mxPriority(333)\n            .value(\"example2.com.\")\n            .build());\n\n        var srv = new DnsRecord(\"srv\", DnsRecordArgs.builder()\n            .domain(\"example.com\")\n            .name(\"subdomain\")\n            .type(\"SRV\")\n            .ttl(60)\n            .srv(DnsRecordSrvArgs.builder()\n                .port(6000)\n                .weight(60)\n                .priority(127)\n                .target(\"example2.com.\")\n                .build())\n            .build());\n\n        var txt = new DnsRecord(\"txt\", DnsRecordArgs.builder()\n            .domain(\"example.com\")\n            .name(\"subdomain\")\n            .type(\"TXT\")\n            .ttl(60)\n            .value(\"some text value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  a:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      name: subdomain\n      type: A\n      ttl: 60\n      value: 192.168.0.1\n  aaaa:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      name: subdomain\n      type: AAAA\n      ttl: 60\n      value: ::0\n  alias:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      name: subdomain\n      type: ALIAS\n      ttl: 60\n      value: example2.com.\n  caa:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      name: subdomain\n      type: CAA\n      ttl: 60\n      value: 1 issue \"letsencrypt.org\"\n  cname:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      name: subdomain\n      type: CNAME\n      ttl: 60\n      value: example2.com.\n  mx:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      name: subdomain\n      type: MX\n      ttl: 60\n      mxPriority: 333\n      value: example2.com.\n  srv:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      name: subdomain\n      type: SRV\n      ttl: 60\n      srv:\n        port: 6000\n        weight: 60\n        priority: 127\n        target: example2.com.\n  txt:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      name: subdomain\n      type: TXT\n      ttl: 60\n      value: some text value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the record id.\n\n- record_id can be taken from the network tab inside developer tools, while you are on the domains page,\n\nor can be queried from the Vercel API directly (https://vercel.com/docs/rest-api/endpoints/dns#list-existing-dns-records).\n\n```sh\n$ pulumi import vercel:index/dnsRecord:DnsRecord example rec_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\nAlternatively, you can import via the team_id and record_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- record_id can be taken from the network tab inside developer tools, while you are on the domains page,\n\nor can be queried from the Vercel API directly (https://vercel.com/docs/rest-api/endpoints/dns#list-existing-dns-records).\n\n```sh\n$ pulumi import vercel:index/dnsRecord:DnsRecord example team_xxxxxxxxxxxxxxxxxxxxxxxx/rec_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "A comment explaining what the DNS record is for.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain name, or zone, that the DNS record should be created beneath.\n"
                },
                "mxPriority": {
                    "type": "integer",
                    "description": "The priority of the MX record. The priority specifies the sequence that an email server receives emails. A smaller value indicates a higher priority.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The subdomain name of the record. This should be an empty string if the rercord is for the root domain.\n"
                },
                "srv": {
                    "$ref": "#/types/vercel:index/DnsRecordSrv:DnsRecordSrv",
                    "description": "Settings for an SRV record.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID that the domain and DNS records belong to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The TTL value in seconds. Must be a number between 60 and 2147483647. If unspecified, it will default to 60 seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of DNS record. Available types: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `MX`, `NS`, `SRV`, `TXT`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the DNS record. The format depends on the 'type' property.\nFor an 'A' record, this should be a valid IPv4 address.\nFor an 'AAAA' record, this should be an IPv6 address.\nFor 'ALIAS' records, this should be a hostname.\nFor 'CAA' records, this should specify specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.\nFor 'CNAME' records, this should be a different domain name.\nFor 'MX' records, this should specify the mail server responsible for accepting messages on behalf of the domain name.\nFor 'TXT' records, this can contain arbitrary text.\n"
                }
            },
            "required": [
                "comment",
                "domain",
                "name",
                "teamId",
                "ttl",
                "type"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "A comment explaining what the DNS record is for.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain name, or zone, that the DNS record should be created beneath.\n"
                },
                "mxPriority": {
                    "type": "integer",
                    "description": "The priority of the MX record. The priority specifies the sequence that an email server receives emails. A smaller value indicates a higher priority.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The subdomain name of the record. This should be an empty string if the rercord is for the root domain.\n"
                },
                "srv": {
                    "$ref": "#/types/vercel:index/DnsRecordSrv:DnsRecordSrv",
                    "description": "Settings for an SRV record.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID that the domain and DNS records belong to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The TTL value in seconds. Must be a number between 60 and 2147483647. If unspecified, it will default to 60 seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of DNS record. Available types: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `MX`, `NS`, `SRV`, `TXT`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the DNS record. The format depends on the 'type' property.\nFor an 'A' record, this should be a valid IPv4 address.\nFor an 'AAAA' record, this should be an IPv6 address.\nFor 'ALIAS' records, this should be a hostname.\nFor 'CAA' records, this should specify specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.\nFor 'CNAME' records, this should be a different domain name.\nFor 'MX' records, this should specify the mail server responsible for accepting messages on behalf of the domain name.\nFor 'TXT' records, this can contain arbitrary text.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsRecord resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "A comment explaining what the DNS record is for.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain name, or zone, that the DNS record should be created beneath.\n"
                    },
                    "mxPriority": {
                        "type": "integer",
                        "description": "The priority of the MX record. The priority specifies the sequence that an email server receives emails. A smaller value indicates a higher priority.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The subdomain name of the record. This should be an empty string if the rercord is for the root domain.\n"
                    },
                    "srv": {
                        "$ref": "#/types/vercel:index/DnsRecordSrv:DnsRecordSrv",
                        "description": "Settings for an SRV record.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID that the domain and DNS records belong to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The TTL value in seconds. Must be a number between 60 and 2147483647. If unspecified, it will default to 60 seconds.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of DNS record. Available types: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `MX`, `NS`, `SRV`, `TXT`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the DNS record. The format depends on the 'type' property.\nFor an 'A' record, this should be a valid IPv4 address.\nFor an 'AAAA' record, this should be an IPv6 address.\nFor 'ALIAS' records, this should be a hostname.\nFor 'CAA' records, this should specify specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.\nFor 'CNAME' records, this should be a different domain name.\nFor 'MX' records, this should specify the mail server responsible for accepting messages on behalf of the domain name.\nFor 'TXT' records, this can contain arbitrary text.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/edgeConfig:EdgeConfig": {
            "description": "Provides an Edge Config resource.\n\nAn Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.EdgeConfig(\"example\", {name: \"example\"});\nconst exampleProject = new vercel.Project(\"example\", {name: \"edge-config-example\"});\nconst exampleEdgeConfigToken = new vercel.EdgeConfigToken(\"example\", {\n    edgeConfigId: example.id,\n    label: \"example token\",\n});\nconst exampleProjectEnvironmentVariable = new vercel.ProjectEnvironmentVariable(\"example\", {\n    projectId: exampleProject.id,\n    targets: [\n        \"production\",\n        \"preview\",\n        \"development\",\n    ],\n    key: \"EDGE_CONFIG\",\n    value: exampleEdgeConfigToken.connectionString,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.EdgeConfig(\"example\", name=\"example\")\nexample_project = vercel.Project(\"example\", name=\"edge-config-example\")\nexample_edge_config_token = vercel.EdgeConfigToken(\"example\",\n    edge_config_id=example.id,\n    label=\"example token\")\nexample_project_environment_variable = vercel.ProjectEnvironmentVariable(\"example\",\n    project_id=example_project.id,\n    targets=[\n        \"production\",\n        \"preview\",\n        \"development\",\n    ],\n    key=\"EDGE_CONFIG\",\n    value=example_edge_config_token.connection_string)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.EdgeConfig(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleProject = new Vercel.Project(\"example\", new()\n    {\n        Name = \"edge-config-example\",\n    });\n\n    var exampleEdgeConfigToken = new Vercel.EdgeConfigToken(\"example\", new()\n    {\n        EdgeConfigId = example.Id,\n        Label = \"example token\",\n    });\n\n    var exampleProjectEnvironmentVariable = new Vercel.ProjectEnvironmentVariable(\"example\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Targets = new[]\n        {\n            \"production\",\n            \"preview\",\n            \"development\",\n        },\n        Key = \"EDGE_CONFIG\",\n        Value = exampleEdgeConfigToken.ConnectionString,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.NewEdgeConfig(ctx, \"example\", \u0026vercel.EdgeConfigArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleProject, err := vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tName: pulumi.String(\"edge-config-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEdgeConfigToken, err := vercel.NewEdgeConfigToken(ctx, \"example\", \u0026vercel.EdgeConfigTokenArgs{\n\t\t\tEdgeConfigId: example.ID(),\n\t\t\tLabel:        pulumi.String(\"example token\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewProjectEnvironmentVariable(ctx, \"example\", \u0026vercel.ProjectEnvironmentVariableArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t\tpulumi.String(\"preview\"),\n\t\t\t\tpulumi.String(\"development\"),\n\t\t\t},\n\t\t\tKey:   pulumi.String(\"EDGE_CONFIG\"),\n\t\t\tValue: exampleEdgeConfigToken.ConnectionString,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.EdgeConfig;\nimport com.pulumi.vercel.EdgeConfigArgs;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.EdgeConfigToken;\nimport com.pulumi.vercel.EdgeConfigTokenArgs;\nimport com.pulumi.vercel.ProjectEnvironmentVariable;\nimport com.pulumi.vercel.ProjectEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new EdgeConfig(\"example\", EdgeConfigArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()\n            .name(\"edge-config-example\")\n            .build());\n\n        var exampleEdgeConfigToken = new EdgeConfigToken(\"exampleEdgeConfigToken\", EdgeConfigTokenArgs.builder()\n            .edgeConfigId(example.id())\n            .label(\"example token\")\n            .build());\n\n        var exampleProjectEnvironmentVariable = new ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", ProjectEnvironmentVariableArgs.builder()\n            .projectId(exampleProject.id())\n            .targets(            \n                \"production\",\n                \"preview\",\n                \"development\")\n            .key(\"EDGE_CONFIG\")\n            .value(exampleEdgeConfigToken.connectionString())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:EdgeConfig\n    properties:\n      name: example\n  exampleProject:\n    type: vercel:Project\n    name: example\n    properties:\n      name: edge-config-example\n  exampleEdgeConfigToken:\n    type: vercel:EdgeConfigToken\n    name: example\n    properties:\n      edgeConfigId: ${example.id}\n      label: example token\n  exampleProjectEnvironmentVariable:\n    type: vercel:ProjectEnvironmentVariable\n    name: example\n    properties:\n      projectId: ${exampleProject.id}\n      targets:\n        - production\n        - preview\n        - development\n      key: EDGE_CONFIG\n      value: ${exampleEdgeConfigToken.connectionString}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the edge config id.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n```sh\n$ pulumi import vercel:index/edgeConfig:EdgeConfig example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\nAlternatively, you can import via the team_id and edge_config_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n```sh\n$ pulumi import vercel:index/edgeConfig:EdgeConfig example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name/slug of the Edge Config.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "name",
                "teamId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name/slug of the Edge Config.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EdgeConfig resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name/slug of the Edge Config.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/edgeConfigItem:EdgeConfigItem": {
            "description": "Provides an Edge Config Item.\n\nAn Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.\n\nAn Edge Config Item is a value within an Edge Config.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.EdgeConfig(\"example\", {name: \"example\"});\nconst exampleEdgeConfigItem = new vercel.EdgeConfigItem(\"example\", {\n    edgeConfigId: example.id,\n    key: \"foobar\",\n    value: \"baz\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.EdgeConfig(\"example\", name=\"example\")\nexample_edge_config_item = vercel.EdgeConfigItem(\"example\",\n    edge_config_id=example.id,\n    key=\"foobar\",\n    value=\"baz\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.EdgeConfig(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleEdgeConfigItem = new Vercel.EdgeConfigItem(\"example\", new()\n    {\n        EdgeConfigId = example.Id,\n        Key = \"foobar\",\n        Value = \"baz\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.NewEdgeConfig(ctx, \"example\", \u0026vercel.EdgeConfigArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewEdgeConfigItem(ctx, \"example\", \u0026vercel.EdgeConfigItemArgs{\n\t\t\tEdgeConfigId: example.ID(),\n\t\t\tKey:          pulumi.String(\"foobar\"),\n\t\t\tValue:        pulumi.String(\"baz\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.EdgeConfig;\nimport com.pulumi.vercel.EdgeConfigArgs;\nimport com.pulumi.vercel.EdgeConfigItem;\nimport com.pulumi.vercel.EdgeConfigItemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new EdgeConfig(\"example\", EdgeConfigArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var exampleEdgeConfigItem = new EdgeConfigItem(\"exampleEdgeConfigItem\", EdgeConfigItemArgs.builder()\n            .edgeConfigId(example.id())\n            .key(\"foobar\")\n            .value(\"baz\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:EdgeConfig\n    properties:\n      name: example\n  exampleEdgeConfigItem:\n    type: vercel:EdgeConfigItem\n    name: example\n    properties:\n      edgeConfigId: ${example.id}\n      key: foobar\n      value: baz\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the edge config id and the key of the item to import.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n- key is the key of teh item to import.\n\n```sh\n$ pulumi import vercel:index/edgeConfigItem:EdgeConfigItem example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example_key\n```\n\nAlternatively, you can import via the team_id, edge_config_id and the key of the item to import.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n- key is the key of the item to import.\n\n```sh\n$ pulumi import vercel:index/edgeConfigItem:EdgeConfigItem example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example_key\n```\n\n",
            "properties": {
                "edgeConfigId": {
                    "type": "string",
                    "description": "The ID of the Edge Config store.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the key you want to add to or update within your Edge Config.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value you want to assign to the key.\n"
                }
            },
            "required": [
                "edgeConfigId",
                "key",
                "teamId",
                "value"
            ],
            "inputProperties": {
                "edgeConfigId": {
                    "type": "string",
                    "description": "The ID of the Edge Config store.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the key you want to add to or update within your Edge Config.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value you want to assign to the key.\n"
                }
            },
            "requiredInputs": [
                "edgeConfigId",
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EdgeConfigItem resources.\n",
                "properties": {
                    "edgeConfigId": {
                        "type": "string",
                        "description": "The ID of the Edge Config store.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the key you want to add to or update within your Edge Config.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value you want to assign to the key.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/edgeConfigSchema:EdgeConfigSchema": {
            "description": "An Edge Config Schema provides an existing Edge Config with a JSON schema. Use schema protection to prevent unexpected updates that may cause bugs or downtime.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  example:\n    type: vercel:EdgeConfig\n    properties:\n      name: example\n  exampleEdgeConfigSchema:\n    type: vercel:EdgeConfigSchema\n    name: example\n    properties:\n      id: ${example.id}\n      definition: |\n        {\n          \"title\": \"Greeting\",\n          \"type\": \"object\",\n          \"properties\": {\n            \"greeting\": {\n              \"description\": \"A friendly greeting\",\n              \"type\": \"string\"\n            }\n          }\n        }\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the edge config id.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n```sh\n$ pulumi import vercel:index/edgeConfigSchema:EdgeConfigSchema example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\nAlternatively, you can import via the team_id and edge_config_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n```sh\n$ pulumi import vercel:index/edgeConfigSchema:EdgeConfigSchema example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "definition": {
                    "type": "string",
                    "description": "A JSON schema that will be used to validate data in the Edge Config.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "definition",
                "teamId"
            ],
            "inputProperties": {
                "definition": {
                    "type": "string",
                    "description": "A JSON schema that will be used to validate data in the Edge Config.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "definition"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EdgeConfigSchema resources.\n",
                "properties": {
                    "definition": {
                        "type": "string",
                        "description": "A JSON schema that will be used to validate data in the Edge Config.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/edgeConfigToken:EdgeConfigToken": {
            "description": "Provides an Edge Config Token resource.\n\nAn Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.\n\nAn Edge Config token is used to authenticate against an Edge Config's endpoint.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.EdgeConfig(\"example\", {name: \"example\"});\nconst exampleProject = new vercel.Project(\"example\", {name: \"edge-config-example\"});\nconst exampleEdgeConfigToken = new vercel.EdgeConfigToken(\"example\", {\n    edgeConfigId: example.id,\n    label: \"example token\",\n});\nconst exampleProjectEnvironmentVariable = new vercel.ProjectEnvironmentVariable(\"example\", {\n    projectId: exampleProject.id,\n    targets: [\n        \"production\",\n        \"preview\",\n        \"development\",\n    ],\n    key: \"EDGE_CONFIG\",\n    value: exampleEdgeConfigToken.connectionString,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.EdgeConfig(\"example\", name=\"example\")\nexample_project = vercel.Project(\"example\", name=\"edge-config-example\")\nexample_edge_config_token = vercel.EdgeConfigToken(\"example\",\n    edge_config_id=example.id,\n    label=\"example token\")\nexample_project_environment_variable = vercel.ProjectEnvironmentVariable(\"example\",\n    project_id=example_project.id,\n    targets=[\n        \"production\",\n        \"preview\",\n        \"development\",\n    ],\n    key=\"EDGE_CONFIG\",\n    value=example_edge_config_token.connection_string)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.EdgeConfig(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleProject = new Vercel.Project(\"example\", new()\n    {\n        Name = \"edge-config-example\",\n    });\n\n    var exampleEdgeConfigToken = new Vercel.EdgeConfigToken(\"example\", new()\n    {\n        EdgeConfigId = example.Id,\n        Label = \"example token\",\n    });\n\n    var exampleProjectEnvironmentVariable = new Vercel.ProjectEnvironmentVariable(\"example\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Targets = new[]\n        {\n            \"production\",\n            \"preview\",\n            \"development\",\n        },\n        Key = \"EDGE_CONFIG\",\n        Value = exampleEdgeConfigToken.ConnectionString,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.NewEdgeConfig(ctx, \"example\", \u0026vercel.EdgeConfigArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleProject, err := vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tName: pulumi.String(\"edge-config-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEdgeConfigToken, err := vercel.NewEdgeConfigToken(ctx, \"example\", \u0026vercel.EdgeConfigTokenArgs{\n\t\t\tEdgeConfigId: example.ID(),\n\t\t\tLabel:        pulumi.String(\"example token\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewProjectEnvironmentVariable(ctx, \"example\", \u0026vercel.ProjectEnvironmentVariableArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t\tpulumi.String(\"preview\"),\n\t\t\t\tpulumi.String(\"development\"),\n\t\t\t},\n\t\t\tKey:   pulumi.String(\"EDGE_CONFIG\"),\n\t\t\tValue: exampleEdgeConfigToken.ConnectionString,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.EdgeConfig;\nimport com.pulumi.vercel.EdgeConfigArgs;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.EdgeConfigToken;\nimport com.pulumi.vercel.EdgeConfigTokenArgs;\nimport com.pulumi.vercel.ProjectEnvironmentVariable;\nimport com.pulumi.vercel.ProjectEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new EdgeConfig(\"example\", EdgeConfigArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()\n            .name(\"edge-config-example\")\n            .build());\n\n        var exampleEdgeConfigToken = new EdgeConfigToken(\"exampleEdgeConfigToken\", EdgeConfigTokenArgs.builder()\n            .edgeConfigId(example.id())\n            .label(\"example token\")\n            .build());\n\n        var exampleProjectEnvironmentVariable = new ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", ProjectEnvironmentVariableArgs.builder()\n            .projectId(exampleProject.id())\n            .targets(            \n                \"production\",\n                \"preview\",\n                \"development\")\n            .key(\"EDGE_CONFIG\")\n            .value(exampleEdgeConfigToken.connectionString())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:EdgeConfig\n    properties:\n      name: example\n  exampleProject:\n    type: vercel:Project\n    name: example\n    properties:\n      name: edge-config-example\n  exampleEdgeConfigToken:\n    type: vercel:EdgeConfigToken\n    name: example\n    properties:\n      edgeConfigId: ${example.id}\n      label: example token\n  exampleProjectEnvironmentVariable:\n    type: vercel:ProjectEnvironmentVariable\n    name: example\n    properties:\n      projectId: ${exampleProject.id}\n      targets:\n        - production\n        - preview\n        - development\n      key: EDGE_CONFIG\n      value: ${exampleEdgeConfigToken.connectionString}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the edge config id and token value.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n- token can be found in the Vercel UI under Storage, Edge Config, the specific Edge Config, Tokens.\n\n```sh\n$ pulumi import vercel:index/edgeConfigToken:EdgeConfigToken example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\nAlternatively, you can import via the team_id and edge_config_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.\n\n- token can be found in the Vercel UI under Storage, Edge Config, the specific Edge Config, Tokens.\n\n```sh\n$ pulumi import vercel:index/edgeConfigToken:EdgeConfigToken example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\n",
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "A connection string is a URL that connects a project to an Edge Config. The variable can be called anything, but our Edge Config client SDK will search for process.env.EDGE_CONFIG by default.\n"
                },
                "edgeConfigId": {
                    "type": "string",
                    "description": "The ID of the Edge Config store.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Edge Config Token.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.\n"
                }
            },
            "required": [
                "connectionString",
                "edgeConfigId",
                "label",
                "teamId",
                "token"
            ],
            "inputProperties": {
                "edgeConfigId": {
                    "type": "string",
                    "description": "The ID of the Edge Config store.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Edge Config Token.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "edgeConfigId",
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EdgeConfigToken resources.\n",
                "properties": {
                    "connectionString": {
                        "type": "string",
                        "description": "A connection string is a URL that connects a project to an Edge Config. The variable can be called anything, but our Edge Config client SDK will search for process.env.EDGE_CONFIG by default.\n"
                    },
                    "edgeConfigId": {
                        "type": "string",
                        "description": "The ID of the Edge Config store.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Edge Config Token.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/firewallConfig:FirewallConfig": {
            "description": "Define Custom Rules to shape the way your traffic is handled by the Vercel Edge Network.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.FirewallConfig;\nimport com.pulumi.vercel.FirewallConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()\n            .name(\"firewall-config-example\")\n            .build());\n\n        var exampleFirewallConfig = new FirewallConfig(\"exampleFirewallConfig\", FirewallConfigArgs.builder()\n            .projectId(example.id())\n            .rules(FirewallConfigRulesArgs.builder()\n                .rules(                \n                    FirewallConfigRulesRuleArgs.builder()\n                        .name(\"Bypass Known request\")\n                        .description(\"Bypass requests using internal bearer tokens\")\n                        .conditionGroups(                        \n                            FirewallConfigRulesRuleConditionGroupArgs.builder()\n                                .conditions(FirewallConfigRulesRuleConditionGroupConditionArgs.builder()\n                                    .type(\"header\")\n                                    .key(\"Authorization\")\n                                    .op(\"eq\")\n                                    .value(\"Bearer internaltoken\")\n                                    .build())\n                                .build(),\n                            FirewallConfigRulesRuleConditionGroupArgs.builder()\n                                .conditions(FirewallConfigRulesRuleConditionGroupConditionArgs.builder()\n                                    .type(\"header\")\n                                    .key(\"Authorization\")\n                                    .op(\"eq\")\n                                    .value(\"Bearer internaltoken2\")\n                                    .build())\n                                .build())\n                        .action(FirewallConfigRulesRuleActionArgs.builder()\n                            .action(\"bypass\")\n                            .build())\n                        .build(),\n                    FirewallConfigRulesRuleArgs.builder()\n                        .name(\"Challenge curl\")\n                        .description(\"Challenge user agents containing 'curl'\")\n                        .conditionGroups(FirewallConfigRulesRuleConditionGroupArgs.builder()\n                            .conditions(FirewallConfigRulesRuleConditionGroupConditionArgs.builder()\n                                .type(\"user_agent\")\n                                .op(\"sub\")\n                                .value(\"curl\")\n                                .build())\n                            .build())\n                        .action(FirewallConfigRulesRuleActionArgs.builder()\n                            .action(\"challenge\")\n                            .build())\n                        .build(),\n                    FirewallConfigRulesRuleArgs.builder()\n                        .name(\"Deny cookieless requests\")\n                        .description(\"requests to /api that are missing a session cookie\")\n                        .conditionGroups(FirewallConfigRulesRuleConditionGroupArgs.builder()\n                            .conditions(                            \n                                FirewallConfigRulesRuleConditionGroupConditionArgs.builder()\n                                    .type(\"path\")\n                                    .op(\"eq\")\n                                    .value(\"/api\")\n                                    .build(),\n                                FirewallConfigRulesRuleConditionGroupConditionArgs.builder()\n                                    .type(\"cookie\")\n                                    .key(\"_session\")\n                                    .neg(true)\n                                    .op(\"ex\")\n                                    .build())\n                            .build())\n                        .action(FirewallConfigRulesRuleActionArgs.builder()\n                            .action(\"challenge\")\n                            .build())\n                        .build(),\n                    FirewallConfigRulesRuleArgs.builder()\n                        .name(\"Rate limit API\")\n                        .description(\"apply ratelimit to requests under /api\")\n                        .conditionGroups(FirewallConfigRulesRuleConditionGroupArgs.builder()\n                            .conditions(FirewallConfigRulesRuleConditionGroupConditionArgs.builder()\n                                .type(\"path\")\n                                .op(\"pre\")\n                                .value(\"/api\")\n                                .build())\n                            .build())\n                        .action(FirewallConfigRulesRuleActionArgs.builder()\n                            .action(\"rate_limit\")\n                            .rate_limit(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                            .action_duration(\"5m\")\n                            .build())\n                        .build())\n                .build())\n            .build());\n\n        var managedExample = new Project(\"managedExample\", ProjectArgs.builder()\n            .name(\"firewall-managed-rule-example\")\n            .build());\n\n        var managed = new FirewallConfig(\"managed\", FirewallConfigArgs.builder()\n            .projectId(managedVercelProject.id())\n            .managedRulesets(FirewallConfigManagedRulesetsArgs.builder()\n                .owasp(FirewallConfigManagedRulesetsOwaspArgs.builder()\n                    .xss(FirewallConfigManagedRulesetsOwaspXssArgs.builder()\n                        .action(\"deny\")\n                        .build())\n                    .sqli(FirewallConfigManagedRulesetsOwaspSqliArgs.builder()\n                        .action(\"deny\")\n                        .build())\n                    .rce(FirewallConfigManagedRulesetsOwaspRceArgs.builder()\n                        .action(\"deny\")\n                        .build())\n                    .php(FirewallConfigManagedRulesetsOwaspPhpArgs.builder()\n                        .action(\"deny\")\n                        .build())\n                    .java(FirewallConfigManagedRulesetsOwaspJavaArgs.builder()\n                        .action(\"deny\")\n                        .build())\n                    .lfi(FirewallConfigManagedRulesetsOwaspLfiArgs.builder()\n                        .action(\"deny\")\n                        .build())\n                    .rfi(FirewallConfigManagedRulesetsOwaspRfiArgs.builder()\n                        .action(\"deny\")\n                        .build())\n                    .gen(FirewallConfigManagedRulesetsOwaspGenArgs.builder()\n                        .action(\"deny\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        var ipExample = new Project(\"ipExample\", ProjectArgs.builder()\n            .name(\"firewall-ip-blocking-example\")\n            .build());\n\n        var ip_blocking = new FirewallConfig(\"ip-blocking\", FirewallConfigArgs.builder()\n            .projectId(ipExample.id())\n            .ipRules(FirewallConfigIpRulesArgs.builder()\n                .rules(                \n                    FirewallConfigIpRulesRuleArgs.builder()\n                        .action(\"deny\")\n                        .ip(\"51.85.0.0/16\")\n                        .hostname(\"*\")\n                        .build(),\n                    FirewallConfigIpRulesRuleArgs.builder()\n                        .action(\"challenge\")\n                        .ip(\"1.2.3.4\")\n                        .hostname(\"example.com\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:Project\n    properties:\n      name: firewall-config-example\n  exampleFirewallConfig:\n    type: vercel:FirewallConfig\n    name: example\n    properties:\n      projectId: ${example.id}\n      rules:\n        - rules:\n            - name: Bypass Known request\n              description: Bypass requests using internal bearer tokens\n              conditionGroups:\n                - conditions:\n                    - type: header\n                      key: Authorization\n                      op: eq\n                      value: Bearer internaltoken\n                - conditions:\n                    - type: header\n                      key: Authorization\n                      op: eq\n                      value: Bearer internaltoken2\n              action:\n                action: bypass\n            - name: Challenge curl\n              description: Challenge user agents containing 'curl'\n              conditionGroups:\n                - conditions:\n                    - type: user_agent\n                      op: sub\n                      value: curl\n              action:\n                action: challenge\n            - name: Deny cookieless requests\n              description: requests to /api that are missing a session cookie\n              conditionGroups:\n                - conditions:\n                    - type: path\n                      op: eq\n                      value: /api\n                    - type: cookie\n                      key: _session\n                      neg: true\n                      op: ex\n              action:\n                action: challenge\n            - name: Rate limit API\n              description: apply ratelimit to requests under /api\n              conditionGroups:\n                - conditions:\n                    - type: path\n                      op: pre\n                      value: /api\n              action:\n                action: rate_limit\n                rate_limit:\n                  limit: 100\n                  window: 300\n                  keys:\n                    - ip\n                    - ja4\n                  algo: fixed_window\n                  action: deny\n                action_duration: 5m\n  managedExample:\n    type: vercel:Project\n    name: managed_example\n    properties:\n      name: firewall-managed-rule-example\n  managed:\n    type: vercel:FirewallConfig\n    properties:\n      projectId: ${managedVercelProject.id}\n      managedRulesets:\n        - owasp:\n            - xss:\n                action: deny\n              sqli:\n                action: deny\n              rce:\n                action: deny\n              php:\n                action: deny\n              java:\n                action: deny\n              lfi:\n                action: deny\n              rfi:\n                action: deny\n              gen:\n                action: deny\n  ipExample:\n    type: vercel:Project\n    name: ip_example\n    properties:\n      name: firewall-ip-blocking-example\n  ip-blocking:\n    type: vercel:FirewallConfig\n    properties:\n      projectId: ${ipExample.id}\n      ipRules:\n        - rules:\n            - action: deny\n              ip: 51.85.0.0/16\n              hostname: '*'\n            - action: challenge\n              ip: 1.2.3.4\n              hostname: example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import vercel:index/firewallConfig:FirewallConfig example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether firewall is enabled or not.\n"
                },
                "ipRules": {
                    "$ref": "#/types/vercel:index/FirewallConfigIpRules:FirewallConfigIpRules",
                    "description": "IP rules to apply to the project.\n"
                },
                "managedRulesets": {
                    "$ref": "#/types/vercel:index/FirewallConfigManagedRulesets:FirewallConfigManagedRulesets",
                    "description": "The managed rulesets that are enabled.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project this configuration belongs to.\n"
                },
                "rules": {
                    "$ref": "#/types/vercel:index/FirewallConfigRules:FirewallConfigRules",
                    "description": "Custom rules to apply to the project\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team this project belongs to.\n"
                }
            },
            "required": [
                "enabled",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether firewall is enabled or not.\n"
                },
                "ipRules": {
                    "$ref": "#/types/vercel:index/FirewallConfigIpRules:FirewallConfigIpRules",
                    "description": "IP rules to apply to the project.\n"
                },
                "managedRulesets": {
                    "$ref": "#/types/vercel:index/FirewallConfigManagedRulesets:FirewallConfigManagedRulesets",
                    "description": "The managed rulesets that are enabled.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project this configuration belongs to.\n"
                },
                "rules": {
                    "$ref": "#/types/vercel:index/FirewallConfigRules:FirewallConfigRules",
                    "description": "Custom rules to apply to the project\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team this project belongs to.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallConfig resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether firewall is enabled or not.\n"
                    },
                    "ipRules": {
                        "$ref": "#/types/vercel:index/FirewallConfigIpRules:FirewallConfigIpRules",
                        "description": "IP rules to apply to the project.\n"
                    },
                    "managedRulesets": {
                        "$ref": "#/types/vercel:index/FirewallConfigManagedRulesets:FirewallConfigManagedRulesets",
                        "description": "The managed rulesets that are enabled.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project this configuration belongs to.\n"
                    },
                    "rules": {
                        "$ref": "#/types/vercel:index/FirewallConfigRules:FirewallConfigRules",
                        "description": "Custom rules to apply to the project\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team this project belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/logDrain:LogDrain": {
            "description": "Provides a Configurable Log Drain resource.\n\n\u003e For Log Drain integrations, please see the [Integration Log Drain docs](https://vercel.com/docs/observability/log-drains#log-drains-integration).\n\nLog Drains collect all of your logs using a service specializing in storing app logs.\n\nTeams on Pro and Enterprise plans can subscribe to log drains that are generic and configurable from the Vercel dashboard without creating an integration. This allows you to use a HTTP service to receive logs through Vercel's log drains.\n\n\u003e Only Pro and Enterprise teams can create Configurable Log Drains.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\n// Use the vercel_endpoint_verification data source to work out the verification code needed to\n// verify the log drain endpoint.\nconst example = vercel.getEndpointVerification({});\nconst exampleProject = new vercel.Project(\"example\", {name: \"example\"});\nconst exampleLogDrain = new vercel.LogDrain(\"example\", {\n    deliveryFormat: \"json\",\n    environments: [\"production\"],\n    headers: {\n        \"some-key\": \"some-value\",\n    },\n    projectIds: [exampleProject.id],\n    samplingRate: 0.8,\n    secret: \"a_very_long_and_very_well_specified_secret\",\n    sources: [\"static\"],\n    endpoint: \"https://example.com/my-log-drain-endpoint\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\nimport pulumiverse_vercel as vercel\n\n# Use the vercel_endpoint_verification data source to work out the verification code needed to\n# verify the log drain endpoint.\nexample = vercel.get_endpoint_verification()\nexample_project = vercel.Project(\"example\", name=\"example\")\nexample_log_drain = vercel.LogDrain(\"example\",\n    delivery_format=\"json\",\n    environments=[\"production\"],\n    headers={\n        \"some-key\": \"some-value\",\n    },\n    project_ids=[example_project.id],\n    sampling_rate=0.8,\n    secret=\"a_very_long_and_very_well_specified_secret\",\n    sources=[\"static\"],\n    endpoint=\"https://example.com/my-log-drain-endpoint\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Use the vercel_endpoint_verification data source to work out the verification code needed to\n    // verify the log drain endpoint.\n    var example = Vercel.GetEndpointVerification.Invoke();\n\n    var exampleProject = new Vercel.Project(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleLogDrain = new Vercel.LogDrain(\"example\", new()\n    {\n        DeliveryFormat = \"json\",\n        Environments = new[]\n        {\n            \"production\",\n        },\n        Headers = \n        {\n            { \"some-key\", \"some-value\" },\n        },\n        ProjectIds = new[]\n        {\n            exampleProject.Id,\n        },\n        SamplingRate = 0.8,\n        Secret = \"a_very_long_and_very_well_specified_secret\",\n        Sources = new[]\n        {\n            \"static\",\n        },\n        Endpoint = \"https://example.com/my-log-drain-endpoint\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Use the vercel_endpoint_verification data source to work out the verification code needed to\n\t\t// verify the log drain endpoint.\n\t\t_, err := vercel.GetEndpointVerification(ctx, \u0026vercel.GetEndpointVerificationArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleProject, err := vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewLogDrain(ctx, \"example\", \u0026vercel.LogDrainArgs{\n\t\t\tDeliveryFormat: pulumi.String(\"json\"),\n\t\t\tEnvironments: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t\tHeaders: pulumi.StringMap{\n\t\t\t\t\"some-key\": pulumi.String(\"some-value\"),\n\t\t\t},\n\t\t\tProjectIds: pulumi.StringArray{\n\t\t\t\texampleProject.ID(),\n\t\t\t},\n\t\t\tSamplingRate: pulumi.Float64(0.8),\n\t\t\tSecret:       pulumi.String(\"a_very_long_and_very_well_specified_secret\"),\n\t\t\tSources: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"static\"),\n\t\t\t},\n\t\t\tEndpoint: pulumi.String(\"https://example.com/my-log-drain-endpoint\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetEndpointVerificationArgs;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.LogDrain;\nimport com.pulumi.vercel.LogDrainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Use the vercel_endpoint_verification data source to work out the verification code needed to\n        // verify the log drain endpoint.\n        final var example = VercelFunctions.getEndpointVerification();\n\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var exampleLogDrain = new LogDrain(\"exampleLogDrain\", LogDrainArgs.builder()\n            .deliveryFormat(\"json\")\n            .environments(\"production\")\n            .headers(Map.of(\"some-key\", \"some-value\"))\n            .projectIds(exampleProject.id())\n            .samplingRate(0.8)\n            .secret(\"a_very_long_and_very_well_specified_secret\")\n            .sources(\"static\")\n            .endpoint(\"https://example.com/my-log-drain-endpoint\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleLogDrain:\n    type: vercel:LogDrain\n    name: example\n    properties:\n      deliveryFormat: json\n      environments:\n        - production\n      headers:\n        some-key: some-value\n      projectIds:\n        - ${exampleProject.id}\n      samplingRate: 0.8\n      secret: a_very_long_and_very_well_specified_secret\n      sources:\n        - static\n      endpoint: https://example.com/my-log-drain-endpoint\n  exampleProject:\n    type: vercel:Project\n    name: example\n    properties:\n      name: example\nvariables:\n  # Use the vercel_endpoint_verification data source to work out the verification code needed to\n  # // verify the log drain endpoint.\n  example:\n    fn::invoke:\n      Function: vercel:getEndpointVerification\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the log_drain_id.\n\n- log_drain_id can be found by querying the Vercel REST API (https://vercel.com/docs/rest-api/endpoints/logDrains#retrieves-a-list-of-all-the-log-drains).\n\n```sh\n$ pulumi import vercel:index/logDrain:LogDrain example ld_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\nAlternatively, you can import via the team_id and edge_config_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- log_drain_id can be found by querying the Vercel REST API (https://vercel.com/docs/rest-api/endpoints/logDrains#retrieves-a-list-of-all-the-log-drains).\n\n```sh\n$ pulumi import vercel:index/logDrain:LogDrain example team_xxxxxxxxxxxxxxxxxxxxxxxx/ld_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "deliveryFormat": {
                    "type": "string",
                    "description": "The format log data should be delivered in. Can be `json` or `ndjson`.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpoint_verification data source. The value the `x-vercel-verify` header should be can be read from the `vercel_endpoint_verification_code` data source.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Logs from the selected environments will be forwarded to your webhook. At least one must be present.\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom headers to include in requests to the log drain endpoint.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.\n"
                },
                "samplingRate": {
                    "type": "number",
                    "description": "A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "A custom secret to be used for signing log events. You can use this secret to verify that log events are coming from Vercel and are not tampered with. See https://vercel.com/docs/observability/log-drains/log-drains-reference#secure-log-drains for full info.\n",
                    "secret": true
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `lambda`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "deliveryFormat",
                "endpoint",
                "environments",
                "secret",
                "sources",
                "teamId"
            ],
            "inputProperties": {
                "deliveryFormat": {
                    "type": "string",
                    "description": "The format log data should be delivered in. Can be `json` or `ndjson`.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpoint_verification data source. The value the `x-vercel-verify` header should be can be read from the `vercel_endpoint_verification_code` data source.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Logs from the selected environments will be forwarded to your webhook. At least one must be present.\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom headers to include in requests to the log drain endpoint.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.\n"
                },
                "samplingRate": {
                    "type": "number",
                    "description": "A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "A custom secret to be used for signing log events. You can use this secret to verify that log events are coming from Vercel and are not tampered with. See https://vercel.com/docs/observability/log-drains/log-drains-reference#secure-log-drains for full info.\n",
                    "secret": true
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `lambda`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "deliveryFormat",
                "endpoint",
                "environments",
                "sources"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogDrain resources.\n",
                "properties": {
                    "deliveryFormat": {
                        "type": "string",
                        "description": "The format log data should be delivered in. Can be `json` or `ndjson`.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpoint_verification data source. The value the `x-vercel-verify` header should be can be read from the `vercel_endpoint_verification_code` data source.\n"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Logs from the selected environments will be forwarded to your webhook. At least one must be present.\n"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom headers to include in requests to the log drain endpoint.\n"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.\n"
                    },
                    "samplingRate": {
                        "type": "number",
                        "description": "A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "A custom secret to be used for signing log events. You can use this secret to verify that log events are coming from Vercel and are not tampered with. See https://vercel.com/docs/observability/log-drains/log-drains-reference#secure-log-drains for full info.\n",
                        "secret": true
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `lambda`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/project:Project": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\n// A project that is connected to a git repository.\n// Deployments will be created automatically\n// on every branch push and merges onto the Production Branch.\nconst withGit = new vercel.Project(\"with_git\", {\n    name: \"example-project-with-git\",\n    framework: \"nextjs\",\n    gitRepository: {\n        type: \"github\",\n        repo: \"vercel/some-repo\",\n    },\n});\n// A project that is not connected to a git repository.\n// Deployments will need to be created manually through\n// terraform, or via the vercel CLI.\nconst example = new vercel.Project(\"example\", {\n    name: \"example-project\",\n    framework: \"nextjs\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\n# A project that is connected to a git repository.\n# Deployments will be created automatically\n# on every branch push and merges onto the Production Branch.\nwith_git = vercel.Project(\"with_git\",\n    name=\"example-project-with-git\",\n    framework=\"nextjs\",\n    git_repository={\n        \"type\": \"github\",\n        \"repo\": \"vercel/some-repo\",\n    })\n# A project that is not connected to a git repository.\n# Deployments will need to be created manually through\n# terraform, or via the vercel CLI.\nexample = vercel.Project(\"example\",\n    name=\"example-project\",\n    framework=\"nextjs\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // A project that is connected to a git repository.\n    // Deployments will be created automatically\n    // on every branch push and merges onto the Production Branch.\n    var withGit = new Vercel.Project(\"with_git\", new()\n    {\n        Name = \"example-project-with-git\",\n        Framework = \"nextjs\",\n        GitRepository = new Vercel.Inputs.ProjectGitRepositoryArgs\n        {\n            Type = \"github\",\n            Repo = \"vercel/some-repo\",\n        },\n    });\n\n    // A project that is not connected to a git repository.\n    // Deployments will need to be created manually through\n    // terraform, or via the vercel CLI.\n    var example = new Vercel.Project(\"example\", new()\n    {\n        Name = \"example-project\",\n        Framework = \"nextjs\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// A project that is connected to a git repository.\n\t\t// Deployments will be created automatically\n\t\t// on every branch push and merges onto the Production Branch.\n\t\t_, err := vercel.NewProject(ctx, \"with_git\", \u0026vercel.ProjectArgs{\n\t\t\tName:      pulumi.String(\"example-project-with-git\"),\n\t\t\tFramework: pulumi.String(\"nextjs\"),\n\t\t\tGitRepository: \u0026vercel.ProjectGitRepositoryArgs{\n\t\t\t\tType: pulumi.String(\"github\"),\n\t\t\t\tRepo: pulumi.String(\"vercel/some-repo\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A project that is not connected to a git repository.\n\t\t// Deployments will need to be created manually through\n\t\t// terraform, or via the vercel CLI.\n\t\t_, err = vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tName:      pulumi.String(\"example-project\"),\n\t\t\tFramework: pulumi.String(\"nextjs\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.inputs.ProjectGitRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // A project that is connected to a git repository.\n        // Deployments will be created automatically\n        // on every branch push and merges onto the Production Branch.\n        var withGit = new Project(\"withGit\", ProjectArgs.builder()\n            .name(\"example-project-with-git\")\n            .framework(\"nextjs\")\n            .gitRepository(ProjectGitRepositoryArgs.builder()\n                .type(\"github\")\n                .repo(\"vercel/some-repo\")\n                .build())\n            .build());\n\n        // A project that is not connected to a git repository.\n        // Deployments will need to be created manually through\n        // terraform, or via the vercel CLI.\n        var example = new Project(\"example\", ProjectArgs.builder()\n            .name(\"example-project\")\n            .framework(\"nextjs\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # A project that is connected to a git repository.\n  # Deployments will be created automatically\n  # on every branch push and merges onto the Production Branch.\n  withGit:\n    type: vercel:Project\n    name: with_git\n    properties:\n      name: example-project-with-git\n      framework: nextjs\n      gitRepository:\n        type: github\n        repo: vercel/some-repo\n  # A project that is not connected to a git repository.\n  # Deployments will need to be created manually through\n  # terraform, or via the vercel CLI.\n  example:\n    type: vercel:Project\n    properties:\n      name: example-project\n      framework: nextjs\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the project ID.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n$ pulumi import vercel:index/project:Project example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\nAlternatively, you can import via the team_id and project_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n$ pulumi import vercel:index/project:Project example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "autoAssignCustomDomains": {
                    "type": "boolean",
                    "description": "Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`\n"
                },
                "automaticallyExposeSystemEnvironmentVariables": {
                    "type": "boolean",
                    "description": "Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field\n"
                },
                "buildCommand": {
                    "type": "string",
                    "description": "The build command for this project. If omitted, this value will be automatically detected.\n"
                },
                "customerSuccessCodeVisibility": {
                    "type": "boolean",
                    "description": "Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.\n"
                },
                "devCommand": {
                    "type": "string",
                    "description": "The dev command for this project. If omitted, this value will be automatically detected.\n"
                },
                "directoryListing": {
                    "type": "boolean",
                    "description": "If no index file is present within a directory, the directory contents will be displayed.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectEnvironment:ProjectEnvironment"
                    },
                    "description": "A set of Environment Variables that should be configured for the project.\n"
                },
                "framework": {
                    "type": "string",
                    "description": "The framework that is being used for this project. If omitted, no framework is selected.\n"
                },
                "functionFailover": {
                    "type": "boolean",
                    "description": "Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.\n"
                },
                "gitComments": {
                    "$ref": "#/types/vercel:index/ProjectGitComments:ProjectGitComments",
                    "description": "Configuration for Git Comments.\n"
                },
                "gitForkProtection": {
                    "type": "boolean",
                    "description": "Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.\n"
                },
                "gitLfs": {
                    "type": "boolean",
                    "description": "Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.\n"
                },
                "gitRepository": {
                    "$ref": "#/types/vercel:index/ProjectGitRepository:ProjectGitRepository",
                    "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.\n"
                },
                "ignoreCommand": {
                    "type": "string",
                    "description": "When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.\n"
                },
                "installCommand": {
                    "type": "string",
                    "description": "The install command for this project. If omitted, this value will be automatically detected.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The desired name for the project.\n"
                },
                "oidcTokenConfig": {
                    "$ref": "#/types/vercel:index/ProjectOidcTokenConfig:ProjectOidcTokenConfig",
                    "description": "Configuration for OpenID Connect (OIDC) tokens.\n"
                },
                "optionsAllowlist": {
                    "$ref": "#/types/vercel:index/ProjectOptionsAllowlist:ProjectOptionsAllowlist",
                    "description": "Disable Deployment Protection for CORS preflight `OPTIONS` requests for a list of paths.\n"
                },
                "outputDirectory": {
                    "type": "string",
                    "description": "The output directory of the project. If omitted, this value will be automatically detected.\n"
                },
                "passwordProtection": {
                    "$ref": "#/types/vercel:index/ProjectPasswordProtection:ProjectPasswordProtection",
                    "description": "Ensures visitors of your Preview Deployments must enter a password in order to gain access.\n"
                },
                "previewComments": {
                    "type": "boolean",
                    "description": "Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).\n"
                },
                "prioritiseProductionBuilds": {
                    "type": "boolean",
                    "description": "If enabled, builds for the Production environment will be prioritized over Preview environments.\n"
                },
                "protectionBypassForAutomation": {
                    "type": "boolean",
                    "description": "Allow automation services to bypass Deployment Protection on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `protection_bypass_for_automation_secret` field.\n"
                },
                "protectionBypassForAutomationSecret": {
                    "type": "string",
                    "description": "If `protection_bypass_for_automation` is enabled, optionally set this value to specify a 32 character secret, otherwise a secret will be generated.\n",
                    "secret": true
                },
                "publicSource": {
                    "type": "boolean",
                    "description": "By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `public_source` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.\n"
                },
                "resourceConfig": {
                    "$ref": "#/types/vercel:index/ProjectResourceConfig:ProjectResourceConfig",
                    "description": "Resource Configuration for the project.\n"
                },
                "rootDirectory": {
                    "type": "string",
                    "description": "The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.\n"
                },
                "serverlessFunctionRegion": {
                    "type": "string",
                    "description": "The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.\n"
                },
                "skewProtection": {
                    "type": "string",
                    "description": "Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "trustedIps": {
                    "$ref": "#/types/vercel:index/ProjectTrustedIps:ProjectTrustedIps",
                    "description": "Ensures only visitors from an allowed IP address can access your deployment.\n"
                },
                "vercelAuthentication": {
                    "$ref": "#/types/vercel:index/ProjectVercelAuthentication:ProjectVercelAuthentication",
                    "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.\n"
                }
            },
            "required": [
                "autoAssignCustomDomains",
                "automaticallyExposeSystemEnvironmentVariables",
                "customerSuccessCodeVisibility",
                "directoryListing",
                "functionFailover",
                "gitForkProtection",
                "gitLfs",
                "name",
                "oidcTokenConfig",
                "prioritiseProductionBuilds",
                "protectionBypassForAutomationSecret",
                "resourceConfig",
                "serverlessFunctionRegion",
                "teamId",
                "vercelAuthentication"
            ],
            "inputProperties": {
                "autoAssignCustomDomains": {
                    "type": "boolean",
                    "description": "Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`\n"
                },
                "automaticallyExposeSystemEnvironmentVariables": {
                    "type": "boolean",
                    "description": "Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field\n"
                },
                "buildCommand": {
                    "type": "string",
                    "description": "The build command for this project. If omitted, this value will be automatically detected.\n"
                },
                "customerSuccessCodeVisibility": {
                    "type": "boolean",
                    "description": "Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.\n"
                },
                "devCommand": {
                    "type": "string",
                    "description": "The dev command for this project. If omitted, this value will be automatically detected.\n"
                },
                "directoryListing": {
                    "type": "boolean",
                    "description": "If no index file is present within a directory, the directory contents will be displayed.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectEnvironment:ProjectEnvironment"
                    },
                    "description": "A set of Environment Variables that should be configured for the project.\n"
                },
                "framework": {
                    "type": "string",
                    "description": "The framework that is being used for this project. If omitted, no framework is selected.\n"
                },
                "functionFailover": {
                    "type": "boolean",
                    "description": "Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.\n"
                },
                "gitComments": {
                    "$ref": "#/types/vercel:index/ProjectGitComments:ProjectGitComments",
                    "description": "Configuration for Git Comments.\n"
                },
                "gitForkProtection": {
                    "type": "boolean",
                    "description": "Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.\n"
                },
                "gitLfs": {
                    "type": "boolean",
                    "description": "Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.\n"
                },
                "gitRepository": {
                    "$ref": "#/types/vercel:index/ProjectGitRepository:ProjectGitRepository",
                    "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.\n"
                },
                "ignoreCommand": {
                    "type": "string",
                    "description": "When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.\n"
                },
                "installCommand": {
                    "type": "string",
                    "description": "The install command for this project. If omitted, this value will be automatically detected.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The desired name for the project.\n"
                },
                "oidcTokenConfig": {
                    "$ref": "#/types/vercel:index/ProjectOidcTokenConfig:ProjectOidcTokenConfig",
                    "description": "Configuration for OpenID Connect (OIDC) tokens.\n"
                },
                "optionsAllowlist": {
                    "$ref": "#/types/vercel:index/ProjectOptionsAllowlist:ProjectOptionsAllowlist",
                    "description": "Disable Deployment Protection for CORS preflight `OPTIONS` requests for a list of paths.\n"
                },
                "outputDirectory": {
                    "type": "string",
                    "description": "The output directory of the project. If omitted, this value will be automatically detected.\n"
                },
                "passwordProtection": {
                    "$ref": "#/types/vercel:index/ProjectPasswordProtection:ProjectPasswordProtection",
                    "description": "Ensures visitors of your Preview Deployments must enter a password in order to gain access.\n"
                },
                "previewComments": {
                    "type": "boolean",
                    "description": "Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).\n"
                },
                "prioritiseProductionBuilds": {
                    "type": "boolean",
                    "description": "If enabled, builds for the Production environment will be prioritized over Preview environments.\n"
                },
                "protectionBypassForAutomation": {
                    "type": "boolean",
                    "description": "Allow automation services to bypass Deployment Protection on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `protection_bypass_for_automation_secret` field.\n"
                },
                "protectionBypassForAutomationSecret": {
                    "type": "string",
                    "description": "If `protection_bypass_for_automation` is enabled, optionally set this value to specify a 32 character secret, otherwise a secret will be generated.\n",
                    "secret": true
                },
                "publicSource": {
                    "type": "boolean",
                    "description": "By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `public_source` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.\n"
                },
                "resourceConfig": {
                    "$ref": "#/types/vercel:index/ProjectResourceConfig:ProjectResourceConfig",
                    "description": "Resource Configuration for the project.\n"
                },
                "rootDirectory": {
                    "type": "string",
                    "description": "The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.\n"
                },
                "serverlessFunctionRegion": {
                    "type": "string",
                    "description": "The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.\n"
                },
                "skewProtection": {
                    "type": "string",
                    "description": "Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "trustedIps": {
                    "$ref": "#/types/vercel:index/ProjectTrustedIps:ProjectTrustedIps",
                    "description": "Ensures only visitors from an allowed IP address can access your deployment.\n"
                },
                "vercelAuthentication": {
                    "$ref": "#/types/vercel:index/ProjectVercelAuthentication:ProjectVercelAuthentication",
                    "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "autoAssignCustomDomains": {
                        "type": "boolean",
                        "description": "Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`\n"
                    },
                    "automaticallyExposeSystemEnvironmentVariables": {
                        "type": "boolean",
                        "description": "Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field\n"
                    },
                    "buildCommand": {
                        "type": "string",
                        "description": "The build command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "customerSuccessCodeVisibility": {
                        "type": "boolean",
                        "description": "Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.\n"
                    },
                    "devCommand": {
                        "type": "string",
                        "description": "The dev command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "directoryListing": {
                        "type": "boolean",
                        "description": "If no index file is present within a directory, the directory contents will be displayed.\n"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vercel:index/ProjectEnvironment:ProjectEnvironment"
                        },
                        "description": "A set of Environment Variables that should be configured for the project.\n"
                    },
                    "framework": {
                        "type": "string",
                        "description": "The framework that is being used for this project. If omitted, no framework is selected.\n"
                    },
                    "functionFailover": {
                        "type": "boolean",
                        "description": "Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.\n"
                    },
                    "gitComments": {
                        "$ref": "#/types/vercel:index/ProjectGitComments:ProjectGitComments",
                        "description": "Configuration for Git Comments.\n"
                    },
                    "gitForkProtection": {
                        "type": "boolean",
                        "description": "Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.\n"
                    },
                    "gitLfs": {
                        "type": "boolean",
                        "description": "Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.\n"
                    },
                    "gitRepository": {
                        "$ref": "#/types/vercel:index/ProjectGitRepository:ProjectGitRepository",
                        "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.\n"
                    },
                    "ignoreCommand": {
                        "type": "string",
                        "description": "When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.\n"
                    },
                    "installCommand": {
                        "type": "string",
                        "description": "The install command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The desired name for the project.\n"
                    },
                    "oidcTokenConfig": {
                        "$ref": "#/types/vercel:index/ProjectOidcTokenConfig:ProjectOidcTokenConfig",
                        "description": "Configuration for OpenID Connect (OIDC) tokens.\n"
                    },
                    "optionsAllowlist": {
                        "$ref": "#/types/vercel:index/ProjectOptionsAllowlist:ProjectOptionsAllowlist",
                        "description": "Disable Deployment Protection for CORS preflight `OPTIONS` requests for a list of paths.\n"
                    },
                    "outputDirectory": {
                        "type": "string",
                        "description": "The output directory of the project. If omitted, this value will be automatically detected.\n"
                    },
                    "passwordProtection": {
                        "$ref": "#/types/vercel:index/ProjectPasswordProtection:ProjectPasswordProtection",
                        "description": "Ensures visitors of your Preview Deployments must enter a password in order to gain access.\n"
                    },
                    "previewComments": {
                        "type": "boolean",
                        "description": "Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).\n"
                    },
                    "prioritiseProductionBuilds": {
                        "type": "boolean",
                        "description": "If enabled, builds for the Production environment will be prioritized over Preview environments.\n"
                    },
                    "protectionBypassForAutomation": {
                        "type": "boolean",
                        "description": "Allow automation services to bypass Deployment Protection on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `protection_bypass_for_automation_secret` field.\n"
                    },
                    "protectionBypassForAutomationSecret": {
                        "type": "string",
                        "description": "If `protection_bypass_for_automation` is enabled, optionally set this value to specify a 32 character secret, otherwise a secret will be generated.\n",
                        "secret": true
                    },
                    "publicSource": {
                        "type": "boolean",
                        "description": "By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `public_source` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.\n"
                    },
                    "resourceConfig": {
                        "$ref": "#/types/vercel:index/ProjectResourceConfig:ProjectResourceConfig",
                        "description": "Resource Configuration for the project.\n"
                    },
                    "rootDirectory": {
                        "type": "string",
                        "description": "The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.\n"
                    },
                    "serverlessFunctionRegion": {
                        "type": "string",
                        "description": "The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.\n"
                    },
                    "skewProtection": {
                        "type": "string",
                        "description": "Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "trustedIps": {
                        "$ref": "#/types/vercel:index/ProjectTrustedIps:ProjectTrustedIps",
                        "description": "Ensures only visitors from an allowed IP address can access your deployment.\n"
                    },
                    "vercelAuthentication": {
                        "$ref": "#/types/vercel:index/ProjectVercelAuthentication:ProjectVercelAuthentication",
                        "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/projectDeploymentRetention:ProjectDeploymentRetention": {
            "description": "Provides a Project Deployment Retention resource.\n\nA Project Deployment Retention resource defines an Deployment Retention on a Vercel Project.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/security/deployment-retention).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.Project(\"example\", {\n    name: \"example-project\",\n    gitRepository: {\n        type: \"github\",\n        repo: \"vercel/some-repo\",\n    },\n});\n// An unlimited deployment retention policy that will be created\n// for this project for all deployments.\nconst exampleUnlimited = new vercel.ProjectDeploymentRetention(\"example_unlimited\", {\n    projectId: example.id,\n    teamId: example.teamId,\n    expirationPreview: \"unlimited\",\n    expirationProduction: \"unlimited\",\n    expirationCanceled: \"unlimited\",\n    expirationErrored: \"unlimited\",\n});\n// A customized deployment retention policy that will be created\n// for this project for all deployments.\nconst exampleCustomized = new vercel.ProjectDeploymentRetention(\"example_customized\", {\n    projectId: example.id,\n    teamId: example.teamId,\n    expirationPreview: \"3m\",\n    expirationProduction: \"1y\",\n    expirationCanceled: \"1m\",\n    expirationErrored: \"2m\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.Project(\"example\",\n    name=\"example-project\",\n    git_repository={\n        \"type\": \"github\",\n        \"repo\": \"vercel/some-repo\",\n    })\n# An unlimited deployment retention policy that will be created\n# for this project for all deployments.\nexample_unlimited = vercel.ProjectDeploymentRetention(\"example_unlimited\",\n    project_id=example.id,\n    team_id=example.team_id,\n    expiration_preview=\"unlimited\",\n    expiration_production=\"unlimited\",\n    expiration_canceled=\"unlimited\",\n    expiration_errored=\"unlimited\")\n# A customized deployment retention policy that will be created\n# for this project for all deployments.\nexample_customized = vercel.ProjectDeploymentRetention(\"example_customized\",\n    project_id=example.id,\n    team_id=example.team_id,\n    expiration_preview=\"3m\",\n    expiration_production=\"1y\",\n    expiration_canceled=\"1m\",\n    expiration_errored=\"2m\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.Project(\"example\", new()\n    {\n        Name = \"example-project\",\n        GitRepository = new Vercel.Inputs.ProjectGitRepositoryArgs\n        {\n            Type = \"github\",\n            Repo = \"vercel/some-repo\",\n        },\n    });\n\n    // An unlimited deployment retention policy that will be created\n    // for this project for all deployments.\n    var exampleUnlimited = new Vercel.ProjectDeploymentRetention(\"example_unlimited\", new()\n    {\n        ProjectId = example.Id,\n        TeamId = example.TeamId,\n        ExpirationPreview = \"unlimited\",\n        ExpirationProduction = \"unlimited\",\n        ExpirationCanceled = \"unlimited\",\n        ExpirationErrored = \"unlimited\",\n    });\n\n    // A customized deployment retention policy that will be created\n    // for this project for all deployments.\n    var exampleCustomized = new Vercel.ProjectDeploymentRetention(\"example_customized\", new()\n    {\n        ProjectId = example.Id,\n        TeamId = example.TeamId,\n        ExpirationPreview = \"3m\",\n        ExpirationProduction = \"1y\",\n        ExpirationCanceled = \"1m\",\n        ExpirationErrored = \"2m\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tName: pulumi.String(\"example-project\"),\n\t\t\tGitRepository: \u0026vercel.ProjectGitRepositoryArgs{\n\t\t\t\tType: pulumi.String(\"github\"),\n\t\t\t\tRepo: pulumi.String(\"vercel/some-repo\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// An unlimited deployment retention policy that will be created\n\t\t// for this project for all deployments.\n\t\t_, err = vercel.NewProjectDeploymentRetention(ctx, \"example_unlimited\", \u0026vercel.ProjectDeploymentRetentionArgs{\n\t\t\tProjectId:            example.ID(),\n\t\t\tTeamId:               example.TeamId,\n\t\t\tExpirationPreview:    pulumi.String(\"unlimited\"),\n\t\t\tExpirationProduction: pulumi.String(\"unlimited\"),\n\t\t\tExpirationCanceled:   pulumi.String(\"unlimited\"),\n\t\t\tExpirationErrored:    pulumi.String(\"unlimited\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A customized deployment retention policy that will be created\n\t\t// for this project for all deployments.\n\t\t_, err = vercel.NewProjectDeploymentRetention(ctx, \"example_customized\", \u0026vercel.ProjectDeploymentRetentionArgs{\n\t\t\tProjectId:            example.ID(),\n\t\t\tTeamId:               example.TeamId,\n\t\t\tExpirationPreview:    pulumi.String(\"3m\"),\n\t\t\tExpirationProduction: pulumi.String(\"1y\"),\n\t\t\tExpirationCanceled:   pulumi.String(\"1m\"),\n\t\t\tExpirationErrored:    pulumi.String(\"2m\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.inputs.ProjectGitRepositoryArgs;\nimport com.pulumi.vercel.ProjectDeploymentRetention;\nimport com.pulumi.vercel.ProjectDeploymentRetentionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()\n            .name(\"example-project\")\n            .gitRepository(ProjectGitRepositoryArgs.builder()\n                .type(\"github\")\n                .repo(\"vercel/some-repo\")\n                .build())\n            .build());\n\n        // An unlimited deployment retention policy that will be created\n        // for this project for all deployments.\n        var exampleUnlimited = new ProjectDeploymentRetention(\"exampleUnlimited\", ProjectDeploymentRetentionArgs.builder()\n            .projectId(example.id())\n            .teamId(example.teamId())\n            .expirationPreview(\"unlimited\")\n            .expirationProduction(\"unlimited\")\n            .expirationCanceled(\"unlimited\")\n            .expirationErrored(\"unlimited\")\n            .build());\n\n        // A customized deployment retention policy that will be created\n        // for this project for all deployments.\n        var exampleCustomized = new ProjectDeploymentRetention(\"exampleCustomized\", ProjectDeploymentRetentionArgs.builder()\n            .projectId(example.id())\n            .teamId(example.teamId())\n            .expirationPreview(\"3m\")\n            .expirationProduction(\"1y\")\n            .expirationCanceled(\"1m\")\n            .expirationErrored(\"2m\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:Project\n    properties:\n      name: example-project\n      gitRepository:\n        type: github\n        repo: vercel/some-repo\n  # An unlimited deployment retention policy that will be created\n  # for this project for all deployments.\n  exampleUnlimited:\n    type: vercel:ProjectDeploymentRetention\n    name: example_unlimited\n    properties:\n      projectId: ${example.id}\n      teamId: ${example.teamId}\n      expirationPreview: unlimited\n      expirationProduction: unlimited\n      expirationCanceled: unlimited\n      expirationErrored: unlimited\n  # A customized deployment retention policy that will be created\n  # for this project for all deployments.\n  exampleCustomized:\n    type: vercel:ProjectDeploymentRetention\n    name: example_customized\n    properties:\n      projectId: ${example.id}\n      teamId: ${example.teamId}\n      expirationPreview: 3m\n      expirationProduction: 1y\n      expirationCanceled: 1m\n      expirationErrored: 2m\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nYou can import via the team_id and project_id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n$ pulumi import vercel:index/projectDeploymentRetention:ProjectDeploymentRetention example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "expirationCanceled": {
                    "type": "string",
                    "description": "The retention period for canceled deployments. Should be one of '1m', '2m', '3m', '6m', '1y', 'unlimited'.\n"
                },
                "expirationErrored": {
                    "type": "string",
                    "description": "The retention period for errored deployments. Should be one of '1m', '2m', '3m', '6m', '1y', 'unlimited'.\n"
                },
                "expirationPreview": {
                    "type": "string",
                    "description": "The retention period for preview deployments. Should be one of '1m', '2m', '3m', '6m', '1y', 'unlimited'.\n"
                },
                "expirationProduction": {
                    "type": "string",
                    "description": "The retention period for production deployments. Should be one of '1m', '2m', '3m', '6m', '1y', 'unlimited'.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project for the retention policy\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team.\n"
                }
            },
            "required": [
                "expirationCanceled",
                "expirationErrored",
                "expirationPreview",
                "expirationProduction",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "expirationCanceled": {
                    "type": "string",
                    "description": "The retention period for canceled deployments. Should be one of '1m', '2m', '3m', '6m', '1y', 'unlimited'.\n"
                },
                "expirationErrored": {
                    "type": "string",
                    "description": "The retention period for errored deployments. Should be one of '1m', '2m', '3m', '6m', '1y', 'unlimited'.\n"
                },
                "expirationPreview": {
                    "type": "string",
                    "description": "The retention period for preview deployments. Should be one of '1m', '2m', '3m', '6m', '1y', 'unlimited'.\n"
                },
                "expirationProduction": {
                    "type": "string",
                    "description": "The retention period for production deployments. Should be one of '1m', '2m', '3m', '6m', '1y', 'unlimited'.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project for the retention policy\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectDeploymentRetention resources.\n",
                "properties": {
                    "expirationCanceled": {
                        "type": "string",
                        "description": "The retention period for canceled deployments. Should be one of '1m', '2m', '3m', '6m', '1y', 'unlimited'.\n"
                    },
                    "expirationErrored": {
                        "type": "string",
                        "description": "The retention period for errored deployments. Should be one of '1m', '2m', '3m', '6m', '1y', 'unlimited'.\n"
                    },
                    "expirationPreview": {
                        "type": "string",
                        "description": "The retention period for preview deployments. Should be one of '1m', '2m', '3m', '6m', '1y', 'unlimited'.\n"
                    },
                    "expirationProduction": {
                        "type": "string",
                        "description": "The retention period for production deployments. Should be one of '1m', '2m', '3m', '6m', '1y', 'unlimited'.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project for the retention policy\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Vercel team.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/projectDomain:ProjectDomain": {
            "description": "Provides a Project Domain resource.\n\nA Project Domain is used to associate a domain name with a `vercel.Project`.\n\nBy default, Project Domains will be automatically applied to any `production` deployments.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.Project(\"example\", {name: \"example-project\"});\n// A simple domain that will be automatically\n// applied to each production deployment\nconst exampleProjectDomain = new vercel.ProjectDomain(\"example\", {\n    projectId: example.id,\n    domain: \"i-love.vercel.app\",\n});\n// A redirect of a domain name to a second domain name.\n// The status_code can optionally be controlled.\nconst exampleRedirect = new vercel.ProjectDomain(\"example_redirect\", {\n    projectId: example.id,\n    domain: \"i-also-love.vercel.app\",\n    redirect: exampleProjectDomain.domain,\n    redirectStatusCode: 307,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.Project(\"example\", name=\"example-project\")\n# A simple domain that will be automatically\n# applied to each production deployment\nexample_project_domain = vercel.ProjectDomain(\"example\",\n    project_id=example.id,\n    domain=\"i-love.vercel.app\")\n# A redirect of a domain name to a second domain name.\n# The status_code can optionally be controlled.\nexample_redirect = vercel.ProjectDomain(\"example_redirect\",\n    project_id=example.id,\n    domain=\"i-also-love.vercel.app\",\n    redirect=example_project_domain.domain,\n    redirect_status_code=307)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.Project(\"example\", new()\n    {\n        Name = \"example-project\",\n    });\n\n    // A simple domain that will be automatically\n    // applied to each production deployment\n    var exampleProjectDomain = new Vercel.ProjectDomain(\"example\", new()\n    {\n        ProjectId = example.Id,\n        Domain = \"i-love.vercel.app\",\n    });\n\n    // A redirect of a domain name to a second domain name.\n    // The status_code can optionally be controlled.\n    var exampleRedirect = new Vercel.ProjectDomain(\"example_redirect\", new()\n    {\n        ProjectId = example.Id,\n        Domain = \"i-also-love.vercel.app\",\n        Redirect = exampleProjectDomain.Domain,\n        RedirectStatusCode = 307,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tName: pulumi.String(\"example-project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A simple domain that will be automatically\n\t\t// applied to each production deployment\n\t\texampleProjectDomain, err := vercel.NewProjectDomain(ctx, \"example\", \u0026vercel.ProjectDomainArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tDomain:    pulumi.String(\"i-love.vercel.app\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A redirect of a domain name to a second domain name.\n\t\t// The status_code can optionally be controlled.\n\t\t_, err = vercel.NewProjectDomain(ctx, \"example_redirect\", \u0026vercel.ProjectDomainArgs{\n\t\t\tProjectId:          example.ID(),\n\t\t\tDomain:             pulumi.String(\"i-also-love.vercel.app\"),\n\t\t\tRedirect:           exampleProjectDomain.Domain,\n\t\t\tRedirectStatusCode: pulumi.Int(307),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.ProjectDomain;\nimport com.pulumi.vercel.ProjectDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()\n            .name(\"example-project\")\n            .build());\n\n        // A simple domain that will be automatically\n        // applied to each production deployment\n        var exampleProjectDomain = new ProjectDomain(\"exampleProjectDomain\", ProjectDomainArgs.builder()\n            .projectId(example.id())\n            .domain(\"i-love.vercel.app\")\n            .build());\n\n        // A redirect of a domain name to a second domain name.\n        // The status_code can optionally be controlled.\n        var exampleRedirect = new ProjectDomain(\"exampleRedirect\", ProjectDomainArgs.builder()\n            .projectId(example.id())\n            .domain(\"i-also-love.vercel.app\")\n            .redirect(exampleProjectDomain.domain())\n            .redirectStatusCode(307)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:Project\n    properties:\n      name: example-project\n  # A simple domain that will be automatically\n  # applied to each production deployment\n  exampleProjectDomain:\n    type: vercel:ProjectDomain\n    name: example\n    properties:\n      projectId: ${example.id}\n      domain: i-love.vercel.app\n  # A redirect of a domain name to a second domain name.\n  # The status_code can optionally be controlled.\n  exampleRedirect:\n    type: vercel:ProjectDomain\n    name: example_redirect\n    properties:\n      projectId: ${example.id}\n      domain: i-also-love.vercel.app\n      redirect: ${exampleProjectDomain.domain}\n      redirectStatusCode: 307\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the project ID and domain.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n$ pulumi import vercel:index/projectDomain:ProjectDomain example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example.com\n```\n\nAlternatively, you can import via the team_id, project_id and domain name.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n$ pulumi import vercel:index/projectDomain:ProjectDomain example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example.com\n```\n\n",
            "properties": {
                "customEnvironmentId": {
                    "type": "string",
                    "description": "The name of the Custom Environment to link to the Project Domain. Deployments from this custom environment will be assigned the domain name.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain name to associate with the project.\n"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID to add the deployment to.\n"
                },
                "redirect": {
                    "type": "string",
                    "description": "The domain name that serves as a target destination for redirects.\n"
                },
                "redirectStatusCode": {
                    "type": "integer",
                    "description": "The HTTP status code to use when serving as a redirect.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "domain",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "customEnvironmentId": {
                    "type": "string",
                    "description": "The name of the Custom Environment to link to the Project Domain. Deployments from this custom environment will be assigned the domain name.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain name to associate with the project.\n"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID to add the deployment to.\n"
                },
                "redirect": {
                    "type": "string",
                    "description": "The domain name that serves as a target destination for redirects.\n"
                },
                "redirectStatusCode": {
                    "type": "integer",
                    "description": "The HTTP status code to use when serving as a redirect.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectDomain resources.\n",
                "properties": {
                    "customEnvironmentId": {
                        "type": "string",
                        "description": "The name of the Custom Environment to link to the Project Domain. Deployments from this custom environment will be assigned the domain name.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain name to associate with the project.\n"
                    },
                    "gitBranch": {
                        "type": "string",
                        "description": "Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID to add the deployment to.\n"
                    },
                    "redirect": {
                        "type": "string",
                        "description": "The domain name that serves as a target destination for redirects.\n"
                    },
                    "redirectStatusCode": {
                        "type": "integer",
                        "description": "The HTTP status code to use when serving as a redirect.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.Project(\"example\", {\n    name: \"example-project\",\n    gitRepository: {\n        type: \"github\",\n        repo: \"vercel/some-repo\",\n    },\n});\n// An environment variable that will be created\n// for this project for the \"production\" environment.\nconst exampleProjectEnvironmentVariable = new vercel.ProjectEnvironmentVariable(\"example\", {\n    projectId: example.id,\n    key: \"foo\",\n    value: \"bar\",\n    targets: [\"production\"],\n    comment: \"a production secret\",\n});\n// An environment variable that will be created\n// for this project for the \"preview\" environment when the branch is \"staging\".\nconst exampleGitBranch = new vercel.ProjectEnvironmentVariable(\"example_git_branch\", {\n    projectId: example.id,\n    key: \"foo\",\n    value: \"bar-staging\",\n    targets: [\"preview\"],\n    gitBranch: \"staging\",\n    comment: \"a staging secret\",\n});\n// A sensitive environment variable that will be created\n// for this project for the \"production\" environment.\nconst exampleSensitive = new vercel.ProjectEnvironmentVariable(\"example_sensitive\", {\n    projectId: example.id,\n    key: \"foo\",\n    value: \"bar-production\",\n    targets: [\"production\"],\n    sensitive: true,\n    comment: \"a sensitive production secret\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.Project(\"example\",\n    name=\"example-project\",\n    git_repository={\n        \"type\": \"github\",\n        \"repo\": \"vercel/some-repo\",\n    })\n# An environment variable that will be created\n# for this project for the \"production\" environment.\nexample_project_environment_variable = vercel.ProjectEnvironmentVariable(\"example\",\n    project_id=example.id,\n    key=\"foo\",\n    value=\"bar\",\n    targets=[\"production\"],\n    comment=\"a production secret\")\n# An environment variable that will be created\n# for this project for the \"preview\" environment when the branch is \"staging\".\nexample_git_branch = vercel.ProjectEnvironmentVariable(\"example_git_branch\",\n    project_id=example.id,\n    key=\"foo\",\n    value=\"bar-staging\",\n    targets=[\"preview\"],\n    git_branch=\"staging\",\n    comment=\"a staging secret\")\n# A sensitive environment variable that will be created\n# for this project for the \"production\" environment.\nexample_sensitive = vercel.ProjectEnvironmentVariable(\"example_sensitive\",\n    project_id=example.id,\n    key=\"foo\",\n    value=\"bar-production\",\n    targets=[\"production\"],\n    sensitive=True,\n    comment=\"a sensitive production secret\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.Project(\"example\", new()\n    {\n        Name = \"example-project\",\n        GitRepository = new Vercel.Inputs.ProjectGitRepositoryArgs\n        {\n            Type = \"github\",\n            Repo = \"vercel/some-repo\",\n        },\n    });\n\n    // An environment variable that will be created\n    // for this project for the \"production\" environment.\n    var exampleProjectEnvironmentVariable = new Vercel.ProjectEnvironmentVariable(\"example\", new()\n    {\n        ProjectId = example.Id,\n        Key = \"foo\",\n        Value = \"bar\",\n        Targets = new[]\n        {\n            \"production\",\n        },\n        Comment = \"a production secret\",\n    });\n\n    // An environment variable that will be created\n    // for this project for the \"preview\" environment when the branch is \"staging\".\n    var exampleGitBranch = new Vercel.ProjectEnvironmentVariable(\"example_git_branch\", new()\n    {\n        ProjectId = example.Id,\n        Key = \"foo\",\n        Value = \"bar-staging\",\n        Targets = new[]\n        {\n            \"preview\",\n        },\n        GitBranch = \"staging\",\n        Comment = \"a staging secret\",\n    });\n\n    // A sensitive environment variable that will be created\n    // for this project for the \"production\" environment.\n    var exampleSensitive = new Vercel.ProjectEnvironmentVariable(\"example_sensitive\", new()\n    {\n        ProjectId = example.Id,\n        Key = \"foo\",\n        Value = \"bar-production\",\n        Targets = new[]\n        {\n            \"production\",\n        },\n        Sensitive = true,\n        Comment = \"a sensitive production secret\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tName: pulumi.String(\"example-project\"),\n\t\t\tGitRepository: \u0026vercel.ProjectGitRepositoryArgs{\n\t\t\t\tType: pulumi.String(\"github\"),\n\t\t\t\tRepo: pulumi.String(\"vercel/some-repo\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// An environment variable that will be created\n\t\t// for this project for the \"production\" environment.\n\t\t_, err = vercel.NewProjectEnvironmentVariable(ctx, \"example\", \u0026vercel.ProjectEnvironmentVariableArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tKey:       pulumi.String(\"foo\"),\n\t\t\tValue:     pulumi.String(\"bar\"),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t\tComment: pulumi.String(\"a production secret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// An environment variable that will be created\n\t\t// for this project for the \"preview\" environment when the branch is \"staging\".\n\t\t_, err = vercel.NewProjectEnvironmentVariable(ctx, \"example_git_branch\", \u0026vercel.ProjectEnvironmentVariableArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tKey:       pulumi.String(\"foo\"),\n\t\t\tValue:     pulumi.String(\"bar-staging\"),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"preview\"),\n\t\t\t},\n\t\t\tGitBranch: pulumi.String(\"staging\"),\n\t\t\tComment:   pulumi.String(\"a staging secret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A sensitive environment variable that will be created\n\t\t// for this project for the \"production\" environment.\n\t\t_, err = vercel.NewProjectEnvironmentVariable(ctx, \"example_sensitive\", \u0026vercel.ProjectEnvironmentVariableArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tKey:       pulumi.String(\"foo\"),\n\t\t\tValue:     pulumi.String(\"bar-production\"),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t\tSensitive: pulumi.Bool(true),\n\t\t\tComment:   pulumi.String(\"a sensitive production secret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.inputs.ProjectGitRepositoryArgs;\nimport com.pulumi.vercel.ProjectEnvironmentVariable;\nimport com.pulumi.vercel.ProjectEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()\n            .name(\"example-project\")\n            .gitRepository(ProjectGitRepositoryArgs.builder()\n                .type(\"github\")\n                .repo(\"vercel/some-repo\")\n                .build())\n            .build());\n\n        // An environment variable that will be created\n        // for this project for the \"production\" environment.\n        var exampleProjectEnvironmentVariable = new ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", ProjectEnvironmentVariableArgs.builder()\n            .projectId(example.id())\n            .key(\"foo\")\n            .value(\"bar\")\n            .targets(\"production\")\n            .comment(\"a production secret\")\n            .build());\n\n        // An environment variable that will be created\n        // for this project for the \"preview\" environment when the branch is \"staging\".\n        var exampleGitBranch = new ProjectEnvironmentVariable(\"exampleGitBranch\", ProjectEnvironmentVariableArgs.builder()\n            .projectId(example.id())\n            .key(\"foo\")\n            .value(\"bar-staging\")\n            .targets(\"preview\")\n            .gitBranch(\"staging\")\n            .comment(\"a staging secret\")\n            .build());\n\n        // A sensitive environment variable that will be created\n        // for this project for the \"production\" environment.\n        var exampleSensitive = new ProjectEnvironmentVariable(\"exampleSensitive\", ProjectEnvironmentVariableArgs.builder()\n            .projectId(example.id())\n            .key(\"foo\")\n            .value(\"bar-production\")\n            .targets(\"production\")\n            .sensitive(true)\n            .comment(\"a sensitive production secret\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:Project\n    properties:\n      name: example-project\n      gitRepository:\n        type: github\n        repo: vercel/some-repo\n  # An environment variable that will be created\n  # for this project for the \"production\" environment.\n  exampleProjectEnvironmentVariable:\n    type: vercel:ProjectEnvironmentVariable\n    name: example\n    properties:\n      projectId: ${example.id}\n      key: foo\n      value: bar\n      targets:\n        - production\n      comment: a production secret\n  # An environment variable that will be created\n  # for this project for the \"preview\" environment when the branch is \"staging\".\n  exampleGitBranch:\n    type: vercel:ProjectEnvironmentVariable\n    name: example_git_branch\n    properties:\n      projectId: ${example.id}\n      key: foo\n      value: bar-staging\n      targets:\n        - preview\n      gitBranch: staging\n      comment: a staging secret\n  # A sensitive environment variable that will be created\n  # for this project for the \"production\" environment.\n  exampleSensitive:\n    type: vercel:ProjectEnvironmentVariable\n    name: example_sensitive\n    properties:\n      projectId: ${example.id}\n      key: foo\n      value: bar-production\n      targets:\n        - production\n      sensitive: true\n      comment: a sensitive production secret\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIf importing into a personal account, or with a team configured on\n\nthe provider, simply use the project_id and environment variable id.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n- environment variable id can be taken from the network tab inside developer tools, while you are on the project page,\n\nor can be queried from Vercel API directly (https://vercel.com/docs/rest-api/endpoints/projects#retrieve-the-environment-variables-of-a-project-by-id-or-name)\n\n#\n\nNote also, that the value field for sensitive environment variables will be imported as `null`.\n\n```sh\n$ pulumi import vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/FdT2e1E5Of6Cihmt\n```\n\nAlternatively, you can import via the team_id, project_id and\n\nenvironment variable id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- project_id can be found in the project `settings` tab in the Vercel UI.\n\n- environment variable id can be taken from the network tab inside developer tools, while you are on the project page,\n\nor can be queried from Vercel API directly (https://vercel.com/docs/rest-api/endpoints/projects#retrieve-the-environment-variables-of-a-project-by-id-or-name)\n\n#\n\nNote also, that the value field for sensitive environment variables will be imported as `null`.\n\n```sh\n$ pulumi import vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/FdT2e1E5Of6Cihmt\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "A comment explaining what the environment variable is for.\n"
                },
                "customEnvironmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of Custom Environments that the Environment Variable should be present on. At least one of `target` or `custom_environment_ids` must be set.\n"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "The git branch of the Environment Variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Vercel project.\n"
                },
                "sensitive": {
                    "type": "boolean",
                    "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`. At least one of `target` or `custom_environment_ids` must be set.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "required": [
                "comment",
                "customEnvironmentIds",
                "key",
                "projectId",
                "sensitive",
                "targets",
                "teamId",
                "value"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "A comment explaining what the environment variable is for.\n"
                },
                "customEnvironmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of Custom Environments that the Environment Variable should be present on. At least one of `target` or `custom_environment_ids` must be set.\n"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "The git branch of the Environment Variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Vercel project.\n"
                },
                "sensitive": {
                    "type": "boolean",
                    "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`. At least one of `target` or `custom_environment_ids` must be set.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "key",
                "projectId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectEnvironmentVariable resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "A comment explaining what the environment variable is for.\n"
                    },
                    "customEnvironmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of Custom Environments that the Environment Variable should be present on. At least one of `target` or `custom_environment_ids` must be set.\n"
                    },
                    "gitBranch": {
                        "type": "string",
                        "description": "The git branch of the Environment Variable.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the Environment Variable.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Vercel project.\n"
                    },
                    "sensitive": {
                        "type": "boolean",
                        "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`. At least one of `target` or `custom_environment_ids` must be set.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the Environment Variable.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/projectEnvironmentVariables:ProjectEnvironmentVariables": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.inputs.ProjectGitRepositoryArgs;\nimport com.pulumi.vercel.ProjectEnvironmentVariables;\nimport com.pulumi.vercel.ProjectEnvironmentVariablesArgs;\nimport com.pulumi.vercel.inputs.ProjectEnvironmentVariablesVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()\n            .name(\"example-project\")\n            .gitRepository(ProjectGitRepositoryArgs.builder()\n                .type(\"github\")\n                .repo(\"vercel/some-repo\")\n                .build())\n            .build());\n\n        var exampleProjectEnvironmentVariables = new ProjectEnvironmentVariables(\"exampleProjectEnvironmentVariables\", ProjectEnvironmentVariablesArgs.builder()\n            .projectId(test.id())\n            .variables(            \n                ProjectEnvironmentVariablesVariableArgs.builder()\n                    .key(\"SOME_VARIABLE\")\n                    .value(\"some_value\")\n                    .target(                    \n                        \"production\",\n                        \"preview\")\n                    .build(),\n                ProjectEnvironmentVariablesVariableArgs.builder()\n                    .key(\"ANOTHER_VARIABLE\")\n                    .value(\"another_value\")\n                    .git_branch(\"staging\")\n                    .target(\"preview\")\n                    .build(),\n                ProjectEnvironmentVariablesVariableArgs.builder()\n                    .key(\"SENSITIVE_VARIABLE\")\n                    .value(\"sensitive_value\")\n                    .target(\"production\")\n                    .sensitive(true)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:Project\n    properties:\n      name: example-project\n      gitRepository:\n        type: github\n        repo: vercel/some-repo\n  exampleProjectEnvironmentVariables:\n    type: vercel:ProjectEnvironmentVariables\n    name: example\n    properties:\n      projectId: ${test.id}\n      variables:\n        - key: SOME_VARIABLE\n          value: some_value\n          target:\n            - production\n            - preview\n        - key: ANOTHER_VARIABLE\n          value: another_value\n          git_branch: staging\n          target:\n            - preview\n        - key: SENSITIVE_VARIABLE\n          value: sensitive_value\n          target:\n            - production\n          sensitive: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Vercel project.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectEnvironmentVariablesVariable:ProjectEnvironmentVariablesVariable"
                    },
                    "description": "A set of Environment Variables that should be configured for the project.\n"
                }
            },
            "required": [
                "projectId",
                "teamId",
                "variables"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Vercel project.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectEnvironmentVariablesVariable:ProjectEnvironmentVariablesVariable"
                    },
                    "description": "A set of Environment Variables that should be configured for the project.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "variables"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectEnvironmentVariables resources.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Vercel project.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Vercel team. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vercel:index/ProjectEnvironmentVariablesVariable:ProjectEnvironmentVariablesVariable"
                        },
                        "description": "A set of Environment Variables that should be configured for the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/projectMembers:ProjectMembers": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.Project(\"example\", {name: \"example-with-members\"});\nconst exampleProjectMembers = new vercel.ProjectMembers(\"example\", {\n    projectId: example.id,\n    members: [\n        {\n            email: \"user@example.com\",\n            role: \"PROJECT_VIEWER\",\n        },\n        {\n            username: \"some-example-user\",\n            role: \"PROJECT_DEVELOPER\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.Project(\"example\", name=\"example-with-members\")\nexample_project_members = vercel.ProjectMembers(\"example\",\n    project_id=example.id,\n    members=[\n        {\n            \"email\": \"user@example.com\",\n            \"role\": \"PROJECT_VIEWER\",\n        },\n        {\n            \"username\": \"some-example-user\",\n            \"role\": \"PROJECT_DEVELOPER\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.Project(\"example\", new()\n    {\n        Name = \"example-with-members\",\n    });\n\n    var exampleProjectMembers = new Vercel.ProjectMembers(\"example\", new()\n    {\n        ProjectId = example.Id,\n        Members = new[]\n        {\n            new Vercel.Inputs.ProjectMembersMemberArgs\n            {\n                Email = \"user@example.com\",\n                Role = \"PROJECT_VIEWER\",\n            },\n            new Vercel.Inputs.ProjectMembersMemberArgs\n            {\n                Username = \"some-example-user\",\n                Role = \"PROJECT_DEVELOPER\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tName: pulumi.String(\"example-with-members\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewProjectMembers(ctx, \"example\", \u0026vercel.ProjectMembersArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tMembers: vercel.ProjectMembersMemberArray{\n\t\t\t\t\u0026vercel.ProjectMembersMemberArgs{\n\t\t\t\t\tEmail: pulumi.String(\"user@example.com\"),\n\t\t\t\t\tRole:  pulumi.String(\"PROJECT_VIEWER\"),\n\t\t\t\t},\n\t\t\t\t\u0026vercel.ProjectMembersMemberArgs{\n\t\t\t\t\tUsername: pulumi.String(\"some-example-user\"),\n\t\t\t\t\tRole:     pulumi.String(\"PROJECT_DEVELOPER\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.ProjectMembers;\nimport com.pulumi.vercel.ProjectMembersArgs;\nimport com.pulumi.vercel.inputs.ProjectMembersMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()\n            .name(\"example-with-members\")\n            .build());\n\n        var exampleProjectMembers = new ProjectMembers(\"exampleProjectMembers\", ProjectMembersArgs.builder()\n            .projectId(example.id())\n            .members(            \n                ProjectMembersMemberArgs.builder()\n                    .email(\"user@example.com\")\n                    .role(\"PROJECT_VIEWER\")\n                    .build(),\n                ProjectMembersMemberArgs.builder()\n                    .username(\"some-example-user\")\n                    .role(\"PROJECT_DEVELOPER\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:Project\n    properties:\n      name: example-with-members\n  exampleProjectMembers:\n    type: vercel:ProjectMembers\n    name: example\n    properties:\n      projectId: ${example.id}\n      members:\n        - email: user@example.com\n          role: PROJECT_VIEWER\n        - username: some-example-user\n          role: PROJECT_DEVELOPER\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectMembersMember:ProjectMembersMember"
                    },
                    "description": "The set of members to manage for this project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the existing Vercel Project.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "members",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectMembersMember:ProjectMembersMember"
                    },
                    "description": "The set of members to manage for this project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the existing Vercel Project.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "members",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectMembers resources.\n",
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vercel:index/ProjectMembersMember:ProjectMembersMember"
                        },
                        "description": "The set of members to manage for this project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the existing Vercel Project.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable": {
            "description": "Provides a Shared Environment Variable resource.\n\nA Shared Environment Variable resource defines an Environment Variable that can be shared between multiple Vercel Projects.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/environment-variables/shared-environment-variables).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.Project(\"example\", {\n    name: \"example\",\n    gitRepository: {\n        type: \"github\",\n        repo: \"vercel/some-repo\",\n    },\n});\n// A shared environment variable that will be created\n// and associated with the \"example\" project.\nconst exampleSharedEnvironmentVariable = new vercel.SharedEnvironmentVariable(\"example\", {\n    key: \"EXAMPLE\",\n    value: \"some_value\",\n    targets: [\"production\"],\n    comment: \"an example shared variable\",\n    projectIds: [example.id],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.Project(\"example\",\n    name=\"example\",\n    git_repository={\n        \"type\": \"github\",\n        \"repo\": \"vercel/some-repo\",\n    })\n# A shared environment variable that will be created\n# and associated with the \"example\" project.\nexample_shared_environment_variable = vercel.SharedEnvironmentVariable(\"example\",\n    key=\"EXAMPLE\",\n    value=\"some_value\",\n    targets=[\"production\"],\n    comment=\"an example shared variable\",\n    project_ids=[example.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.Project(\"example\", new()\n    {\n        Name = \"example\",\n        GitRepository = new Vercel.Inputs.ProjectGitRepositoryArgs\n        {\n            Type = \"github\",\n            Repo = \"vercel/some-repo\",\n        },\n    });\n\n    // A shared environment variable that will be created\n    // and associated with the \"example\" project.\n    var exampleSharedEnvironmentVariable = new Vercel.SharedEnvironmentVariable(\"example\", new()\n    {\n        Key = \"EXAMPLE\",\n        Value = \"some_value\",\n        Targets = new[]\n        {\n            \"production\",\n        },\n        Comment = \"an example shared variable\",\n        ProjectIds = new[]\n        {\n            example.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t\tGitRepository: \u0026vercel.ProjectGitRepositoryArgs{\n\t\t\t\tType: pulumi.String(\"github\"),\n\t\t\t\tRepo: pulumi.String(\"vercel/some-repo\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A shared environment variable that will be created\n\t\t// and associated with the \"example\" project.\n\t\t_, err = vercel.NewSharedEnvironmentVariable(ctx, \"example\", \u0026vercel.SharedEnvironmentVariableArgs{\n\t\t\tKey:   pulumi.String(\"EXAMPLE\"),\n\t\t\tValue: pulumi.String(\"some_value\"),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t\tComment: pulumi.String(\"an example shared variable\"),\n\t\t\tProjectIds: pulumi.StringArray{\n\t\t\t\texample.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.inputs.ProjectGitRepositoryArgs;\nimport com.pulumi.vercel.SharedEnvironmentVariable;\nimport com.pulumi.vercel.SharedEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()\n            .name(\"example\")\n            .gitRepository(ProjectGitRepositoryArgs.builder()\n                .type(\"github\")\n                .repo(\"vercel/some-repo\")\n                .build())\n            .build());\n\n        // A shared environment variable that will be created\n        // and associated with the \"example\" project.\n        var exampleSharedEnvironmentVariable = new SharedEnvironmentVariable(\"exampleSharedEnvironmentVariable\", SharedEnvironmentVariableArgs.builder()\n            .key(\"EXAMPLE\")\n            .value(\"some_value\")\n            .targets(\"production\")\n            .comment(\"an example shared variable\")\n            .projectIds(example.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:Project\n    properties:\n      name: example\n      gitRepository:\n        type: github\n        repo: vercel/some-repo\n  # A shared environment variable that will be created\n  # and associated with the \"example\" project.\n  exampleSharedEnvironmentVariable:\n    type: vercel:SharedEnvironmentVariable\n    name: example\n    properties:\n      key: EXAMPLE\n      value: some_value\n      targets:\n        - production\n      comment: an example shared variable\n      projectIds:\n        - ${example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nYou can import via the team_id and environment variable id.\n\n- team_id can be found in the team `settings` tab in the Vercel UI.\n\n- environment variable id can be taken from the network tab inside developer tools, while you are on the project page.\n\n#\n\nNote also, that the value field for sensitive environment variables will be imported as `null`.\n\n```sh\n$ pulumi import vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable example team_xxxxxxxxxxxxxxxxxxxxxxxx/env_yyyyyyyyyyyyy\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "A comment explaining what the environment variable is for.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID of the Vercel project.\n"
                },
                "sensitive": {
                    "type": "boolean",
                    "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team. Shared environment variables require a team.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "required": [
                "comment",
                "key",
                "projectIds",
                "sensitive",
                "targets",
                "teamId",
                "value"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "A comment explaining what the environment variable is for.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID of the Vercel project.\n"
                },
                "sensitive": {
                    "type": "boolean",
                    "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team. Shared environment variables require a team.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "key",
                "projectIds",
                "targets",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SharedEnvironmentVariable resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "A comment explaining what the environment variable is for.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the Environment Variable.\n"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ID of the Vercel project.\n"
                    },
                    "sensitive": {
                        "type": "boolean",
                        "description": "Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Vercel team. Shared environment variables require a team.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the Environment Variable.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/teamConfig:TeamConfig": {
            "description": "Manages the configuration of an existing Vercel Team.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  exampleTeamConfig:\n    type: vercel:TeamConfig\n    name: example\n    properties:\n      id: team_xxxxxxxxxxxxxxxxxxxxxxxx\n      avatar: ${example.file}\n      name: Vercel terraform example\n      slug: vercel-terraform-example\n      description: Vercel Terraform Example\n      sensitiveEnvironmentVariablePolicy: off\n      remoteCaching:\n        enabled: true\n      enablePreviewFeedback: off\n      enableProductionFeedback: off\n      hideIpAddresses: true\n      hideIpAddressesInLogDrains: true\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getFile\n      Arguments:\n        path: example/avatar.png\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "avatar": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The `avatar` should be a the 'file' attribute from a vercel.getFile data source.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the team.\n"
                },
                "emailDomain": {
                    "type": "string",
                    "description": "Hostname that'll be matched with emails on sign-up to automatically join the Team.\n"
                },
                "enablePreviewFeedback": {
                    "type": "string",
                    "description": "Enables the Vercel Toolbar on your preview deployments: one of on, off or default.\n"
                },
                "enableProductionFeedback": {
                    "type": "string",
                    "description": "Enables the Vercel Toolbar on your production deployments: one of on, off or default.\n"
                },
                "hideIpAddresses": {
                    "type": "boolean",
                    "description": "Indicates if ip addresses should be accessible in o11y tooling.\n"
                },
                "hideIpAddressesInLogDrains": {
                    "type": "boolean",
                    "description": "Indicates if ip addresses should be accessible in log drains.\n"
                },
                "inviteCode": {
                    "type": "string",
                    "description": "A code that can be used to join this team. Only visible to Team owners.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "previewDeploymentSuffix": {
                    "type": "string",
                    "description": "The hostname that is used as the preview deployment suffix.\n"
                },
                "remoteCaching": {
                    "$ref": "#/types/vercel:index/TeamConfigRemoteCaching:TeamConfigRemoteCaching",
                    "description": "Configuration for Remote Caching.\n"
                },
                "saml": {
                    "$ref": "#/types/vercel:index/TeamConfigSaml:TeamConfigSaml",
                    "description": "Configuration for SAML authentication.\n"
                },
                "sensitiveEnvironmentVariablePolicy": {
                    "type": "string",
                    "description": "Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the team. Will be used in the URL of the team's dashboard.\n"
                }
            },
            "required": [
                "description",
                "emailDomain",
                "enablePreviewFeedback",
                "enableProductionFeedback",
                "hideIpAddresses",
                "hideIpAddressesInLogDrains",
                "inviteCode",
                "name",
                "previewDeploymentSuffix",
                "remoteCaching",
                "saml",
                "sensitiveEnvironmentVariablePolicy",
                "slug"
            ],
            "inputProperties": {
                "avatar": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The `avatar` should be a the 'file' attribute from a vercel.getFile data source.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the team.\n"
                },
                "emailDomain": {
                    "type": "string",
                    "description": "Hostname that'll be matched with emails on sign-up to automatically join the Team.\n"
                },
                "enablePreviewFeedback": {
                    "type": "string",
                    "description": "Enables the Vercel Toolbar on your preview deployments: one of on, off or default.\n"
                },
                "enableProductionFeedback": {
                    "type": "string",
                    "description": "Enables the Vercel Toolbar on your production deployments: one of on, off or default.\n"
                },
                "hideIpAddresses": {
                    "type": "boolean",
                    "description": "Indicates if ip addresses should be accessible in o11y tooling.\n"
                },
                "hideIpAddressesInLogDrains": {
                    "type": "boolean",
                    "description": "Indicates if ip addresses should be accessible in log drains.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "previewDeploymentSuffix": {
                    "type": "string",
                    "description": "The hostname that is used as the preview deployment suffix.\n"
                },
                "remoteCaching": {
                    "$ref": "#/types/vercel:index/TeamConfigRemoteCaching:TeamConfigRemoteCaching",
                    "description": "Configuration for Remote Caching.\n"
                },
                "saml": {
                    "$ref": "#/types/vercel:index/TeamConfigSaml:TeamConfigSaml",
                    "description": "Configuration for SAML authentication.\n"
                },
                "sensitiveEnvironmentVariablePolicy": {
                    "type": "string",
                    "description": "Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the team. Will be used in the URL of the team's dashboard.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamConfig resources.\n",
                "properties": {
                    "avatar": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The `avatar` should be a the 'file' attribute from a vercel.getFile data source.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the team.\n"
                    },
                    "emailDomain": {
                        "type": "string",
                        "description": "Hostname that'll be matched with emails on sign-up to automatically join the Team.\n"
                    },
                    "enablePreviewFeedback": {
                        "type": "string",
                        "description": "Enables the Vercel Toolbar on your preview deployments: one of on, off or default.\n"
                    },
                    "enableProductionFeedback": {
                        "type": "string",
                        "description": "Enables the Vercel Toolbar on your production deployments: one of on, off or default.\n"
                    },
                    "hideIpAddresses": {
                        "type": "boolean",
                        "description": "Indicates if ip addresses should be accessible in o11y tooling.\n"
                    },
                    "hideIpAddressesInLogDrains": {
                        "type": "boolean",
                        "description": "Indicates if ip addresses should be accessible in log drains.\n"
                    },
                    "inviteCode": {
                        "type": "string",
                        "description": "A code that can be used to join this team. Only visible to Team owners.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the team.\n"
                    },
                    "previewDeploymentSuffix": {
                        "type": "string",
                        "description": "The hostname that is used as the preview deployment suffix.\n"
                    },
                    "remoteCaching": {
                        "$ref": "#/types/vercel:index/TeamConfigRemoteCaching:TeamConfigRemoteCaching",
                        "description": "Configuration for Remote Caching.\n"
                    },
                    "saml": {
                        "$ref": "#/types/vercel:index/TeamConfigSaml:TeamConfigSaml",
                        "description": "Configuration for SAML authentication.\n"
                    },
                    "sensitiveEnvironmentVariablePolicy": {
                        "type": "string",
                        "description": "Ensures that all environment variables created by members of this team will be created as Sensitive Environment Variables which can only be decrypted by Vercel's deployment system.: one of on, off or default.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the team. Will be used in the URL of the team's dashboard.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/teamMember:TeamMember": {
            "description": "Provider a resource for managing a team member.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.TeamMember(\"example\", {\n    teamId: \"team_xxxxxxxxxxxxxxxxxxxxxxxx\",\n    userId: \"uuuuuuuuuuuuuuuuuuuuuuuuuu\",\n    role: \"MEMBER\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.TeamMember(\"example\",\n    team_id=\"team_xxxxxxxxxxxxxxxxxxxxxxxx\",\n    user_id=\"uuuuuuuuuuuuuuuuuuuuuuuuuu\",\n    role=\"MEMBER\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.TeamMember(\"example\", new()\n    {\n        TeamId = \"team_xxxxxxxxxxxxxxxxxxxxxxxx\",\n        UserId = \"uuuuuuuuuuuuuuuuuuuuuuuuuu\",\n        Role = \"MEMBER\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.NewTeamMember(ctx, \"example\", \u0026vercel.TeamMemberArgs{\n\t\t\tTeamId: pulumi.String(\"team_xxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\tUserId: pulumi.String(\"uuuuuuuuuuuuuuuuuuuuuuuuuu\"),\n\t\t\tRole:   pulumi.String(\"MEMBER\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.TeamMember;\nimport com.pulumi.vercel.TeamMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new TeamMember(\"example\", TeamMemberArgs.builder()\n            .teamId(\"team_xxxxxxxxxxxxxxxxxxxxxxxx\")\n            .userId(\"uuuuuuuuuuuuuuuuuuuuuuuuuu\")\n            .role(\"MEMBER\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:TeamMember\n    properties:\n      teamId: team_xxxxxxxxxxxxxxxxxxxxxxxx\n      userId: uuuuuuuuuuuuuuuuuuuuuuuuuu\n      role: MEMBER\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nTo import, use the team_id and user_id.\n\n```sh\n$ pulumi import vercel:index/teamMember:TeamMember example team_xxxxxxxxxxxxxxxxxxxxxxxx/uuuuuuuuuuuuuuuuuuuuuuuuuu\n```\n\n",
            "properties": {
                "accessGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of access groups IDs that the user should be granted access to.\n"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/TeamMemberProject:TeamMemberProject"
                    },
                    "description": "If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of projects that the user should be granted access to, along with their role in each project.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that the user should have in the project. One of 'MEMBER', 'OWNER', 'VIEWER', 'DEVELOPER', 'BILLING' or 'CONTRIBUTOR'. Depending on your Team's plan, some of these roles may be unavailable.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the existing Vercel Team.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user to add to the team.\n"
                }
            },
            "required": [
                "accessGroups",
                "projects",
                "role",
                "teamId",
                "userId"
            ],
            "inputProperties": {
                "accessGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of access groups IDs that the user should be granted access to.\n"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/TeamMemberProject:TeamMemberProject"
                    },
                    "description": "If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of projects that the user should be granted access to, along with their role in each project.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that the user should have in the project. One of 'MEMBER', 'OWNER', 'VIEWER', 'DEVELOPER', 'BILLING' or 'CONTRIBUTOR'. Depending on your Team's plan, some of these roles may be unavailable.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the existing Vercel Team.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user to add to the team.\n"
                }
            },
            "requiredInputs": [
                "role",
                "teamId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamMember resources.\n",
                "properties": {
                    "accessGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of access groups IDs that the user should be granted access to.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vercel:index/TeamMemberProject:TeamMemberProject"
                        },
                        "description": "If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of projects that the user should be granted access to, along with their role in each project.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that the user should have in the project. One of 'MEMBER', 'OWNER', 'VIEWER', 'DEVELOPER', 'BILLING' or 'CONTRIBUTOR'. Depending on your Team's plan, some of these roles may be unavailable.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the existing Vercel Team.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user to add to the team.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/webhook:Webhook": {
            "description": "A webhook is a trigger-based HTTP endpoint configured to receive HTTP POST requests through events.\n\nWhen an event happens, a webhook is sent to a third-party app, which can then take appropriate action.\n\n\u003e Only Pro and Enterprise teams are able to configure these webhooks at the account level.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\nconst example = new vercel.Project(\"example\", {name: \"example-project\"});\nconst example2 = new vercel.Project(\"example2\", {name: \"another-example-project\"});\nconst withProjectIds = new vercel.Webhook(\"with_project_ids\", {\n    events: [\n        \"deployment.created\",\n        \"deployment.succeeded\",\n    ],\n    endpoint: \"https://example.com/endpoint\",\n    projectIds: [\n        example.id,\n        example2.id,\n    ],\n});\nconst withoutProjectIds = new vercel.Webhook(\"without_project_ids\", {\n    events: [\n        \"deployment.created\",\n        \"deployment.succeeded\",\n    ],\n    endpoint: \"https://example.com/endpoint\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vercel as vercel\n\nexample = vercel.Project(\"example\", name=\"example-project\")\nexample2 = vercel.Project(\"example2\", name=\"another-example-project\")\nwith_project_ids = vercel.Webhook(\"with_project_ids\",\n    events=[\n        \"deployment.created\",\n        \"deployment.succeeded\",\n    ],\n    endpoint=\"https://example.com/endpoint\",\n    project_ids=[\n        example.id,\n        example2.id,\n    ])\nwithout_project_ids = vercel.Webhook(\"without_project_ids\",\n    events=[\n        \"deployment.created\",\n        \"deployment.succeeded\",\n    ],\n    endpoint=\"https://example.com/endpoint\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Vercel.Project(\"example\", new()\n    {\n        Name = \"example-project\",\n    });\n\n    var example2 = new Vercel.Project(\"example2\", new()\n    {\n        Name = \"another-example-project\",\n    });\n\n    var withProjectIds = new Vercel.Webhook(\"with_project_ids\", new()\n    {\n        Events = new[]\n        {\n            \"deployment.created\",\n            \"deployment.succeeded\",\n        },\n        Endpoint = \"https://example.com/endpoint\",\n        ProjectIds = new[]\n        {\n            example.Id,\n            example2.Id,\n        },\n    });\n\n    var withoutProjectIds = new Vercel.Webhook(\"without_project_ids\", new()\n    {\n        Events = new[]\n        {\n            \"deployment.created\",\n            \"deployment.succeeded\",\n        },\n        Endpoint = \"https://example.com/endpoint\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tName: pulumi.String(\"example-project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample2, err := vercel.NewProject(ctx, \"example2\", \u0026vercel.ProjectArgs{\n\t\t\tName: pulumi.String(\"another-example-project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewWebhook(ctx, \"with_project_ids\", \u0026vercel.WebhookArgs{\n\t\t\tEvents: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"deployment.created\"),\n\t\t\t\tpulumi.String(\"deployment.succeeded\"),\n\t\t\t},\n\t\t\tEndpoint: pulumi.String(\"https://example.com/endpoint\"),\n\t\t\tProjectIds: pulumi.StringArray{\n\t\t\t\texample.ID(),\n\t\t\t\texample2.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewWebhook(ctx, \"without_project_ids\", \u0026vercel.WebhookArgs{\n\t\t\tEvents: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"deployment.created\"),\n\t\t\t\tpulumi.String(\"deployment.succeeded\"),\n\t\t\t},\n\t\t\tEndpoint: pulumi.String(\"https://example.com/endpoint\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.Webhook;\nimport com.pulumi.vercel.WebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()\n            .name(\"example-project\")\n            .build());\n\n        var example2 = new Project(\"example2\", ProjectArgs.builder()\n            .name(\"another-example-project\")\n            .build());\n\n        var withProjectIds = new Webhook(\"withProjectIds\", WebhookArgs.builder()\n            .events(            \n                \"deployment.created\",\n                \"deployment.succeeded\")\n            .endpoint(\"https://example.com/endpoint\")\n            .projectIds(            \n                example.id(),\n                example2.id())\n            .build());\n\n        var withoutProjectIds = new Webhook(\"withoutProjectIds\", WebhookArgs.builder()\n            .events(            \n                \"deployment.created\",\n                \"deployment.succeeded\")\n            .endpoint(\"https://example.com/endpoint\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: vercel:Project\n    properties:\n      name: example-project\n  example2:\n    type: vercel:Project\n    properties:\n      name: another-example-project\n  withProjectIds:\n    type: vercel:Webhook\n    name: with_project_ids\n    properties:\n      events:\n        - deployment.created\n        - deployment.succeeded\n      endpoint: https://example.com/endpoint\n      projectIds:\n        - ${example.id}\n        - ${example2.id}\n  withoutProjectIds:\n    type: vercel:Webhook\n    name: without_project_ids\n    properties:\n      events:\n        - deployment.created\n        - deployment.succeeded\n      endpoint: https://example.com/endpoint\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Webhooks events will be sent as POST requests to this URL.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the events the webhook will listen to. At least one must be present.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of project IDs that the webhook should be associated with. These projects should send events to the specified endpoint.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "A secret value which will be provided in the `x-vercel-signature` header and can be used to verify the authenticity of the webhook. See https://vercel.com/docs/observability/webhooks-overview/webhooks-api#securing-webhooks for further details.\n",
                    "secret": true
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Webhook should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "endpoint",
                "events",
                "secret",
                "teamId"
            ],
            "inputProperties": {
                "endpoint": {
                    "type": "string",
                    "description": "Webhooks events will be sent as POST requests to this URL.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the events the webhook will listen to. At least one must be present.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of project IDs that the webhook should be associated with. These projects should send events to the specified endpoint.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Webhook should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "endpoint",
                "events"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhook resources.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "Webhooks events will be sent as POST requests to this URL.\n"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the events the webhook will listen to. At least one must be present.\n"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of project IDs that the webhook should be associated with. These projects should send events to the specified endpoint.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "A secret value which will be provided in the `x-vercel-signature` header and can be used to verify the authenticity of the webhook. See https://vercel.com/docs/observability/webhooks-overview/webhooks-api#securing-webhooks for further details.\n",
                        "secret": true
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Webhook should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "vercel:index/getAccessGroup:getAccessGroup": {
            "description": "Provides information about an existing Access Group.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/accounts/team-members-and-roles/access-groups).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getAccessGroup({\n    id: \"ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_access_group(id=\"ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetAccessGroup.Invoke(new()\n    {\n        Id = \"ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupAccessGroup(ctx, \u0026vercel.LookupAccessGroupArgs{\n\t\t\tId: \"ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetAccessGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getAccessGroup(GetAccessGroupArgs.builder()\n            .id(\"ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getAccessGroup\n      Arguments:\n        id: ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccessGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The Access Group ID to be retrieved.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Access Group should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccessGroup.\n",
                "properties": {
                    "id": {
                        "description": "The Access Group ID to be retrieved.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the Access Group.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The ID of the team the Access Group should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "teamId"
                ],
                "type": "object"
            }
        },
        "vercel:index/getAccessGroupProject:getAccessGroupProject": {
            "description": "Provides information about an existing Access Group Project Assignment.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/accounts/team-members-and-roles/access-groups).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getProject({\n    name: \"my-existing-project\",\n});\nconst exampleGetAccessGroupProject = vercel.getAccessGroupProject({\n    accessGroupId: \"ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    projectId: exampleVercelProject.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_project(name=\"my-existing-project\")\nexample_get_access_group_project = vercel.get_access_group_project(access_group_id=\"ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    project_id=example_vercel_project[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetProject.Invoke(new()\n    {\n        Name = \"my-existing-project\",\n    });\n\n    var exampleGetAccessGroupProject = Vercel.GetAccessGroupProject.Invoke(new()\n    {\n        AccessGroupId = \"ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        ProjectId = exampleVercelProject.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupProject(ctx, \u0026vercel.LookupProjectArgs{\n\t\t\tName: \"my-existing-project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.LookupAccessGroupProject(ctx, \u0026vercel.LookupAccessGroupProjectArgs{\n\t\t\tAccessGroupId: \"ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n\t\t\tProjectId:     exampleVercelProject.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetProjectArgs;\nimport com.pulumi.vercel.inputs.GetAccessGroupProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getProject(GetProjectArgs.builder()\n            .name(\"my-existing-project\")\n            .build());\n\n        final var exampleGetAccessGroupProject = VercelFunctions.getAccessGroupProject(GetAccessGroupProjectArgs.builder()\n            .accessGroupId(\"ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n            .projectId(exampleVercelProject.id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getProject\n      Arguments:\n        name: my-existing-project\n  exampleGetAccessGroupProject:\n    fn::invoke:\n      Function: vercel:getAccessGroupProject\n      Arguments:\n        accessGroupId: ag_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n        projectId: ${exampleVercelProject.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccessGroupProject.\n",
                "properties": {
                    "accessGroupId": {
                        "type": "string",
                        "description": "The Access Group ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Access Group Project should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessGroupId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccessGroupProject.\n",
                "properties": {
                    "accessGroupId": {
                        "description": "The Access Group ID.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The Project ID.\n",
                        "type": "string"
                    },
                    "role": {
                        "description": "The Access Group Project Role.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The ID of the team the Access Group Project should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accessGroupId",
                    "projectId",
                    "role",
                    "teamId",
                    "id"
                ],
                "type": "object"
            }
        },
        "vercel:index/getAlias:getAlias": {
            "description": "Provides information about an existing Alias resource.\n\nAn Alias allows a `vercel.Deployment` to be accessed through a different URL.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlias.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "The Alias or Alias ID to be retrieved.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "alias"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlias.\n",
                "properties": {
                    "alias": {
                        "description": "The Alias or Alias ID to be retrieved.\n",
                        "type": "string"
                    },
                    "deploymentId": {
                        "description": "The ID of the Deployment the Alias is associated with.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "alias",
                    "deploymentId",
                    "id",
                    "teamId"
                ],
                "type": "object"
            }
        },
        "vercel:index/getAttackChallengeMode:getAttackChallengeMode": {
            "description": "Provides an Attack Challenge Mode resource.\n\nAttack Challenge Mode prevent malicious traffic by showing a verification challenge for every visitor.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getAttackChallengeMode({\n    projectId: exampleVercelProject.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_attack_challenge_mode(project_id=example_vercel_project[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetAttackChallengeMode.Invoke(new()\n    {\n        ProjectId = exampleVercelProject.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupAttackChallengeMode(ctx, \u0026vercel.LookupAttackChallengeModeArgs{\n\t\t\tProjectId: exampleVercelProject.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetAttackChallengeModeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getAttackChallengeMode(GetAttackChallengeModeArgs.builder()\n            .projectId(exampleVercelProject.id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getAttackChallengeMode\n      Arguments:\n        projectId: ${exampleVercelProject.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAttackChallengeMode.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project to adjust the CPU for.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAttackChallengeMode.\n",
                "properties": {
                    "enabled": {
                        "description": "Whether Attack Challenge Mode is enabled or not.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The resource identifier.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The ID of the Project to adjust the CPU for.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "enabled",
                    "id",
                    "projectId",
                    "teamId"
                ],
                "type": "object"
            }
        },
        "vercel:index/getCustomEnvironment:getCustomEnvironment": {
            "description": "Provides information about an existing CustomEnvironment resource.\n\nAn CustomEnvironment allows a `vercel.Deployment` to be accessed through a different URL.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getProject({\n    name: \"example-project-with-custom-env\",\n});\nconst exampleGetCustomEnvironment = example.then(example =\u003e vercel.getCustomEnvironment({\n    projectId: example.id,\n    name: \"example-custom-env\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_project(name=\"example-project-with-custom-env\")\nexample_get_custom_environment = vercel.get_custom_environment(project_id=example.id,\n    name=\"example-custom-env\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetProject.Invoke(new()\n    {\n        Name = \"example-project-with-custom-env\",\n    });\n\n    var exampleGetCustomEnvironment = Vercel.GetCustomEnvironment.Invoke(new()\n    {\n        ProjectId = example.Apply(getProjectResult =\u003e getProjectResult.Id),\n        Name = \"example-custom-env\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.LookupProject(ctx, \u0026vercel.LookupProjectArgs{\n\t\t\tName: \"example-project-with-custom-env\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.LookupCustomEnvironment(ctx, \u0026vercel.LookupCustomEnvironmentArgs{\n\t\t\tProjectId: example.Id,\n\t\t\tName:      \"example-custom-env\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetProjectArgs;\nimport com.pulumi.vercel.inputs.GetCustomEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getProject(GetProjectArgs.builder()\n            .name(\"example-project-with-custom-env\")\n            .build());\n\n        final var exampleGetCustomEnvironment = VercelFunctions.getCustomEnvironment(GetCustomEnvironmentArgs.builder()\n            .projectId(example.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .name(\"example-custom-env\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getProject\n      Arguments:\n        name: example-project-with-custom-env\n  exampleGetCustomEnvironment:\n    fn::invoke:\n      Function: vercel:getCustomEnvironment\n      Arguments:\n        projectId: ${example.id}\n        name: example-custom-env\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomEnvironment.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the environment.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the existing Vercel Project.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomEnvironment.\n",
                "properties": {
                    "branchTracking": {
                        "$ref": "#/types/vercel:index/getCustomEnvironmentBranchTracking:getCustomEnvironmentBranchTracking",
                        "description": "The branch tracking configuration for the environment. When enabled, each qualifying merge will generate a deployment.\n"
                    },
                    "description": {
                        "description": "A description of what the environment is.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the environment.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the environment.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The ID of the existing Vercel Project.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "branchTracking",
                    "description",
                    "id",
                    "name",
                    "projectId",
                    "teamId"
                ],
                "type": "object"
            }
        },
        "vercel:index/getDeployment:getDeployment": {
            "description": "Provides information about an existing Deployment.\n\nA Deployment is the result of building your Project and making it available through a live URL.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getDeployment({\n    id: \"https://my-vercel-project.vercel.app\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_deployment(id=\"https://my-vercel-project.vercel.app\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetDeployment.Invoke(new()\n    {\n        Id = \"https://my-vercel-project.vercel.app\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupDeployment(ctx, \u0026vercel.LookupDeploymentArgs{\n\t\t\tId: \"https://my-vercel-project.vercel.app\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetDeploymentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getDeployment(GetDeploymentArgs.builder()\n            .id(\"https://my-vercel-project.vercel.app\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getDeployment\n      Arguments:\n        id: https://my-vercel-project.vercel.app\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDeployment.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID or URL of the Deployment to read.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The Team ID to the Deployment belong to. Required when reading a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeployment.\n",
                "properties": {
                    "domains": {
                        "description": "A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID or URL of the Deployment to read.\n",
                        "type": "string"
                    },
                    "production": {
                        "description": "true if the deployment is a production deployment, meaning production aliases will be assigned.\n",
                        "type": "boolean"
                    },
                    "projectId": {
                        "description": "The project ID to add the deployment to.\n",
                        "type": "string"
                    },
                    "ref": {
                        "description": "The branch or commit hash that has been deployed. Note this will only work if the project is configured to use a Git repository.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The Team ID to the Deployment belong to. Required when reading a team resource if a default team has not been set in the provider.\n",
                        "type": "string"
                    },
                    "url": {
                        "description": "A unique URL that is automatically generated for a deployment.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "domains",
                    "id",
                    "production",
                    "projectId",
                    "ref",
                    "teamId",
                    "url"
                ],
                "type": "object"
            }
        },
        "vercel:index/getEdgeConfig:getEdgeConfig": {
            "description": "Provides information about an existing Edge Config.\n\nAn Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getEdgeConfig({\n    id: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_edge_config(id=\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetEdgeConfig.Invoke(new()\n    {\n        Id = \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupEdgeConfig(ctx, \u0026vercel.LookupEdgeConfigArgs{\n\t\t\tId: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetEdgeConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getEdgeConfig(GetEdgeConfigArgs.builder()\n            .id(\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getEdgeConfig\n      Arguments:\n        id: ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEdgeConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The Edge Config ID to be retrieved. This can be found by navigating to the Edge Config in the Vercel UI and looking at the URL. It should begin with `ecfg_`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEdgeConfig.\n",
                "properties": {
                    "id": {
                        "description": "The Edge Config ID to be retrieved. This can be found by navigating to the Edge Config in the Vercel UI and looking at the URL. It should begin with `ecfg_`.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name/slug of the Edge Config.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "teamId"
                ],
                "type": "object"
            }
        },
        "vercel:index/getEdgeConfigItem:getEdgeConfigItem": {
            "description": "Provides the value of an existing Edge Config Item.\n\nAn Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.\n\nAn Edge Config Item is a value within an Edge Config.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getEdgeConfig({\n    id: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n});\nconst test = example.then(example =\u003e vercel.getEdgeConfigItem({\n    id: example.id,\n    key: \"foobar\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_edge_config(id=\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\ntest = vercel.get_edge_config_item(id=example.id,\n    key=\"foobar\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetEdgeConfig.Invoke(new()\n    {\n        Id = \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    });\n\n    var test = Vercel.GetEdgeConfigItem.Invoke(new()\n    {\n        Id = example.Apply(getEdgeConfigResult =\u003e getEdgeConfigResult.Id),\n        Key = \"foobar\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.LookupEdgeConfig(ctx, \u0026vercel.LookupEdgeConfigArgs{\n\t\t\tId: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.LookupEdgeConfigItem(ctx, \u0026vercel.LookupEdgeConfigItemArgs{\n\t\t\tId:  example.Id,\n\t\t\tKey: \"foobar\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetEdgeConfigArgs;\nimport com.pulumi.vercel.inputs.GetEdgeConfigItemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getEdgeConfig(GetEdgeConfigArgs.builder()\n            .id(\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n            .build());\n\n        final var test = VercelFunctions.getEdgeConfigItem(GetEdgeConfigItemArgs.builder()\n            .id(example.applyValue(getEdgeConfigResult -\u003e getEdgeConfigResult.id()))\n            .key(\"foobar\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getEdgeConfig\n      Arguments:\n        id: ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n  test:\n    fn::invoke:\n      Function: vercel:getEdgeConfigItem\n      Arguments:\n        id: ${example.id}\n        key: foobar\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEdgeConfigItem.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Edge Config that the item should exist under.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the key you want to retrieve within your Edge Config.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "key"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEdgeConfigItem.\n",
                "properties": {
                    "id": {
                        "description": "The ID of the Edge Config that the item should exist under.\n",
                        "type": "string"
                    },
                    "key": {
                        "description": "The name of the key you want to retrieve within your Edge Config.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n",
                        "type": "string"
                    },
                    "value": {
                        "description": "The value assigned to the key.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "key",
                    "teamId",
                    "value"
                ],
                "type": "object"
            }
        },
        "vercel:index/getEdgeConfigSchema:getEdgeConfigSchema": {
            "description": "An Edge Config Schema provides an existing Edge Config with a JSON schema. Use schema protection to prevent unexpected updates that may cause bugs or downtime.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst test = vercel.getEdgeConfigSchema({\n    id: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\ntest = vercel.get_edge_config_schema(id=\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Vercel.GetEdgeConfigSchema.Invoke(new()\n    {\n        Id = \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupEdgeConfigSchema(ctx, \u0026vercel.LookupEdgeConfigSchemaArgs{\n\t\t\tId: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetEdgeConfigSchemaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = VercelFunctions.getEdgeConfigSchema(GetEdgeConfigSchemaArgs.builder()\n            .id(\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: vercel:getEdgeConfigSchema\n      Arguments:\n        id: ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEdgeConfigSchema.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Edge Config that the schema should be for.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEdgeConfigSchema.\n",
                "properties": {
                    "definition": {
                        "description": "A JSON schema that will be used to validate data in the Edge Config.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the Edge Config that the schema should be for.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "definition",
                    "id",
                    "teamId"
                ],
                "type": "object"
            }
        },
        "vercel:index/getEdgeConfigToken:getEdgeConfigToken": {
            "description": "Provides information about an existing Edge Config Token.\n\nAn Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.\n\nAn Edge Config token is used to authenticate against an Edge Config's endpoint.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst test = vercel.getEdgeConfigToken({\n    edgeConfigId: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    token: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\ntest = vercel.get_edge_config_token(edge_config_id=\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    token=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Vercel.GetEdgeConfigToken.Invoke(new()\n    {\n        EdgeConfigId = \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        Token = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupEdgeConfigToken(ctx, \u0026vercel.LookupEdgeConfigTokenArgs{\n\t\t\tEdgeConfigId: \"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n\t\t\tToken:        \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetEdgeConfigTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = VercelFunctions.getEdgeConfigToken(GetEdgeConfigTokenArgs.builder()\n            .edgeConfigId(\"ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n            .token(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: vercel:getEdgeConfigToken\n      Arguments:\n        edgeConfigId: ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n        token: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEdgeConfigToken.\n",
                "properties": {
                    "edgeConfigId": {
                        "type": "string",
                        "description": "The label of the Edge Config Token.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.\n"
                    }
                },
                "type": "object",
                "required": [
                    "edgeConfigId",
                    "token"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEdgeConfigToken.\n",
                "properties": {
                    "connectionString": {
                        "description": "A connection string is a URL that connects a project to an Edge Config. The variable can be called anything, but our Edge Config client SDK will search for process.env.EDGE_CONFIG by default.\n",
                        "type": "string"
                    },
                    "edgeConfigId": {
                        "description": "The label of the Edge Config Token.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "label": {
                        "description": "The label of the Edge Config Token.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n",
                        "type": "string"
                    },
                    "token": {
                        "description": "A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "connectionString",
                    "edgeConfigId",
                    "id",
                    "label",
                    "teamId",
                    "token"
                ],
                "type": "object"
            }
        },
        "vercel:index/getEndpointVerification:getEndpointVerification": {
            "description": "Provides a verification code that can be used to prove ownership over an API.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getEndpointVerification({});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_endpoint_verification()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetEndpointVerification.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.GetEndpointVerification(ctx, \u0026vercel.GetEndpointVerificationArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetEndpointVerificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getEndpointVerification();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getEndpointVerification\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEndpointVerification.\n",
                "properties": {
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEndpointVerification.\n",
                "properties": {
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n",
                        "type": "string"
                    },
                    "verificationCode": {
                        "description": "A verification code that should be set in the `x-vercel-verify` response header for your API. This is used to verify that the endpoint belongs to you.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "teamId",
                    "verificationCode"
                ],
                "type": "object"
            }
        },
        "vercel:index/getFile:getFile": {
            "description": "Provides information about a file on disk.\n\nThis will read a single file, providing metadata for use with a `vercel.Deployment`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\nimport * as vercel from \"@pulumiverse/vercel\";\n\n// In this example, we are assuming that a single index.html file\n// is being deployed. This file lives directly next to the terraform file.\nconst example = vercel.getFile({\n    path: \"index.html\",\n});\nconst exampleGetProject = vercel.getProject({\n    name: \"my-project\",\n});\nconst exampleDeployment = new vercel.Deployment(\"example\", {\n    projectId: exampleGetProject.then(exampleGetProject =\u003e exampleGetProject.id),\n    files: example.then(example =\u003e example.file),\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\nimport pulumiverse_vercel as vercel\n\n# In this example, we are assuming that a single index.html file\n# is being deployed. This file lives directly next to the terraform file.\nexample = vercel.get_file(path=\"index.html\")\nexample_get_project = vercel.get_project(name=\"my-project\")\nexample_deployment = vercel.Deployment(\"example\",\n    project_id=example_get_project.id,\n    files=example.file)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\nusing Vercel = Pulumiverse.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // In this example, we are assuming that a single index.html file\n    // is being deployed. This file lives directly next to the terraform file.\n    var example = Vercel.GetFile.Invoke(new()\n    {\n        Path = \"index.html\",\n    });\n\n    var exampleGetProject = Vercel.GetProject.Invoke(new()\n    {\n        Name = \"my-project\",\n    });\n\n    var exampleDeployment = new Vercel.Deployment(\"example\", new()\n    {\n        ProjectId = exampleGetProject.Apply(getProjectResult =\u003e getProjectResult.Id),\n        Files = example.Apply(getFileResult =\u003e getFileResult.File),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// In this example, we are assuming that a single index.html file\n\t\t// is being deployed. This file lives directly next to the terraform file.\n\t\texample, err := vercel.GetFile(ctx, \u0026vercel.GetFileArgs{\n\t\t\tPath: \"index.html\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGetProject, err := vercel.LookupProject(ctx, \u0026vercel.LookupProjectArgs{\n\t\t\tName: \"my-project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDeployment(ctx, \"example\", \u0026vercel.DeploymentArgs{\n\t\t\tProjectId: pulumi.String(exampleGetProject.Id),\n\t\t\tFiles:     pulumi.StringMap(example.File),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetFileArgs;\nimport com.pulumi.vercel.inputs.GetProjectArgs;\nimport com.pulumi.vercel.Deployment;\nimport com.pulumi.vercel.DeploymentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // In this example, we are assuming that a single index.html file\n        // is being deployed. This file lives directly next to the terraform file.\n        final var example = VercelFunctions.getFile(GetFileArgs.builder()\n            .path(\"index.html\")\n            .build());\n\n        final var exampleGetProject = VercelFunctions.getProject(GetProjectArgs.builder()\n            .name(\"my-project\")\n            .build());\n\n        var exampleDeployment = new Deployment(\"exampleDeployment\", DeploymentArgs.builder()\n            .projectId(exampleGetProject.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .files(example.applyValue(getFileResult -\u003e getFileResult.file()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleDeployment:\n    type: vercel:Deployment\n    name: example\n    properties:\n      projectId: ${exampleGetProject.id}\n      files: ${example.file}\nvariables:\n  # In this example, we are assuming that a single index.html file\n  # is being deployed. This file lives directly next to the terraform file.\n  example:\n    fn::invoke:\n      Function: vercel:getFile\n      Arguments:\n        path: index.html\n  exampleGetProject:\n    fn::invoke:\n      Function: vercel:getProject\n      Arguments:\n        name: my-project\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFile.\n",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFile.\n",
                "properties": {
                    "file": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of filename to metadata about the file. The metadata contains the file size and hash, and allows a deployment to be created if the file changes.\n",
                        "type": "object"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "required": [
                    "file",
                    "id",
                    "path"
                ],
                "type": "object"
            }
        },
        "vercel:index/getLogDrain:getLogDrain": {
            "description": "Provides information about an existing Log Drain.\n\nLog Drains collect all of your logs using a service specializing in storing app logs.\n\nTeams on Pro and Enterprise plans can subscribe to log drains that are generic and configurable from the Vercel dashboard without creating an integration. This allows you to use a HTTP service to receive logs through Vercel's log drains.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getLogDrain({\n    id: \"lg_xxxxxxx_xxxxxx_xxxxx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_log_drain(id=\"lg_xxxxxxx_xxxxxx_xxxxx\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetLogDrain.Invoke(new()\n    {\n        Id = \"lg_xxxxxxx_xxxxxx_xxxxx\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupLogDrain(ctx, \u0026vercel.LookupLogDrainArgs{\n\t\t\tId: \"lg_xxxxxxx_xxxxxx_xxxxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetLogDrainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getLogDrain(GetLogDrainArgs.builder()\n            .id(\"lg_xxxxxxx_xxxxxx_xxxxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getLogDrain\n      Arguments:\n        id: lg_xxxxxxx_xxxxxx_xxxxx\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLogDrain.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpoint_verification data source. The value the `x-vercel-verify` header should be can be read from the `vercel_endpoint_verification_code` data source.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Log Drain.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "endpoint",
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLogDrain.\n",
                "properties": {
                    "deliveryFormat": {
                        "description": "The format log data should be delivered in. Can be `json` or `ndjson`.\n",
                        "type": "string"
                    },
                    "endpoint": {
                        "description": "Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpoint_verification data source. The value the `x-vercel-verify` header should be can be read from the `vercel_endpoint_verification_code` data source.\n",
                        "type": "string"
                    },
                    "environments": {
                        "description": "Logs from the selected environments will be forwarded to your webhook. At least one must be present.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom headers to include in requests to the log drain endpoint.\n",
                        "type": "object"
                    },
                    "id": {
                        "description": "The ID of the Log Drain.\n",
                        "type": "string"
                    },
                    "projectIds": {
                        "description": "A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "samplingRate": {
                        "description": "A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.\n",
                        "type": "number"
                    },
                    "sources": {
                        "description": "A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `function`.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "teamId": {
                        "description": "The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "deliveryFormat",
                    "endpoint",
                    "environments",
                    "headers",
                    "id",
                    "projectIds",
                    "samplingRate",
                    "sources",
                    "teamId"
                ],
                "type": "object"
            }
        },
        "vercel:index/getPrebuiltProject:getPrebuiltProject": {
            "inputs": {
                "description": "A collection of arguments for invoking getPrebuiltProject.\n",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrebuiltProject.\n",
                "properties": {
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "output": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of output file to metadata about the file. The metadata contains the file size and hash, and allows a deployment to be created if the file changes.\n",
                        "type": "object"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "output",
                    "path"
                ],
                "type": "object"
            }
        },
        "vercel:index/getProject:getProject": {
            "description": "Provides information about an existing project within Vercel.\n\nA Project groups deployments and custom domains. To deploy on Vercel, you need a Project.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/overview).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getProject({\n    name: \"my-existing-project\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_project(name=\"my-existing-project\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetProject.Invoke(new()\n    {\n        Name = \"my-existing-project\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupProject(ctx, \u0026vercel.LookupProjectArgs{\n\t\t\tName: \"my-existing-project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getProject(GetProjectArgs.builder()\n            .name(\"my-existing-project\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getProject\n      Arguments:\n        name: my-existing-project\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID the project exists beneath. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "autoAssignCustomDomains": {
                        "description": "Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`\n",
                        "type": "boolean"
                    },
                    "automaticallyExposeSystemEnvironmentVariables": {
                        "description": "Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field\n",
                        "type": "boolean"
                    },
                    "buildCommand": {
                        "description": "The build command for this project. If omitted, this value will be automatically detected.\n",
                        "type": "string"
                    },
                    "customerSuccessCodeVisibility": {
                        "description": "Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.\n",
                        "type": "boolean"
                    },
                    "devCommand": {
                        "description": "The dev command for this project. If omitted, this value will be automatically detected.\n",
                        "type": "string"
                    },
                    "directoryListing": {
                        "description": "If no index file is present within a directory, the directory contents will be displayed.\n",
                        "type": "boolean"
                    },
                    "environments": {
                        "description": "A list of environment variables that should be configured for the project.\n",
                        "items": {
                            "$ref": "#/types/vercel:index/getProjectEnvironment:getProjectEnvironment"
                        },
                        "type": "array"
                    },
                    "framework": {
                        "description": "The framework that is being used for this project. If omitted, no framework is selected.\n",
                        "type": "string"
                    },
                    "functionFailover": {
                        "description": "Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.\n",
                        "type": "boolean"
                    },
                    "gitComments": {
                        "$ref": "#/types/vercel:index/getProjectGitComments:getProjectGitComments",
                        "description": "Configuration for Git Comments.\n"
                    },
                    "gitForkProtection": {
                        "description": "Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json.\n",
                        "type": "boolean"
                    },
                    "gitLfs": {
                        "description": "Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.\n",
                        "type": "boolean"
                    },
                    "gitRepository": {
                        "$ref": "#/types/vercel:index/getProjectGitRepository:getProjectGitRepository",
                        "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.\n"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "ignoreCommand": {
                        "description": "When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.\n",
                        "type": "string"
                    },
                    "installCommand": {
                        "description": "The install command for this project. If omitted, this value will be automatically detected.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the project.\n",
                        "type": "string"
                    },
                    "oidcTokenConfig": {
                        "$ref": "#/types/vercel:index/getProjectOidcTokenConfig:getProjectOidcTokenConfig",
                        "description": "Configuration for OpenID Connect (OIDC) tokens.\n"
                    },
                    "optionsAllowlist": {
                        "$ref": "#/types/vercel:index/getProjectOptionsAllowlist:getProjectOptionsAllowlist",
                        "description": "Disable Deployment Protection for CORS preflight `OPTIONS` requests for a list of paths.\n"
                    },
                    "outputDirectory": {
                        "description": "The output directory of the project. When null is used this value will be automatically detected.\n",
                        "type": "string"
                    },
                    "passwordProtection": {
                        "$ref": "#/types/vercel:index/getProjectPasswordProtection:getProjectPasswordProtection",
                        "description": "Ensures visitors of your Preview Deployments must enter a password in order to gain access.\n"
                    },
                    "previewComments": {
                        "description": "Whether comments are enabled on your Preview Deployments.\n",
                        "type": "boolean"
                    },
                    "prioritiseProductionBuilds": {
                        "description": "If enabled, builds for the Production environment will be prioritized over Preview environments.\n",
                        "type": "boolean"
                    },
                    "protectionBypassForAutomation": {
                        "description": "Allows automation services to bypass Deployment Protection on this project when using an HTTP header named `x-vercel-protection-bypass` with the value from `protection_bypass_for_automation_secret`.\n",
                        "type": "boolean"
                    },
                    "protectionBypassForAutomationSecret": {
                        "description": "If `protection_bypass_for_automation` is enabled, optionally set this value to specify a 32 character secret, otherwise a secret will be generated.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "publicSource": {
                        "description": "Specifies whether the source code and logs of the deployments for this project should be public or not.\n",
                        "type": "boolean"
                    },
                    "resourceConfig": {
                        "$ref": "#/types/vercel:index/getProjectResourceConfig:getProjectResourceConfig",
                        "description": "Resource Configuration for the project.\n"
                    },
                    "rootDirectory": {
                        "description": "The name of a directory or relative path to the source code of your project. When null is used it will default to the project root.\n",
                        "type": "string"
                    },
                    "serverlessFunctionRegion": {
                        "description": "The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.\n",
                        "type": "string"
                    },
                    "skewProtection": {
                        "description": "Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The team ID the project exists beneath. Required when configuring a team resource if a default team has not been set in the provider.\n",
                        "type": "string"
                    },
                    "trustedIps": {
                        "$ref": "#/types/vercel:index/getProjectTrustedIps:getProjectTrustedIps",
                        "description": "Ensures only visitors from an allowed IP address can access your deployment.\n"
                    },
                    "vercelAuthentication": {
                        "$ref": "#/types/vercel:index/getProjectVercelAuthentication:getProjectVercelAuthentication",
                        "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.\n"
                    }
                },
                "required": [
                    "autoAssignCustomDomains",
                    "automaticallyExposeSystemEnvironmentVariables",
                    "buildCommand",
                    "customerSuccessCodeVisibility",
                    "devCommand",
                    "directoryListing",
                    "environments",
                    "framework",
                    "functionFailover",
                    "gitComments",
                    "gitForkProtection",
                    "gitLfs",
                    "gitRepository",
                    "id",
                    "ignoreCommand",
                    "installCommand",
                    "name",
                    "oidcTokenConfig",
                    "optionsAllowlist",
                    "outputDirectory",
                    "passwordProtection",
                    "previewComments",
                    "prioritiseProductionBuilds",
                    "protectionBypassForAutomation",
                    "protectionBypassForAutomationSecret",
                    "publicSource",
                    "resourceConfig",
                    "rootDirectory",
                    "serverlessFunctionRegion",
                    "skewProtection",
                    "teamId",
                    "trustedIps",
                    "vercelAuthentication"
                ],
                "type": "object"
            }
        },
        "vercel:index/getProjectDeploymentRetention:getProjectDeploymentRetention": {
            "description": "Provides a Project Deployment Retention datasource.\n\nA Project Deployment Retention datasource details information about Deployment Retention on a Vercel Project.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/security/deployment-retention).\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectDeploymentRetention.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project for the retention policy\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Vercel team.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectDeploymentRetention.\n",
                "properties": {
                    "expirationCanceled": {
                        "description": "The retention period for canceled deployments.\n",
                        "type": "string"
                    },
                    "expirationErrored": {
                        "description": "The retention period for errored deployments.\n",
                        "type": "string"
                    },
                    "expirationPreview": {
                        "description": "The retention period for preview deployments.\n",
                        "type": "string"
                    },
                    "expirationProduction": {
                        "description": "The retention period for production deployments.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The ID of the Project for the retention policy\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The ID of the Vercel team.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "expirationCanceled",
                    "expirationErrored",
                    "expirationPreview",
                    "expirationProduction",
                    "id",
                    "projectId",
                    "teamId"
                ],
                "type": "object"
            }
        },
        "vercel:index/getProjectDirectory:getProjectDirectory": {
            "inputs": {
                "description": "A collection of arguments for invoking getProjectDirectory.\n",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectDirectory.\n",
                "properties": {
                    "files": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of filename to metadata about the file. The metadata contains the file size and hash, and allows a deployment to be created if the file changes.\n",
                        "type": "object"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "required": [
                    "files",
                    "id",
                    "path"
                ],
                "type": "object"
            }
        },
        "vercel:index/getProjectMembers:getProjectMembers": {
            "description": "Retrieves members and their roles for a Vercel Project.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getProject({\n    name: \"example-with-members\",\n});\nconst exampleGetProjectMembers = example.then(example =\u003e vercel.getProjectMembers({\n    projectId: example.id,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_project(name=\"example-with-members\")\nexample_get_project_members = vercel.get_project_members(project_id=example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetProject.Invoke(new()\n    {\n        Name = \"example-with-members\",\n    });\n\n    var exampleGetProjectMembers = Vercel.GetProjectMembers.Invoke(new()\n    {\n        ProjectId = example.Apply(getProjectResult =\u003e getProjectResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vercel.LookupProject(ctx, \u0026vercel.LookupProjectArgs{\n\t\t\tName: \"example-with-members\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.LookupProjectMembers(ctx, \u0026vercel.LookupProjectMembersArgs{\n\t\t\tProjectId: example.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetProjectArgs;\nimport com.pulumi.vercel.inputs.GetProjectMembersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getProject(GetProjectArgs.builder()\n            .name(\"example-with-members\")\n            .build());\n\n        final var exampleGetProjectMembers = VercelFunctions.getProjectMembers(GetProjectMembersArgs.builder()\n            .projectId(example.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getProject\n      Arguments:\n        name: example-with-members\n  exampleGetProjectMembers:\n    fn::invoke:\n      Function: vercel:getProjectMembers\n      Arguments:\n        projectId: ${example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectMembers.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Vercel Project.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID to which the project belongs. Required when accessing a team project if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectMembers.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "members": {
                        "description": "The set of members in this project.\n",
                        "items": {
                            "$ref": "#/types/vercel:index/getProjectMembersMember:getProjectMembersMember"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "description": "The ID of the Vercel Project.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The team ID to which the project belongs. Required when accessing a team project if a default team has not been set in the provider.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "members",
                    "projectId",
                    "id"
                ],
                "type": "object"
            }
        },
        "vercel:index/getSharedEnvironmentVariable:getSharedEnvironmentVariable": {
            "description": "Provides information about an existing Shared Environment Variable within Vercel.\n\nA Shared Environment Variable resource defines an Environment Variable that can be shared between multiple Vercel Projects.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/environment-variables/shared-environment-variables).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\n// Environment variables can be identified by their ID, or by their key and target.\n// The ID can be taken from the network tab inside developer tools, while you are on the project page.\nconst example = vercel.getSharedEnvironmentVariable({\n    id: \"xxxxxxxxxxxxxxx\",\n});\n// Alternatively, you can use the key and target to identify the environment variable.\n// Note that all `target`s must be specified for a match to be found.\nconst exampleByKeyAndTarget = vercel.getSharedEnvironmentVariable({\n    key: \"MY_ENV_VAR\",\n    targets: [\n        \"production\",\n        \"preview\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\n# Environment variables can be identified by their ID, or by their key and target.\n# The ID can be taken from the network tab inside developer tools, while you are on the project page.\nexample = vercel.get_shared_environment_variable(id=\"xxxxxxxxxxxxxxx\")\n# Alternatively, you can use the key and target to identify the environment variable.\n# Note that all `target`s must be specified for a match to be found.\nexample_by_key_and_target = vercel.get_shared_environment_variable(key=\"MY_ENV_VAR\",\n    targets=[\n        \"production\",\n        \"preview\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Environment variables can be identified by their ID, or by their key and target.\n    // The ID can be taken from the network tab inside developer tools, while you are on the project page.\n    var example = Vercel.GetSharedEnvironmentVariable.Invoke(new()\n    {\n        Id = \"xxxxxxxxxxxxxxx\",\n    });\n\n    // Alternatively, you can use the key and target to identify the environment variable.\n    // Note that all `target`s must be specified for a match to be found.\n    var exampleByKeyAndTarget = Vercel.GetSharedEnvironmentVariable.Invoke(new()\n    {\n        Key = \"MY_ENV_VAR\",\n        Targets = new[]\n        {\n            \"production\",\n            \"preview\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Environment variables can be identified by their ID, or by their key and target.\n\t\t// The ID can be taken from the network tab inside developer tools, while you are on the project page.\n\t\t_, err := vercel.LookupSharedEnvironmentVariable(ctx, \u0026vercel.LookupSharedEnvironmentVariableArgs{\n\t\t\tId: pulumi.StringRef(\"xxxxxxxxxxxxxxx\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Alternatively, you can use the key and target to identify the environment variable.\n\t\t// Note that all `target`s must be specified for a match to be found.\n\t\t_, err = vercel.LookupSharedEnvironmentVariable(ctx, \u0026vercel.LookupSharedEnvironmentVariableArgs{\n\t\t\tKey: pulumi.StringRef(\"MY_ENV_VAR\"),\n\t\t\tTargets: []string{\n\t\t\t\t\"production\",\n\t\t\t\t\"preview\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetSharedEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Environment variables can be identified by their ID, or by their key and target.\n        // The ID can be taken from the network tab inside developer tools, while you are on the project page.\n        final var example = VercelFunctions.getSharedEnvironmentVariable(GetSharedEnvironmentVariableArgs.builder()\n            .id(\"xxxxxxxxxxxxxxx\")\n            .build());\n\n        // Alternatively, you can use the key and target to identify the environment variable.\n        // Note that all `target`s must be specified for a match to be found.\n        final var exampleByKeyAndTarget = VercelFunctions.getSharedEnvironmentVariable(GetSharedEnvironmentVariableArgs.builder()\n            .key(\"MY_ENV_VAR\")\n            .targets(            \n                \"production\",\n                \"preview\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Environment variables can be identified by their ID, or by their key and target.\n  # The ID can be taken from the network tab inside developer tools, while you are on the project page.\n  example:\n    fn::invoke:\n      Function: vercel:getSharedEnvironmentVariable\n      Arguments:\n        id: xxxxxxxxxxxxxxx\n  # Alternatively, you can use the key and target to identify the environment variable.\n  # Note that all `target`s must be specified for a match to be found.\n  exampleByKeyAndTarget:\n    fn::invoke:\n      Function: vercel:getSharedEnvironmentVariable\n      Arguments:\n        key: MY_ENV_VAR\n        targets:\n          - production\n          - preview\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSharedEnvironmentVariable.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment Variable.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the Environment Variable.\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Vercel team. Shared environment variables require a team.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSharedEnvironmentVariable.\n",
                "properties": {
                    "comment": {
                        "description": "A comment explaining what the environment variable is for.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the Environment Variable.\n",
                        "type": "string"
                    },
                    "key": {
                        "description": "The name of the Environment Variable.\n",
                        "type": "string"
                    },
                    "projectIds": {
                        "description": "The ID of the Vercel project.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "sensitive": {
                        "description": "Whether the Environment Variable is sensitive or not.\n",
                        "type": "boolean"
                    },
                    "targets": {
                        "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "teamId": {
                        "description": "The ID of the Vercel team. Shared environment variables require a team.\n",
                        "type": "string"
                    },
                    "value": {
                        "description": "The value of the Environment Variable.\n",
                        "secret": true,
                        "type": "string"
                    }
                },
                "required": [
                    "comment",
                    "id",
                    "key",
                    "projectIds",
                    "sensitive",
                    "targets",
                    "teamId",
                    "value"
                ],
                "type": "object"
            }
        },
        "vercel:index/getTeamConfig:getTeamConfig": {
            "description": "Retrieves the configuration of an existing Vercel Team.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getTeamConfig({\n    id: \"team_xxxxxxxxxxxxxxxxxxxxxxxx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_team_config(id=\"team_xxxxxxxxxxxxxxxxxxxxxxxx\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetTeamConfig.Invoke(new()\n    {\n        Id = \"team_xxxxxxxxxxxxxxxxxxxxxxxx\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupTeamConfig(ctx, \u0026vercel.LookupTeamConfigArgs{\n\t\t\tId: \"team_xxxxxxxxxxxxxxxxxxxxxxxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetTeamConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getTeamConfig(GetTeamConfigArgs.builder()\n            .id(\"team_xxxxxxxxxxxxxxxxxxxxxxxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getTeamConfig\n      Arguments:\n        id: team_xxxxxxxxxxxxxxxxxxxxxxxx\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeamConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the existing Vercel Team.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeamConfig.\n",
                "properties": {
                    "description": {
                        "description": "A description of the team.\n",
                        "type": "string"
                    },
                    "emailDomain": {
                        "description": "Hostname that'll be matched with emails on sign-up to automatically join the Team.\n",
                        "type": "string"
                    },
                    "enablePreviewFeedback": {
                        "description": "Preview feedback configuration.\n",
                        "type": "string"
                    },
                    "enableProductionFeedback": {
                        "description": "Production feedback configuration.\n",
                        "type": "string"
                    },
                    "hideIpAddresses": {
                        "description": "Indicates if ip addresses should be accessible in o11y tooling.\n",
                        "type": "boolean"
                    },
                    "hideIpAddressesInLogDrains": {
                        "description": "Indicates if ip addresses should be accessible in log drains.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The ID of the existing Vercel Team.\n",
                        "type": "string"
                    },
                    "inviteCode": {
                        "description": "A code that can be used to join this team. Only visible to Team owners.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the team.\n",
                        "type": "string"
                    },
                    "previewDeploymentSuffix": {
                        "description": "The hostname that is used as the preview deployment suffix.\n",
                        "type": "string"
                    },
                    "remoteCaching": {
                        "$ref": "#/types/vercel:index/getTeamConfigRemoteCaching:getTeamConfigRemoteCaching",
                        "description": "Configuration for Remote Caching.\n"
                    },
                    "saml": {
                        "$ref": "#/types/vercel:index/getTeamConfigSaml:getTeamConfigSaml",
                        "description": "Configuration for SAML authentication.\n"
                    },
                    "sensitiveEnvironmentVariablePolicy": {
                        "description": "The policy for sensitive environment variables.\n",
                        "type": "string"
                    },
                    "slug": {
                        "description": "The slug of the team. Used in the URL of the team's dashboard.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "emailDomain",
                    "enablePreviewFeedback",
                    "enableProductionFeedback",
                    "hideIpAddresses",
                    "hideIpAddressesInLogDrains",
                    "id",
                    "inviteCode",
                    "name",
                    "previewDeploymentSuffix",
                    "remoteCaching",
                    "saml",
                    "sensitiveEnvironmentVariablePolicy",
                    "slug"
                ],
                "type": "object"
            }
        },
        "vercel:index/getTeamMember:getTeamMember": {
            "description": "Provider a datasource for managing a team member.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst example = vercel.getTeamMember({\n    userId: \"uuuuuuuuuuuuuuuuuuuuuuuuuu\",\n    teamId: \"team_xxxxxxxxxxxxxxxxxxxxxxxx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample = vercel.get_team_member(user_id=\"uuuuuuuuuuuuuuuuuuuuuuuuuu\",\n    team_id=\"team_xxxxxxxxxxxxxxxxxxxxxxxx\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Vercel.GetTeamMember.Invoke(new()\n    {\n        UserId = \"uuuuuuuuuuuuuuuuuuuuuuuuuu\",\n        TeamId = \"team_xxxxxxxxxxxxxxxxxxxxxxxx\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/v2/go/vercel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.LookupTeamMember(ctx, \u0026vercel.LookupTeamMemberArgs{\n\t\t\tUserId: \"uuuuuuuuuuuuuuuuuuuuuuuuuu\",\n\t\t\tTeamId: \"team_xxxxxxxxxxxxxxxxxxxxxxxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetTeamMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = VercelFunctions.getTeamMember(GetTeamMemberArgs.builder()\n            .userId(\"uuuuuuuuuuuuuuuuuuuuuuuuuu\")\n            .teamId(\"team_xxxxxxxxxxxxxxxxxxxxxxxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: vercel:getTeamMember\n      Arguments:\n        userId: uuuuuuuuuuuuuuuuuuuuuuuuuu\n        teamId: team_xxxxxxxxxxxxxxxxxxxxxxxx\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeamMember.\n",
                "properties": {
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the existing Vercel Team.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the existing Vercel Team Member.\n"
                    }
                },
                "type": "object",
                "required": [
                    "teamId",
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeamMember.\n",
                "properties": {
                    "accessGroups": {
                        "description": "If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of access groups IDs that the user should be granted access to.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "projects": {
                        "description": "If access groups are enabled on the team, and the user is a CONTRIBUTOR, `projects`, `access_groups` or both must be specified. A set of projects that the user should be granted access to, along with their role in each project.\n",
                        "items": {
                            "$ref": "#/types/vercel:index/getTeamMemberProject:getTeamMemberProject"
                        },
                        "type": "array"
                    },
                    "role": {
                        "description": "The role that the user should have in the project. One of 'MEMBER', 'OWNER', 'VIEWER', 'DEVELOPER', 'BILLING' or 'CONTRIBUTOR'. Depending on your Team's plan, some of these roles may be unavailable.\n",
                        "type": "string"
                    },
                    "teamId": {
                        "description": "The ID of the existing Vercel Team.\n",
                        "type": "string"
                    },
                    "userId": {
                        "description": "The ID of the existing Vercel Team Member.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accessGroups",
                    "id",
                    "projects",
                    "role",
                    "teamId",
                    "userId"
                ],
                "type": "object"
            }
        }
    }
}