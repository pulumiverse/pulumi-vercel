{
    "attribution": "This Pulumi package is based on the [`vercel` Terraform Provider](https://github.com/vercel/terraform-provider-vercel).",
    "auto-aliasing": {
        "resources": {
            "vercel_access_group": {
                "current": "vercel:index/accessGroup:AccessGroup",
                "majorVersion": 1
            },
            "vercel_access_group_project": {
                "current": "vercel:index/accessGroupProject:AccessGroupProject",
                "majorVersion": 1
            },
            "vercel_alias": {
                "current": "vercel:index/alias:Alias",
                "majorVersion": 1
            },
            "vercel_attack_challenge_mode": {
                "current": "vercel:index/attackChallengeMode:AttackChallengeMode",
                "majorVersion": 1
            },
            "vercel_custom_environment": {
                "current": "vercel:index/customEnvironment:CustomEnvironment",
                "majorVersion": 1
            },
            "vercel_deployment": {
                "current": "vercel:index/deployment:Deployment",
                "majorVersion": 1,
                "fields": {
                    "domains": {
                        "maxItemsOne": false
                    }
                }
            },
            "vercel_dns_record": {
                "current": "vercel:index/dnsRecord:DnsRecord",
                "majorVersion": 1
            },
            "vercel_edge_config": {
                "current": "vercel:index/edgeConfig:EdgeConfig",
                "majorVersion": 1
            },
            "vercel_edge_config_item": {
                "current": "vercel:index/edgeConfigItem:EdgeConfigItem",
                "majorVersion": 1
            },
            "vercel_edge_config_schema": {
                "current": "vercel:index/edgeConfigSchema:EdgeConfigSchema",
                "majorVersion": 1
            },
            "vercel_edge_config_token": {
                "current": "vercel:index/edgeConfigToken:EdgeConfigToken",
                "majorVersion": 1
            },
            "vercel_firewall_bypass": {
                "current": "vercel:index/firewallBypass:FirewallBypass",
                "majorVersion": 1
            },
            "vercel_firewall_config": {
                "current": "vercel:index/firewallConfig:FirewallConfig",
                "majorVersion": 1,
                "fields": {
                    "ip_rules": {
                        "fields": {
                            "rule": {
                                "maxItemsOne": false
                            }
                        }
                    },
                    "rules": {
                        "fields": {
                            "rule": {
                                "maxItemsOne": false,
                                "elem": {
                                    "fields": {
                                        "action": {
                                            "fields": {
                                                "rate_limit": {
                                                    "fields": {
                                                        "keys": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "condition_group": {
                                            "maxItemsOne": false,
                                            "elem": {
                                                "fields": {
                                                    "conditions": {
                                                        "maxItemsOne": false,
                                                        "elem": {
                                                            "fields": {
                                                                "values": {
                                                                    "maxItemsOne": false
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "vercel_integration_project_access": {
                "current": "vercel:index/integrationProjectAccess:IntegrationProjectAccess",
                "majorVersion": 1
            },
            "vercel_log_drain": {
                "current": "vercel:index/logDrain:LogDrain",
                "majorVersion": 1,
                "fields": {
                    "environments": {
                        "maxItemsOne": false
                    },
                    "project_ids": {
                        "maxItemsOne": false
                    },
                    "sources": {
                        "maxItemsOne": false
                    }
                }
            },
            "vercel_microfrontend_group": {
                "current": "vercel:index/microfrontendGroup:MicrofrontendGroup",
                "majorVersion": 1
            },
            "vercel_microfrontend_group_membership": {
                "current": "vercel:index/microfrontendGroupMembership:MicrofrontendGroupMembership",
                "majorVersion": 1
            },
            "vercel_project": {
                "current": "vercel:index/project:Project",
                "majorVersion": 1,
                "fields": {
                    "environment": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "custom_environment_ids": {
                                    "maxItemsOne": false
                                },
                                "target": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "git_repository": {
                        "fields": {
                            "deploy_hooks": {
                                "maxItemsOne": false
                            }
                        }
                    },
                    "options_allowlist": {
                        "fields": {
                            "paths": {
                                "maxItemsOne": false
                            }
                        }
                    },
                    "trusted_ips": {
                        "fields": {
                            "addresses": {
                                "maxItemsOne": false
                            }
                        }
                    }
                }
            },
            "vercel_project_deployment_retention": {
                "current": "vercel:index/projectDeploymentRetention:ProjectDeploymentRetention",
                "majorVersion": 1
            },
            "vercel_project_domain": {
                "current": "vercel:index/projectDomain:ProjectDomain",
                "majorVersion": 1
            },
            "vercel_project_environment_variable": {
                "current": "vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable",
                "majorVersion": 1,
                "fields": {
                    "custom_environment_ids": {
                        "maxItemsOne": false
                    },
                    "target": {
                        "maxItemsOne": false
                    }
                }
            },
            "vercel_project_environment_variables": {
                "current": "vercel:index/projectEnvironmentVariables:ProjectEnvironmentVariables",
                "majorVersion": 1,
                "fields": {
                    "variables": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "custom_environment_ids": {
                                    "maxItemsOne": false
                                },
                                "target": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "vercel_project_members": {
                "current": "vercel:index/projectMembers:ProjectMembers",
                "majorVersion": 1,
                "fields": {
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "vercel_shared_environment_variable": {
                "current": "vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable",
                "majorVersion": 1,
                "fields": {
                    "project_ids": {
                        "maxItemsOne": false
                    },
                    "target": {
                        "maxItemsOne": false
                    }
                }
            },
            "vercel_shared_environment_variable_project_link": {
                "current": "vercel:index/sharedEnvironmentVariableProjectLink:SharedEnvironmentVariableProjectLink",
                "majorVersion": 1
            },
            "vercel_team_config": {
                "current": "vercel:index/teamConfig:TeamConfig",
                "majorVersion": 1
            },
            "vercel_team_member": {
                "current": "vercel:index/teamMember:TeamMember",
                "majorVersion": 1,
                "fields": {
                    "access_groups": {
                        "maxItemsOne": false
                    },
                    "projects": {
                        "maxItemsOne": false
                    }
                }
            },
            "vercel_webhook": {
                "current": "vercel:index/webhook:Webhook",
                "majorVersion": 1,
                "fields": {
                    "events": {
                        "maxItemsOne": false
                    },
                    "project_ids": {
                        "maxItemsOne": false
                    }
                }
            }
        },
        "datasources": {
            "vercel_access_group": {
                "current": "vercel:index/getAccessGroup:getAccessGroup",
                "majorVersion": 1
            },
            "vercel_access_group_project": {
                "current": "vercel:index/getAccessGroupProject:getAccessGroupProject",
                "majorVersion": 1
            },
            "vercel_alias": {
                "current": "vercel:index/getAlias:getAlias",
                "majorVersion": 1
            },
            "vercel_attack_challenge_mode": {
                "current": "vercel:index/getAttackChallengeMode:getAttackChallengeMode",
                "majorVersion": 1
            },
            "vercel_custom_environment": {
                "current": "vercel:index/getCustomEnvironment:getCustomEnvironment",
                "majorVersion": 1
            },
            "vercel_deployment": {
                "current": "vercel:index/getDeployment:getDeployment",
                "majorVersion": 1,
                "fields": {
                    "domains": {
                        "maxItemsOne": false
                    }
                }
            },
            "vercel_edge_config": {
                "current": "vercel:index/getEdgeConfig:getEdgeConfig",
                "majorVersion": 1
            },
            "vercel_edge_config_item": {
                "current": "vercel:index/getEdgeConfigItem:getEdgeConfigItem",
                "majorVersion": 1
            },
            "vercel_edge_config_schema": {
                "current": "vercel:index/getEdgeConfigSchema:getEdgeConfigSchema",
                "majorVersion": 1
            },
            "vercel_edge_config_token": {
                "current": "vercel:index/getEdgeConfigToken:getEdgeConfigToken",
                "majorVersion": 1
            },
            "vercel_endpoint_verification": {
                "current": "vercel:index/getEndpointVerification:getEndpointVerification",
                "majorVersion": 1
            },
            "vercel_file": {
                "current": "vercel:index/getFile:getFile",
                "majorVersion": 1
            },
            "vercel_log_drain": {
                "current": "vercel:index/getLogDrain:getLogDrain",
                "majorVersion": 1,
                "fields": {
                    "environments": {
                        "maxItemsOne": false
                    },
                    "project_ids": {
                        "maxItemsOne": false
                    },
                    "sources": {
                        "maxItemsOne": false
                    }
                }
            },
            "vercel_microfrontend_group": {
                "current": "vercel:index/getMicrofrontendGroup:getMicrofrontendGroup",
                "majorVersion": 1
            },
            "vercel_microfrontend_group_membership": {
                "current": "vercel:index/getMicrofrontendGroupMembership:getMicrofrontendGroupMembership",
                "majorVersion": 1
            },
            "vercel_prebuilt_project": {
                "current": "vercel:index/getPrebuiltProject:getPrebuiltProject",
                "majorVersion": 1
            },
            "vercel_project": {
                "current": "vercel:index/getProject:getProject",
                "majorVersion": 1,
                "fields": {
                    "environment": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "custom_environment_ids": {
                                    "maxItemsOne": false
                                },
                                "target": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "git_repository": {
                        "fields": {
                            "deploy_hooks": {
                                "maxItemsOne": false
                            }
                        }
                    },
                    "options_allowlist": {
                        "fields": {
                            "paths": {
                                "maxItemsOne": false
                            }
                        }
                    },
                    "trusted_ips": {
                        "fields": {
                            "addresses": {
                                "maxItemsOne": false
                            }
                        }
                    }
                }
            },
            "vercel_project_deployment_retention": {
                "current": "vercel:index/getProjectDeploymentRetention:getProjectDeploymentRetention",
                "majorVersion": 1
            },
            "vercel_project_directory": {
                "current": "vercel:index/getProjectDirectory:getProjectDirectory",
                "majorVersion": 1
            },
            "vercel_project_members": {
                "current": "vercel:index/getProjectMembers:getProjectMembers",
                "majorVersion": 1,
                "fields": {
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "vercel_shared_environment_variable": {
                "current": "vercel:index/getSharedEnvironmentVariable:getSharedEnvironmentVariable",
                "majorVersion": 1,
                "fields": {
                    "project_ids": {
                        "maxItemsOne": false
                    },
                    "target": {
                        "maxItemsOne": false
                    }
                }
            },
            "vercel_team_config": {
                "current": "vercel:index/getTeamConfig:getTeamConfig",
                "majorVersion": 1
            },
            "vercel_team_member": {
                "current": "vercel:index/getTeamMember:getTeamMember",
                "majorVersion": 1,
                "fields": {
                    "access_groups": {
                        "maxItemsOne": false
                    },
                    "projects": {
                        "maxItemsOne": false
                    }
                }
            }
        }
    },
    "auto-settings": {},
    "config": {
        "variables": {
            "apiToken": {
                "type": "string",
                "description": "The Vercel API Token to use. This can also be specified with the `VERCEL_API_TOKEN` shell environment variable. Tokens\ncan be created from your [Vercel settings](https://vercel.com/account/tokens).\n",
                "secret": true
            },
            "team": {
                "type": "string",
                "description": "The default Vercel Team to use when creating resources. This can be provided as either a team slug, or team ID. The slug\nand ID are both available from the Team Settings page in the Vercel dashboard.\n"
            }
        }
    },
    "description": "A Pulumi package for creating and managing vercel cloud resources.",
    "displayName": "Vercel",
    "functions": {
        "vercel:index/getAlias:getAlias": {
            "description": "Provides information about an existing Alias resource.\n\nAn Alias allows a `vercel.Deployment` to be accessed through a different URL.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlias.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "The Alias or Alias ID to be retrieved.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "alias"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlias.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "The Alias or Alias ID to be retrieved.\n"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "The ID of the Deployment the Alias is associated with.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "alias",
                    "deploymentId",
                    "id",
                    "teamId"
                ]
            }
        },
        "vercel:index/getFile:getFile": {
            "description": "Provides information about a file on disk.\n\nThis will read a single file, providing metadata for use with a `vercel.Deployment`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst exampleFile = vercel.getFile({\n    path: \"index.html\",\n});\nconst exampleProject = vercel.getProject({\n    name: \"my-project\",\n});\nconst exampleDeployment = new vercel.Deployment(\"exampleDeployment\", {\n    projectId: exampleProject.then(exampleProject =\u003e exampleProject.id),\n    files: exampleFile.then(exampleFile =\u003e exampleFile.file),\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample_file = vercel.get_file(path=\"index.html\")\nexample_project = vercel.get_project(name=\"my-project\")\nexample_deployment = vercel.Deployment(\"exampleDeployment\",\n    project_id=example_project.id,\n    files=example_file.file)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleFile = Vercel.GetFile.Invoke(new()\n    {\n        Path = \"index.html\",\n    });\n\n    var exampleProject = Vercel.GetProject.Invoke(new()\n    {\n        Name = \"my-project\",\n    });\n\n    var exampleDeployment = new Vercel.Deployment(\"exampleDeployment\", new()\n    {\n        ProjectId = exampleProject.Apply(getProjectResult =\u003e getProjectResult.Id),\n        Files = exampleFile.Apply(getFileResult =\u003e getFileResult.File),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleFile, err := vercel.GetFile(ctx, \u0026vercel.GetFileArgs{\n\t\t\tPath: \"index.html\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleProject, err := vercel.LookupProject(ctx, \u0026vercel.LookupProjectArgs{\n\t\t\tName: \"my-project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDeployment(ctx, \"exampleDeployment\", \u0026vercel.DeploymentArgs{\n\t\t\tProjectId: *pulumi.String(exampleProject.Id),\n\t\t\tFiles:     interface{}(exampleFile.File),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetFileArgs;\nimport com.pulumi.vercel.inputs.GetProjectArgs;\nimport com.pulumi.vercel.Deployment;\nimport com.pulumi.vercel.DeploymentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleFile = VercelFunctions.getFile(GetFileArgs.builder()\n            .path(\"index.html\")\n            .build());\n\n        final var exampleProject = VercelFunctions.getProject(GetProjectArgs.builder()\n            .name(\"my-project\")\n            .build());\n\n        var exampleDeployment = new Deployment(\"exampleDeployment\", DeploymentArgs.builder()        \n            .projectId(exampleProject.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .files(exampleFile.applyValue(getFileResult -\u003e getFileResult.file()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleDeployment:\n    type: vercel:Deployment\n    properties:\n      projectId: ${exampleProject.id}\n      files: ${exampleFile.file}\nvariables:\n  exampleFile:\n    fn::invoke:\n      Function: vercel:getFile\n      Arguments:\n        path: index.html\n  exampleProject:\n    fn::invoke:\n      Function: vercel:getProject\n      Arguments:\n        name: my-project\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFile.\n",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFile.\n",
                "properties": {
                    "file": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of filename to metadata about the file. The metadata contains the file size and hash, and allows a deployment to be created if the file changes.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "file",
                    "id",
                    "path"
                ]
            }
        },
        "vercel:index/getPrebuiltProject:getPrebuiltProject": {
            "inputs": {
                "description": "A collection of arguments for invoking getPrebuiltProject.\n",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrebuiltProject.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "output": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of output file to metadata about the file. The metadata contains the file size and hash, and allows a deployment to be created if the file changes.\n"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "output",
                    "path"
                ]
            }
        },
        "vercel:index/getProject:getProject": {
            "description": "Provides information about an existing project within Vercel.\n\nA Project groups deployments and custom domains. To deploy on Vercel, you need a Project.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/overview).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst foo = vercel.getProject({\n    name: \"my-existing-project\",\n});\nexport const projectId = foo.then(foo =\u003e foo.id);\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nfoo = vercel.get_project(name=\"my-existing-project\")\npulumi.export(\"projectId\", foo.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Vercel.GetProject.Invoke(new()\n    {\n        Name = \"my-existing-project\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"projectId\"] = foo.Apply(getProjectResult =\u003e getProjectResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := vercel.LookupProject(ctx, \u0026vercel.LookupProjectArgs{\n\t\t\tName: \"my-existing-project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"projectId\", foo.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.VercelFunctions;\nimport com.pulumi.vercel.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = VercelFunctions.getProject(GetProjectArgs.builder()\n            .name(\"my-existing-project\")\n            .build());\n\n        ctx.export(\"projectId\", foo.applyValue(getProjectResult -\u003e getProjectResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: vercel:getProject\n      Arguments:\n        name: my-existing-project\noutputs:\n  # Outputs prj_xxxxxx\n  projectId: ${foo.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "passwordProtection": {
                        "$ref": "#/types/vercel:index/getProjectPasswordProtection:getProjectPasswordProtection",
                        "description": "Ensures visitors of your Preview Deployments must enter a password in order to gain access.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID the project exists beneath. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "buildCommand": {
                        "type": "string",
                        "description": "The build command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "devCommand": {
                        "type": "string",
                        "description": "The dev command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vercel:index/getProjectEnvironment:getProjectEnvironment"
                        },
                        "description": "A list of environment variables that should be configured for the project.\n"
                    },
                    "framework": {
                        "type": "string",
                        "description": "The framework that is being used for this project. If omitted, no framework is selected.\n"
                    },
                    "gitRepository": {
                        "$ref": "#/types/vercel:index/getProjectGitRepository:getProjectGitRepository",
                        "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "ignoreCommand": {
                        "type": "string",
                        "description": "When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.\n"
                    },
                    "installCommand": {
                        "type": "string",
                        "description": "The install command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "outputDirectory": {
                        "type": "string",
                        "description": "The output directory of the project. When null is used this value will be automatically detected.\n"
                    },
                    "passwordProtection": {
                        "$ref": "#/types/vercel:index/getProjectPasswordProtection:getProjectPasswordProtection",
                        "description": "Ensures visitors of your Preview Deployments must enter a password in order to gain access.\n"
                    },
                    "publicSource": {
                        "type": "boolean",
                        "description": "Specifies whether the source code and logs of the deployments for this project should be public or not.\n"
                    },
                    "rootDirectory": {
                        "type": "string",
                        "description": "The name of a directory or relative path to the source code of your project. When null is used it will default to the project root.\n"
                    },
                    "serverlessFunctionRegion": {
                        "type": "string",
                        "description": "The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID the project exists beneath. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "vercelAuthentication": {
                        "$ref": "#/types/vercel:index/getProjectVercelAuthentication:getProjectVercelAuthentication",
                        "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.\n"
                    }
                },
                "type": "object",
                "required": [
                    "buildCommand",
                    "devCommand",
                    "environments",
                    "framework",
                    "gitRepository",
                    "id",
                    "ignoreCommand",
                    "installCommand",
                    "name",
                    "outputDirectory",
                    "publicSource",
                    "rootDirectory",
                    "serverlessFunctionRegion",
                    "teamId",
                    "vercelAuthentication"
                ]
            }
        },
        "vercel:index/getProjectDirectory:getProjectDirectory": {
            "inputs": {
                "description": "A collection of arguments for invoking getProjectDirectory.\n",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectDirectory.\n",
                "properties": {
                    "files": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of filename to metadata about the file. The metadata contains the file size and hash, and allows a deployment to be created if the file changes.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "files",
                    "id",
                    "path"
                ]
            }
        }
    },
    "homepage": "https://www.pulumi.com",
    "keywords": [
        "pulumi",
        "vercel",
        "category/cloud"
    ],
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumiverse/pulumi-vercel/sdk/go/vercel"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing vercel cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vercel/terraform-provider-vercel)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-vercel` repo](https://github.com/pulumiverse/pulumi-vercel/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-vercel` repo](https://github.com/vercel/terraform-provider-vercel/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vercel/terraform-provider-vercel)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-vercel` repo](https://github.com/pulumiverse/pulumi-vercel/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-vercel` repo](https://github.com/vercel/terraform-provider-vercel/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "license": "Apache-2.0",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "name": "vercel",
    "provider": {
        "description": "The provider type for the vercel package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiToken": {
                "type": "string",
                "description": "The Vercel API Token to use. This can also be specified with the `VERCEL_API_TOKEN` shell environment variable. Tokens\ncan be created from your [Vercel settings](https://vercel.com/account/tokens).\n",
                "secret": true
            },
            "team": {
                "type": "string",
                "description": "The default Vercel Team to use when creating resources. This can be provided as either a team slug, or team ID. The slug\nand ID are both available from the Team Settings page in the Vercel dashboard.\n"
            }
        },
        "inputProperties": {
            "apiToken": {
                "type": "string",
                "description": "The Vercel API Token to use. This can also be specified with the `VERCEL_API_TOKEN` shell environment variable. Tokens\ncan be created from your [Vercel settings](https://vercel.com/account/tokens).\n",
                "secret": true
            },
            "team": {
                "type": "string",
                "description": "The default Vercel Team to use when creating resources. This can be provided as either a team slug, or team ID. The slug\nand ID are both available from the Team Settings page in the Vercel dashboard.\n"
            }
        }
    },
    "publisher": "Omer Cohen",
    "renames": {
        "resources": {
            "vercel:index/alias:Alias": "vercel_alias",
            "vercel:index/deployment:Deployment": "vercel_deployment",
            "vercel:index/dnsRecord:DnsRecord": "vercel_dns_record",
            "vercel:index/project:Project": "vercel_project",
            "vercel:index/projectDomain:ProjectDomain": "vercel_project_domain",
            "vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable": "vercel_project_environment_variable",
            "vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable": "vercel_shared_environment_variable"
        },
        "functions": {
            "vercel:index/getAlias:getAlias": "vercel_alias",
            "vercel:index/getFile:getFile": "vercel_file",
            "vercel:index/getPrebuiltProject:getPrebuiltProject": "vercel_prebuilt_project",
            "vercel:index/getProject:getProject": "vercel_project",
            "vercel:index/getProjectDirectory:getProjectDirectory": "vercel_project_directory"
        },
        "renamedProperties": {
            "vercel:index/DeploymentProjectSettings:DeploymentProjectSettings": {
                "buildCommand": "build_command",
                "installCommand": "install_command",
                "outputDirectory": "output_directory",
                "rootDirectory": "root_directory"
            },
            "vercel:index/ProjectEnvironment:ProjectEnvironment": {
                "gitBranch": "git_branch",
                "targets": "target"
            },
            "vercel:index/ProjectGitRepository:ProjectGitRepository": {
                "productionBranch": "production_branch"
            },
            "vercel:index/ProjectPasswordProtection:ProjectPasswordProtection": {
                "deploymentType": "deployment_type"
            },
            "vercel:index/ProjectTrustedIps:ProjectTrustedIps": {
                "deploymentType": "deployment_type",
                "protectionMode": "protection_mode"
            },
            "vercel:index/ProjectVercelAuthentication:ProjectVercelAuthentication": {
                "deploymentType": "deployment_type"
            },
            "vercel:index/alias:Alias": {
                "deploymentId": "deployment_id",
                "teamId": "team_id"
            },
            "vercel:index/deployment:Deployment": {
                "deleteOnDestroy": "delete_on_destroy",
                "pathPrefix": "path_prefix",
                "projectId": "project_id",
                "projectSettings": "project_settings",
                "teamId": "team_id"
            },
            "vercel:index/dnsRecord:DnsRecord": {
                "mxPriority": "mx_priority",
                "teamId": "team_id"
            },
            "vercel:index/getAlias:getAlias": {
                "deploymentId": "deployment_id",
                "teamId": "team_id"
            },
            "vercel:index/getProject:getProject": {
                "buildCommand": "build_command",
                "devCommand": "dev_command",
                "environments": "environment",
                "gitRepository": "git_repository",
                "ignoreCommand": "ignore_command",
                "installCommand": "install_command",
                "outputDirectory": "output_directory",
                "passwordProtection": "password_protection",
                "publicSource": "public_source",
                "rootDirectory": "root_directory",
                "serverlessFunctionRegion": "serverless_function_region",
                "teamId": "team_id",
                "trustedIps": "trusted_ips",
                "vercelAuthentication": "vercel_authentication"
            },
            "vercel:index/getProjectEnvironment:getProjectEnvironment": {
                "gitBranch": "git_branch",
                "targets": "target"
            },
            "vercel:index/getProjectGitRepository:getProjectGitRepository": {
                "productionBranch": "production_branch"
            },
            "vercel:index/getProjectPasswordProtection:getProjectPasswordProtection": {
                "deploymentType": "deployment_type"
            },
            "vercel:index/getProjectTrustedIps:getProjectTrustedIps": {
                "deploymentType": "deployment_type",
                "protectionMode": "protection_mode"
            },
            "vercel:index/getProjectVercelAuthentication:getProjectVercelAuthentication": {
                "deploymentType": "deployment_type"
            },
            "vercel:index/project:Project": {
                "buildCommand": "build_command",
                "devCommand": "dev_command",
                "environments": "environment",
                "gitRepository": "git_repository",
                "ignoreCommand": "ignore_command",
                "installCommand": "install_command",
                "outputDirectory": "output_directory",
                "passwordProtection": "password_protection",
                "protectionBypassForAutomation": "protection_bypass_for_automation",
                "protectionBypassForAutomationSecret": "protection_bypass_for_automation_secret",
                "publicSource": "public_source",
                "rootDirectory": "root_directory",
                "serverlessFunctionRegion": "serverless_function_region",
                "teamId": "team_id",
                "trustedIps": "trusted_ips",
                "vercelAuthentication": "vercel_authentication"
            },
            "vercel:index/projectDomain:ProjectDomain": {
                "gitBranch": "git_branch",
                "projectId": "project_id",
                "redirectStatusCode": "redirect_status_code",
                "teamId": "team_id"
            },
            "vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable": {
                "gitBranch": "git_branch",
                "projectId": "project_id",
                "targets": "target",
                "teamId": "team_id"
            },
            "vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable": {
                "projectIds": "project_ids",
                "targets": "target",
                "teamId": "team_id"
            },
            "vercel:index:Provider": {
                "apiToken": "api_token"
            }
        },
        "renamedConfigProperties": {
            "apiToken": "api_token"
        }
    },
    "repository": "https://github.com/pulumiverse/pulumi-vercel",
    "resources": {
        "vercel:index/alias:Alias": {
            "description": "Provides an Alias resource.\n\nAn Alias allows a `vercel.Deployment` to be accessed through a different URL.\n",
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The Alias we want to assign to the deployment defined in the URL.\n",
                    "language": {
                        "csharp": {
                            "name": "DeploymentAlias"
                        }
                    }
                },
                "deploymentId": {
                    "type": "string",
                    "description": "The id of the Deployment the Alias should be associated with.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "alias",
                "deploymentId",
                "teamId"
            ],
            "inputProperties": {
                "alias": {
                    "type": "string",
                    "description": "The Alias we want to assign to the deployment defined in the URL.\n",
                    "language": {
                        "csharp": {
                            "name": "DeploymentAlias"
                        }
                    }
                },
                "deploymentId": {
                    "type": "string",
                    "description": "The id of the Deployment the Alias should be associated with.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "alias",
                "deploymentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alias resources.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "The Alias we want to assign to the deployment defined in the URL.\n",
                        "language": {
                            "csharp": {
                                "name": "DeploymentAlias"
                            }
                        }
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "The id of the Deployment the Alias should be associated with.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the Alias and Deployment exist under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/deployment:Deployment": {
            "properties": {
                "deleteOnDestroy": {
                    "type": "boolean",
                    "description": "Set to true to hard delete the Vercel deployment when destroying the Terraform resource. If unspecified, deployments are\nretained indefinitely. Note that deleted deployments are not recoverable.\n"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.\n"
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `vercel.Project` resource.\n"
                },
                "files": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of files to be uploaded for the deployment. This should be provided by a `vercel.getProjectDirectory` or `vercel.getFile` data source. Required if `git_source` is not set.\n"
                },
                "pathPrefix": {
                    "type": "string",
                    "description": "If specified then the `path_prefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.\n"
                },
                "production": {
                    "type": "boolean",
                    "description": "true if the deployment is a production deployment, meaning production aliases will be assigned.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID to add the deployment to.\n"
                },
                "projectSettings": {
                    "$ref": "#/types/vercel:index/DeploymentProjectSettings:DeploymentProjectSettings",
                    "description": "Project settings that will be applied to the deployment.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `ref` is not set.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "url": {
                    "type": "string",
                    "description": "A unique URL that is automatically generated for a deployment.\n"
                }
            },
            "required": [
                "domains",
                "production",
                "projectId",
                "teamId",
                "url"
            ],
            "inputProperties": {
                "deleteOnDestroy": {
                    "type": "boolean",
                    "description": "Set to true to hard delete the Vercel deployment when destroying the Terraform resource. If unspecified, deployments are\nretained indefinitely. Note that deleted deployments are not recoverable.\n"
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `vercel.Project` resource.\n"
                },
                "files": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of files to be uploaded for the deployment. This should be provided by a `vercel.getProjectDirectory` or `vercel.getFile` data source. Required if `git_source` is not set.\n"
                },
                "pathPrefix": {
                    "type": "string",
                    "description": "If specified then the `path_prefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.\n"
                },
                "production": {
                    "type": "boolean",
                    "description": "true if the deployment is a production deployment, meaning production aliases will be assigned.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID to add the deployment to.\n"
                },
                "projectSettings": {
                    "$ref": "#/types/vercel:index/DeploymentProjectSettings:DeploymentProjectSettings",
                    "description": "Project settings that will be applied to the deployment.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `ref` is not set.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Deployment resources.\n",
                "properties": {
                    "deleteOnDestroy": {
                        "type": "boolean",
                        "description": "Set to true to hard delete the Vercel deployment when destroying the Terraform resource. If unspecified, deployments are\nretained indefinitely. Note that deleted deployments are not recoverable.\n"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.\n"
                    },
                    "environment": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `vercel.Project` resource.\n"
                    },
                    "files": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of files to be uploaded for the deployment. This should be provided by a `vercel.getProjectDirectory` or `vercel.getFile` data source. Required if `git_source` is not set.\n"
                    },
                    "pathPrefix": {
                        "type": "string",
                        "description": "If specified then the `path_prefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.\n"
                    },
                    "production": {
                        "type": "boolean",
                        "description": "true if the deployment is a production deployment, meaning production aliases will be assigned.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID to add the deployment to.\n"
                    },
                    "projectSettings": {
                        "$ref": "#/types/vercel:index/DeploymentProjectSettings:DeploymentProjectSettings",
                        "description": "Project settings that will be applied to the deployment.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `ref` is not set.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "A unique URL that is automatically generated for a deployment.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/dnsRecord:DnsRecord": {
            "description": "Provides a DNS Record resource.\n\nDNS records are instructions that live in authoritative DNS servers and provide information about a domain.\n\n\u003e The `value` field must be specified on all DNS record types except `SRV`. When using `SRV` DNS records, the `srv` field must be specified.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/custom-domains#dns-records)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst dnsRecord = new vercel.DnsRecord(\"dnsRecord\", {\n    domain: \"example.com\",\n    ttl: 60,\n    type: \"A\",\n    value: \"192.168.0.1\",\n});\nconst aaaa = new vercel.DnsRecord(\"aaaa\", {\n    domain: \"example.com\",\n    ttl: 60,\n    type: \"AAAA\",\n    value: \"::0\",\n});\nconst alias = new vercel.DnsRecord(\"alias\", {\n    domain: \"example.com\",\n    ttl: 60,\n    type: \"ALIAS\",\n    value: \"example2.com.\",\n});\nconst caa = new vercel.DnsRecord(\"caa\", {\n    domain: \"example.com\",\n    ttl: 60,\n    type: \"CAA\",\n    value: \"1 issue \\\"letsencrypt.org\\\"\",\n});\nconst cname = new vercel.DnsRecord(\"cname\", {\n    domain: \"example.com\",\n    ttl: 60,\n    type: \"CNAME\",\n    value: \"example2.com.\",\n});\nconst mx = new vercel.DnsRecord(\"mx\", {\n    domain: \"example.com\",\n    mxPriority: 333,\n    ttl: 60,\n    type: \"MX\",\n    value: \"example2.com.\",\n});\nconst srv = new vercel.DnsRecord(\"srv\", {\n    domain: \"example.com\",\n    srv: {\n        port: 6000,\n        priority: 127,\n        target: \"example2.com.\",\n        weight: 60,\n    },\n    ttl: 60,\n    type: \"SRV\",\n});\nconst txt = new vercel.DnsRecord(\"txt\", {\n    domain: \"example.com\",\n    ttl: 60,\n    type: \"TXT\",\n    value: \"some text value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\ndns_record = vercel.DnsRecord(\"dnsRecord\",\n    domain=\"example.com\",\n    ttl=60,\n    type=\"A\",\n    value=\"192.168.0.1\")\naaaa = vercel.DnsRecord(\"aaaa\",\n    domain=\"example.com\",\n    ttl=60,\n    type=\"AAAA\",\n    value=\"::0\")\nalias = vercel.DnsRecord(\"alias\",\n    domain=\"example.com\",\n    ttl=60,\n    type=\"ALIAS\",\n    value=\"example2.com.\")\ncaa = vercel.DnsRecord(\"caa\",\n    domain=\"example.com\",\n    ttl=60,\n    type=\"CAA\",\n    value=\"1 issue \\\"letsencrypt.org\\\"\")\ncname = vercel.DnsRecord(\"cname\",\n    domain=\"example.com\",\n    ttl=60,\n    type=\"CNAME\",\n    value=\"example2.com.\")\nmx = vercel.DnsRecord(\"mx\",\n    domain=\"example.com\",\n    mx_priority=333,\n    ttl=60,\n    type=\"MX\",\n    value=\"example2.com.\")\nsrv = vercel.DnsRecord(\"srv\",\n    domain=\"example.com\",\n    srv=vercel.DnsRecordSrvArgs(\n        port=6000,\n        priority=127,\n        target=\"example2.com.\",\n        weight=60,\n    ),\n    ttl=60,\n    type=\"SRV\")\ntxt = vercel.DnsRecord(\"txt\",\n    domain=\"example.com\",\n    ttl=60,\n    type=\"TXT\",\n    value=\"some text value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dnsRecord = new Vercel.DnsRecord(\"dnsRecord\", new()\n    {\n        Domain = \"example.com\",\n        Ttl = 60,\n        Type = \"A\",\n        Value = \"192.168.0.1\",\n    });\n\n    var aaaa = new Vercel.DnsRecord(\"aaaa\", new()\n    {\n        Domain = \"example.com\",\n        Ttl = 60,\n        Type = \"AAAA\",\n        Value = \"::0\",\n    });\n\n    var @alias = new Vercel.DnsRecord(\"alias\", new()\n    {\n        Domain = \"example.com\",\n        Ttl = 60,\n        Type = \"ALIAS\",\n        Value = \"example2.com.\",\n    });\n\n    var caa = new Vercel.DnsRecord(\"caa\", new()\n    {\n        Domain = \"example.com\",\n        Ttl = 60,\n        Type = \"CAA\",\n        Value = \"1 issue \\\"letsencrypt.org\\\"\",\n    });\n\n    var cname = new Vercel.DnsRecord(\"cname\", new()\n    {\n        Domain = \"example.com\",\n        Ttl = 60,\n        Type = \"CNAME\",\n        Value = \"example2.com.\",\n    });\n\n    var mx = new Vercel.DnsRecord(\"mx\", new()\n    {\n        Domain = \"example.com\",\n        MxPriority = 333,\n        Ttl = 60,\n        Type = \"MX\",\n        Value = \"example2.com.\",\n    });\n\n    var srv = new Vercel.DnsRecord(\"srv\", new()\n    {\n        Domain = \"example.com\",\n        Srv = new Vercel.Inputs.DnsRecordSrvArgs\n        {\n            Port = 6000,\n            Priority = 127,\n            Target = \"example2.com.\",\n            Weight = 60,\n        },\n        Ttl = 60,\n        Type = \"SRV\",\n    });\n\n    var txt = new Vercel.DnsRecord(\"txt\", new()\n    {\n        Domain = \"example.com\",\n        Ttl = 60,\n        Type = \"TXT\",\n        Value = \"some text value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.NewDnsRecord(ctx, \"dnsRecord\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tType:   pulumi.String(\"A\"),\n\t\t\tValue:  pulumi.String(\"192.168.0.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"aaaa\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tType:   pulumi.String(\"AAAA\"),\n\t\t\tValue:  pulumi.String(\"::0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"alias\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tType:   pulumi.String(\"ALIAS\"),\n\t\t\tValue:  pulumi.String(\"example2.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"caa\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tType:   pulumi.String(\"CAA\"),\n\t\t\tValue:  pulumi.String(\"1 issue \\\"letsencrypt.org\\\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"cname\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tType:   pulumi.String(\"CNAME\"),\n\t\t\tValue:  pulumi.String(\"example2.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"mx\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain:     pulumi.String(\"example.com\"),\n\t\t\tMxPriority: pulumi.Int(333),\n\t\t\tTtl:        pulumi.Int(60),\n\t\t\tType:       pulumi.String(\"MX\"),\n\t\t\tValue:      pulumi.String(\"example2.com.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"srv\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tSrv: \u0026vercel.DnsRecordSrvArgs{\n\t\t\t\tPort:     pulumi.Int(6000),\n\t\t\t\tPriority: pulumi.Int(127),\n\t\t\t\tTarget:   pulumi.String(\"example2.com.\"),\n\t\t\t\tWeight:   pulumi.Int(60),\n\t\t\t},\n\t\t\tTtl:  pulumi.Int(60),\n\t\t\tType: pulumi.String(\"SRV\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewDnsRecord(ctx, \"txt\", \u0026vercel.DnsRecordArgs{\n\t\t\tDomain: pulumi.String(\"example.com\"),\n\t\t\tTtl:    pulumi.Int(60),\n\t\t\tType:   pulumi.String(\"TXT\"),\n\t\t\tValue:  pulumi.String(\"some text value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.DnsRecord;\nimport com.pulumi.vercel.DnsRecordArgs;\nimport com.pulumi.vercel.inputs.DnsRecordSrvArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dnsRecord = new DnsRecord(\"dnsRecord\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .ttl(60)\n            .type(\"A\")\n            .value(\"192.168.0.1\")\n            .build());\n\n        var aaaa = new DnsRecord(\"aaaa\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .ttl(60)\n            .type(\"AAAA\")\n            .value(\"::0\")\n            .build());\n\n        var alias = new DnsRecord(\"alias\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .ttl(60)\n            .type(\"ALIAS\")\n            .value(\"example2.com.\")\n            .build());\n\n        var caa = new DnsRecord(\"caa\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .ttl(60)\n            .type(\"CAA\")\n            .value(\"1 issue \\\"letsencrypt.org\\\"\")\n            .build());\n\n        var cname = new DnsRecord(\"cname\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .ttl(60)\n            .type(\"CNAME\")\n            .value(\"example2.com.\")\n            .build());\n\n        var mx = new DnsRecord(\"mx\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .mxPriority(333)\n            .ttl(60)\n            .type(\"MX\")\n            .value(\"example2.com.\")\n            .build());\n\n        var srv = new DnsRecord(\"srv\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .srv(DnsRecordSrvArgs.builder()\n                .port(6000)\n                .priority(127)\n                .target(\"example2.com.\")\n                .weight(60)\n                .build())\n            .ttl(60)\n            .type(\"SRV\")\n            .build());\n\n        var txt = new DnsRecord(\"txt\", DnsRecordArgs.builder()        \n            .domain(\"example.com\")\n            .ttl(60)\n            .type(\"TXT\")\n            .value(\"some text value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dnsRecord:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      # for subdomain.example.com\n      ttl: 60\n      type: A\n      value: 192.168.0.1\n  aaaa:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      ttl: 60\n      type: AAAA\n      value: ::0\n  alias:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      ttl: 60\n      type: ALIAS\n      value: example2.com.\n  caa:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      ttl: 60\n      type: CAA\n      value: 1 issue \"letsencrypt.org\"\n  cname:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      ttl: 60\n      type: CNAME\n      value: example2.com.\n  mx:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      mxPriority: 333\n      ttl: 60\n      type: MX\n      value: example2.com.\n  srv:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      srv:\n        port: 6000\n        priority: 127\n        target: example2.com.\n        weight: 60\n      ttl: 60\n      type: SRV\n  txt:\n    type: vercel:DnsRecord\n    properties:\n      domain: example.com\n      ttl: 60\n      type: TXT\n      value: some text value\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIf importing into a personal account, or with a team configured on the provider, simply use the record id. - record_id can be taken from the network tab on the domains page.\n\n```sh\n $ pulumi import vercel:index/dnsRecord:DnsRecord example rec_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n Alternatively, you can import via the team_id and record_id. - team_id can be found in the team `settings` tab in the Vercel UI. - record_id can be taken from the network tab on the domains page.\n\n```sh\n $ pulumi import vercel:index/dnsRecord:DnsRecord example team_xxxxxxxxxxxxxxxxxxxxxxxx/rec_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n ",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain name, or zone, that the DNS record should be created beneath.\n"
                },
                "mxPriority": {
                    "type": "integer",
                    "description": "The priority of the MX record. The priority specifies the sequence that an email server receives emails. A smaller value indicates a higher priority.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The subdomain name of the record. This should be an empty string if the rercord is for the root domain.\n"
                },
                "srv": {
                    "$ref": "#/types/vercel:index/DnsRecordSrv:DnsRecordSrv",
                    "description": "Settings for an SRV record.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID that the domain and DNS records belong to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The TTL value in seconds. Must be a number between 60 and 2147483647. If unspecified, it will default to 60 seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of DNS record. Available types: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `MX`, `NS`, `SRV`, `TXT`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the DNS record. The format depends on the 'type' property.\nFor an 'A' record, this should be a valid IPv4 address.\nFor an 'AAAA' record, this should be an IPv6 address.\nFor 'ALIAS' records, this should be a hostname.\nFor 'CAA' records, this should specify specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.\nFor 'CNAME' records, this should be a different domain name.\nFor 'MX' records, this should specify the mail server responsible for accepting messages on behalf of the domain name.\nFor 'TXT' records, this can contain arbitrary text.\n"
                }
            },
            "required": [
                "domain",
                "name",
                "teamId",
                "ttl",
                "type"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The domain name, or zone, that the DNS record should be created beneath.\n"
                },
                "mxPriority": {
                    "type": "integer",
                    "description": "The priority of the MX record. The priority specifies the sequence that an email server receives emails. A smaller value indicates a higher priority.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The subdomain name of the record. This should be an empty string if the rercord is for the root domain.\n"
                },
                "srv": {
                    "$ref": "#/types/vercel:index/DnsRecordSrv:DnsRecordSrv",
                    "description": "Settings for an SRV record.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID that the domain and DNS records belong to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The TTL value in seconds. Must be a number between 60 and 2147483647. If unspecified, it will default to 60 seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of DNS record. Available types: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `MX`, `NS`, `SRV`, `TXT`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the DNS record. The format depends on the 'type' property.\nFor an 'A' record, this should be a valid IPv4 address.\nFor an 'AAAA' record, this should be an IPv6 address.\nFor 'ALIAS' records, this should be a hostname.\nFor 'CAA' records, this should specify specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.\nFor 'CNAME' records, this should be a different domain name.\nFor 'MX' records, this should specify the mail server responsible for accepting messages on behalf of the domain name.\nFor 'TXT' records, this can contain arbitrary text.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsRecord resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The domain name, or zone, that the DNS record should be created beneath.\n"
                    },
                    "mxPriority": {
                        "type": "integer",
                        "description": "The priority of the MX record. The priority specifies the sequence that an email server receives emails. A smaller value indicates a higher priority.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The subdomain name of the record. This should be an empty string if the rercord is for the root domain.\n"
                    },
                    "srv": {
                        "$ref": "#/types/vercel:index/DnsRecordSrv:DnsRecordSrv",
                        "description": "Settings for an SRV record.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID that the domain and DNS records belong to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The TTL value in seconds. Must be a number between 60 and 2147483647. If unspecified, it will default to 60 seconds.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of DNS record. Available types: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `MX`, `NS`, `SRV`, `TXT`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the DNS record. The format depends on the 'type' property.\nFor an 'A' record, this should be a valid IPv4 address.\nFor an 'AAAA' record, this should be an IPv6 address.\nFor 'ALIAS' records, this should be a hostname.\nFor 'CAA' records, this should specify specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.\nFor 'CNAME' records, this should be a different domain name.\nFor 'MX' records, this should specify the mail server responsible for accepting messages on behalf of the domain name.\nFor 'TXT' records, this can contain arbitrary text.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/project:Project": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\n// A project that is connected to a git repository.\n// Deployments will be created automatically\n// on every branch push and merges onto the Production Branch.\nconst withGit = new vercel.Project(\"withGit\", {\n    framework: \"nextjs\",\n    gitRepository: {\n        repo: \"vercel/some-repo\",\n        type: \"github\",\n    },\n});\n// A project that is not connected to a git repository.\n// Deployments will need to be created manually through\n// terraform, or via the vercel CLI.\nconst example = new vercel.Project(\"example\", {framework: \"nextjs\"});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\n# A project that is connected to a git repository.\n# Deployments will be created automatically\n# on every branch push and merges onto the Production Branch.\nwith_git = vercel.Project(\"withGit\",\n    framework=\"nextjs\",\n    git_repository=vercel.ProjectGitRepositoryArgs(\n        repo=\"vercel/some-repo\",\n        type=\"github\",\n    ))\n# A project that is not connected to a git repository.\n# Deployments will need to be created manually through\n# terraform, or via the vercel CLI.\nexample = vercel.Project(\"example\", framework=\"nextjs\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // A project that is connected to a git repository.\n    // Deployments will be created automatically\n    // on every branch push and merges onto the Production Branch.\n    var withGit = new Vercel.Project(\"withGit\", new()\n    {\n        Framework = \"nextjs\",\n        GitRepository = new Vercel.Inputs.ProjectGitRepositoryArgs\n        {\n            Repo = \"vercel/some-repo\",\n            Type = \"github\",\n        },\n    });\n\n    // A project that is not connected to a git repository.\n    // Deployments will need to be created manually through\n    // terraform, or via the vercel CLI.\n    var example = new Vercel.Project(\"example\", new()\n    {\n        Framework = \"nextjs\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vercel.NewProject(ctx, \"withGit\", \u0026vercel.ProjectArgs{\n\t\t\tFramework: pulumi.String(\"nextjs\"),\n\t\t\tGitRepository: \u0026vercel.ProjectGitRepositoryArgs{\n\t\t\t\tRepo: pulumi.String(\"vercel/some-repo\"),\n\t\t\t\tType: pulumi.String(\"github\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewProject(ctx, \"example\", \u0026vercel.ProjectArgs{\n\t\t\tFramework: pulumi.String(\"nextjs\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.inputs.ProjectGitRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var withGit = new Project(\"withGit\", ProjectArgs.builder()        \n            .framework(\"nextjs\")\n            .gitRepository(ProjectGitRepositoryArgs.builder()\n                .repo(\"vercel/some-repo\")\n                .type(\"github\")\n                .build())\n            .build());\n\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .framework(\"nextjs\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # A project that is connected to a git repository.\n  # // Deployments will be created automatically\n  # // on every branch push and merges onto the Production Branch.\n  withGit:\n    type: vercel:Project\n    properties:\n      framework: nextjs\n      gitRepository:\n        repo: vercel/some-repo\n        type: github\n  # A project that is not connected to a git repository.\n  # // Deployments will need to be created manually through\n  # // terraform, or via the vercel CLI.\n  example:\n    type: vercel:Project\n    properties:\n      framework: nextjs\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIf importing into a personal account, or with a team configured on the provider, simply use the project ID. - project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n $ pulumi import vercel:index/project:Project example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n Alternatively, you can import via the team_id and project_id. - team_id can be found in the team `settings` tab in the Vercel UI. - project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n $ pulumi import vercel:index/project:Project example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n ",
            "properties": {
                "buildCommand": {
                    "type": "string",
                    "description": "The build command for this project. If omitted, this value will be automatically detected.\n"
                },
                "devCommand": {
                    "type": "string",
                    "description": "The dev command for this project. If omitted, this value will be automatically detected.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectEnvironment:ProjectEnvironment"
                    },
                    "description": "A set of Environment Variables that should be configured for the project.\n"
                },
                "framework": {
                    "type": "string",
                    "description": "The framework that is being used for this project. If omitted, no framework is selected.\n"
                },
                "gitRepository": {
                    "$ref": "#/types/vercel:index/ProjectGitRepository:ProjectGitRepository",
                    "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.\n"
                },
                "ignoreCommand": {
                    "type": "string",
                    "description": "When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.\n"
                },
                "installCommand": {
                    "type": "string",
                    "description": "The install command for this project. If omitted, this value will be automatically detected.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The desired name for the project.\n"
                },
                "outputDirectory": {
                    "type": "string",
                    "description": "The output directory of the project. If omitted, this value will be automatically detected.\n"
                },
                "passwordProtection": {
                    "$ref": "#/types/vercel:index/ProjectPasswordProtection:ProjectPasswordProtection",
                    "description": "Ensures visitors of your Preview Deployments must enter a password in order to gain access.\n"
                },
                "publicSource": {
                    "type": "boolean",
                    "description": "By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `public_source` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.\n"
                },
                "rootDirectory": {
                    "type": "string",
                    "description": "The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.\n"
                },
                "serverlessFunctionRegion": {
                    "type": "string",
                    "description": "The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "vercelAuthentication": {
                    "$ref": "#/types/vercel:index/ProjectVercelAuthentication:ProjectVercelAuthentication",
                    "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.\n"
                }
            },
            "required": [
                "name",
                "serverlessFunctionRegion",
                "teamId"
            ],
            "inputProperties": {
                "buildCommand": {
                    "type": "string",
                    "description": "The build command for this project. If omitted, this value will be automatically detected.\n"
                },
                "devCommand": {
                    "type": "string",
                    "description": "The dev command for this project. If omitted, this value will be automatically detected.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vercel:index/ProjectEnvironment:ProjectEnvironment"
                    },
                    "description": "A set of Environment Variables that should be configured for the project.\n"
                },
                "framework": {
                    "type": "string",
                    "description": "The framework that is being used for this project. If omitted, no framework is selected.\n"
                },
                "gitRepository": {
                    "$ref": "#/types/vercel:index/ProjectGitRepository:ProjectGitRepository",
                    "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.\n"
                },
                "ignoreCommand": {
                    "type": "string",
                    "description": "When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.\n"
                },
                "installCommand": {
                    "type": "string",
                    "description": "The install command for this project. If omitted, this value will be automatically detected.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The desired name for the project.\n"
                },
                "outputDirectory": {
                    "type": "string",
                    "description": "The output directory of the project. If omitted, this value will be automatically detected.\n"
                },
                "passwordProtection": {
                    "$ref": "#/types/vercel:index/ProjectPasswordProtection:ProjectPasswordProtection",
                    "description": "Ensures visitors of your Preview Deployments must enter a password in order to gain access.\n"
                },
                "publicSource": {
                    "type": "boolean",
                    "description": "By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `public_source` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.\n"
                },
                "rootDirectory": {
                    "type": "string",
                    "description": "The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.\n"
                },
                "serverlessFunctionRegion": {
                    "type": "string",
                    "description": "The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "vercelAuthentication": {
                    "$ref": "#/types/vercel:index/ProjectVercelAuthentication:ProjectVercelAuthentication",
                    "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "buildCommand": {
                        "type": "string",
                        "description": "The build command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "devCommand": {
                        "type": "string",
                        "description": "The dev command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vercel:index/ProjectEnvironment:ProjectEnvironment"
                        },
                        "description": "A set of Environment Variables that should be configured for the project.\n"
                    },
                    "framework": {
                        "type": "string",
                        "description": "The framework that is being used for this project. If omitted, no framework is selected.\n"
                    },
                    "gitRepository": {
                        "$ref": "#/types/vercel:index/ProjectGitRepository:ProjectGitRepository",
                        "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.\n"
                    },
                    "ignoreCommand": {
                        "type": "string",
                        "description": "When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.\n"
                    },
                    "installCommand": {
                        "type": "string",
                        "description": "The install command for this project. If omitted, this value will be automatically detected.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The desired name for the project.\n"
                    },
                    "outputDirectory": {
                        "type": "string",
                        "description": "The output directory of the project. If omitted, this value will be automatically detected.\n"
                    },
                    "passwordProtection": {
                        "$ref": "#/types/vercel:index/ProjectPasswordProtection:ProjectPasswordProtection",
                        "description": "Ensures visitors of your Preview Deployments must enter a password in order to gain access.\n"
                    },
                    "publicSource": {
                        "type": "boolean",
                        "description": "By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `public_source` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.\n"
                    },
                    "rootDirectory": {
                        "type": "string",
                        "description": "The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.\n"
                    },
                    "serverlessFunctionRegion": {
                        "type": "string",
                        "description": "The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "vercelAuthentication": {
                        "$ref": "#/types/vercel:index/ProjectVercelAuthentication:ProjectVercelAuthentication",
                        "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/projectDomain:ProjectDomain": {
            "description": "Provides a Project Domain resource.\n\nA Project Domain is used to associate a domain name with a `vercel.Project`.\n\nBy default, Project Domains will be automatically applied to any `production` deployments.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst exampleProject = new vercel.Project(\"exampleProject\", {});\n// A simple domain that will be automatically\n// applied to each production deployment\nconst exampleProjectDomain = new vercel.ProjectDomain(\"exampleProjectDomain\", {\n    projectId: exampleProject.id,\n    domain: \"i-love.vercel.app\",\n});\n// A redirect of a domain name to a second domain name.\n// The status_code can optionally be controlled.\nconst exampleRedirect = new vercel.ProjectDomain(\"exampleRedirect\", {\n    projectId: exampleProject.id,\n    domain: \"i-also-love.vercel.app\",\n    redirect: exampleProjectDomain.domain,\n    redirectStatusCode: 307,\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample_project = vercel.Project(\"exampleProject\")\n# A simple domain that will be automatically\n# applied to each production deployment\nexample_project_domain = vercel.ProjectDomain(\"exampleProjectDomain\",\n    project_id=example_project.id,\n    domain=\"i-love.vercel.app\")\n# A redirect of a domain name to a second domain name.\n# The status_code can optionally be controlled.\nexample_redirect = vercel.ProjectDomain(\"exampleRedirect\",\n    project_id=example_project.id,\n    domain=\"i-also-love.vercel.app\",\n    redirect=example_project_domain.domain,\n    redirect_status_code=307)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new Vercel.Project(\"exampleProject\");\n\n    // A simple domain that will be automatically\n    // applied to each production deployment\n    var exampleProjectDomain = new Vercel.ProjectDomain(\"exampleProjectDomain\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Domain = \"i-love.vercel.app\",\n    });\n\n    // A redirect of a domain name to a second domain name.\n    // The status_code can optionally be controlled.\n    var exampleRedirect = new Vercel.ProjectDomain(\"exampleRedirect\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Domain = \"i-also-love.vercel.app\",\n        Redirect = exampleProjectDomain.Domain,\n        RedirectStatusCode = 307,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := vercel.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleProjectDomain, err := vercel.NewProjectDomain(ctx, \"exampleProjectDomain\", \u0026vercel.ProjectDomainArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tDomain:    pulumi.String(\"i-love.vercel.app\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewProjectDomain(ctx, \"exampleRedirect\", \u0026vercel.ProjectDomainArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tDomain:             pulumi.String(\"i-also-love.vercel.app\"),\n\t\t\tRedirect:           exampleProjectDomain.Domain,\n\t\t\tRedirectStatusCode: pulumi.Int(307),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectDomain;\nimport com.pulumi.vercel.ProjectDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleProjectDomain = new ProjectDomain(\"exampleProjectDomain\", ProjectDomainArgs.builder()        \n            .projectId(exampleProject.id())\n            .domain(\"i-love.vercel.app\")\n            .build());\n\n        var exampleRedirect = new ProjectDomain(\"exampleRedirect\", ProjectDomainArgs.builder()        \n            .projectId(exampleProject.id())\n            .domain(\"i-also-love.vercel.app\")\n            .redirect(exampleProjectDomain.domain())\n            .redirectStatusCode(307)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: vercel:Project\n  # A simple domain that will be automatically\n  # applied to each production deployment\n  exampleProjectDomain:\n    type: vercel:ProjectDomain\n    properties:\n      projectId: ${exampleProject.id}\n      domain: i-love.vercel.app\n  # A redirect of a domain name to a second domain name.\n  # The status_code can optionally be controlled.\n  exampleRedirect:\n    type: vercel:ProjectDomain\n    properties:\n      projectId: ${exampleProject.id}\n      domain: i-also-love.vercel.app\n      redirect: ${exampleProjectDomain.domain}\n      redirectStatusCode: 307\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIf importing into a personal account, or with a team configured on the provider, simply use the project ID and domain. - project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n $ pulumi import vercel:index/projectDomain:ProjectDomain example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example.com\n```\n\n Alternatively, you can import via the team_id, project_id and domain name. - team_id can be found in the team `settings` tab in the Vercel UI. - project_id can be found in the project `settings` tab in the Vercel UI.\n\n```sh\n $ pulumi import vercel:index/projectDomain:ProjectDomain example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example.com\n```\n\n ",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain name to associate with the project.\n"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID to add the deployment to.\n"
                },
                "redirect": {
                    "type": "string",
                    "description": "The domain name that serves as a target destination for redirects.\n"
                },
                "redirectStatusCode": {
                    "type": "integer",
                    "description": "The HTTP status code to use when serving as a redirect.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "required": [
                "domain",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The domain name to associate with the project.\n"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID to add the deployment to.\n"
                },
                "redirect": {
                    "type": "string",
                    "description": "The domain name that serves as a target destination for redirects.\n"
                },
                "redirectStatusCode": {
                    "type": "integer",
                    "description": "The HTTP status code to use when serving as a redirect.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectDomain resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The domain name to associate with the project.\n"
                    },
                    "gitBranch": {
                        "type": "string",
                        "description": "Git branch to link to the project domain. Deployments from this git branch will be assigned the domain name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID to add the deployment to.\n"
                    },
                    "redirect": {
                        "type": "string",
                        "description": "The domain name that serves as a target destination for redirects.\n"
                    },
                    "redirectStatusCode": {
                        "type": "integer",
                        "description": "The HTTP status code to use when serving as a redirect.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team the project exists under. Required when configuring a team resource if a default team has not been set in the provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst exampleProject = new vercel.Project(\"exampleProject\", {gitRepository: {\n    type: \"github\",\n    repo: \"vercel/some-repo\",\n}});\n// An environment variable that will be created\n// for this project for the \"production\" environment.\nconst exampleProjectEnvironmentVariable = new vercel.ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", {\n    projectId: exampleProject.id,\n    key: \"foo\",\n    value: \"bar\",\n    targets: [\"production\"],\n});\n// An environment variable that will be created\n// for this project for the \"preview\" environment when the branch is \"staging\".\nconst exampleGitBranch = new vercel.ProjectEnvironmentVariable(\"exampleGitBranch\", {\n    projectId: exampleProject.id,\n    key: \"foo\",\n    value: \"bar-staging\",\n    targets: [\"preview\"],\n    gitBranch: \"staging\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample_project = vercel.Project(\"exampleProject\", git_repository=vercel.ProjectGitRepositoryArgs(\n    type=\"github\",\n    repo=\"vercel/some-repo\",\n))\n# An environment variable that will be created\n# for this project for the \"production\" environment.\nexample_project_environment_variable = vercel.ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\",\n    project_id=example_project.id,\n    key=\"foo\",\n    value=\"bar\",\n    targets=[\"production\"])\n# An environment variable that will be created\n# for this project for the \"preview\" environment when the branch is \"staging\".\nexample_git_branch = vercel.ProjectEnvironmentVariable(\"exampleGitBranch\",\n    project_id=example_project.id,\n    key=\"foo\",\n    value=\"bar-staging\",\n    targets=[\"preview\"],\n    git_branch=\"staging\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new Vercel.Project(\"exampleProject\", new()\n    {\n        GitRepository = new Vercel.Inputs.ProjectGitRepositoryArgs\n        {\n            Type = \"github\",\n            Repo = \"vercel/some-repo\",\n        },\n    });\n\n    // An environment variable that will be created\n    // for this project for the \"production\" environment.\n    var exampleProjectEnvironmentVariable = new Vercel.ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Key = \"foo\",\n        Value = \"bar\",\n        Targets = new[]\n        {\n            \"production\",\n        },\n    });\n\n    // An environment variable that will be created\n    // for this project for the \"preview\" environment when the branch is \"staging\".\n    var exampleGitBranch = new Vercel.ProjectEnvironmentVariable(\"exampleGitBranch\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Key = \"foo\",\n        Value = \"bar-staging\",\n        Targets = new[]\n        {\n            \"preview\",\n        },\n        GitBranch = \"staging\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := vercel.NewProject(ctx, \"exampleProject\", \u0026vercel.ProjectArgs{\n\t\t\tGitRepository: \u0026vercel.ProjectGitRepositoryArgs{\n\t\t\t\tType: pulumi.String(\"github\"),\n\t\t\t\tRepo: pulumi.String(\"vercel/some-repo\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewProjectEnvironmentVariable(ctx, \"exampleProjectEnvironmentVariable\", \u0026vercel.ProjectEnvironmentVariableArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tKey:       pulumi.String(\"foo\"),\n\t\t\tValue:     pulumi.String(\"bar\"),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewProjectEnvironmentVariable(ctx, \"exampleGitBranch\", \u0026vercel.ProjectEnvironmentVariableArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tKey:       pulumi.String(\"foo\"),\n\t\t\tValue:     pulumi.String(\"bar-staging\"),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"preview\"),\n\t\t\t},\n\t\t\tGitBranch: pulumi.String(\"staging\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.inputs.ProjectGitRepositoryArgs;\nimport com.pulumi.vercel.ProjectEnvironmentVariable;\nimport com.pulumi.vercel.ProjectEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .gitRepository(ProjectGitRepositoryArgs.builder()\n                .type(\"github\")\n                .repo(\"vercel/some-repo\")\n                .build())\n            .build());\n\n        var exampleProjectEnvironmentVariable = new ProjectEnvironmentVariable(\"exampleProjectEnvironmentVariable\", ProjectEnvironmentVariableArgs.builder()        \n            .projectId(exampleProject.id())\n            .key(\"foo\")\n            .value(\"bar\")\n            .targets(\"production\")\n            .build());\n\n        var exampleGitBranch = new ProjectEnvironmentVariable(\"exampleGitBranch\", ProjectEnvironmentVariableArgs.builder()        \n            .projectId(exampleProject.id())\n            .key(\"foo\")\n            .value(\"bar-staging\")\n            .targets(\"preview\")\n            .gitBranch(\"staging\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: vercel:Project\n    properties:\n      gitRepository:\n        type: github\n        repo: vercel/some-repo\n  # An environment variable that will be created\n  # for this project for the \"production\" environment.\n  exampleProjectEnvironmentVariable:\n    type: vercel:ProjectEnvironmentVariable\n    properties:\n      projectId: ${exampleProject.id}\n      key: foo\n      value: bar\n      targets:\n        - production\n  # An environment variable that will be created\n  # for this project for the \"preview\" environment when the branch is \"staging\".\n  exampleGitBranch:\n    type: vercel:ProjectEnvironmentVariable\n    properties:\n      projectId: ${exampleProject.id}\n      key: foo\n      value: bar-staging\n      targets:\n        - preview\n      gitBranch: staging\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIf importing into a personal account, or with a team configured on the provider, simply use the project_id and environment variable id. - project_id can be found in the project `settings` tab in the Vercel UI. - environment variable id can be taken from the network tab on the project page.\n\n```sh\n $ pulumi import vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/FdT2e1E5Of6Cihmt\n```\n\n Alternatively, you can import via the team_id, project_id and environment variable id. - team_id can be found in the team `settings` tab in the Vercel UI. - project_id can be found in the project `settings` tab in the Vercel UI. - environment variable id can be taken from the network tab on the project page.\n\n```sh\n $ pulumi import vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/FdT2e1E5Of6Cihmt\n```\n\n ",
            "properties": {
                "gitBranch": {
                    "type": "string",
                    "description": "The git branch of the Environment Variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Vercel project.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "required": [
                "key",
                "projectId",
                "targets",
                "teamId",
                "value"
            ],
            "inputProperties": {
                "gitBranch": {
                    "type": "string",
                    "description": "The git branch of the Environment Variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Vercel project.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "key",
                "projectId",
                "targets",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectEnvironmentVariable resources.\n",
                "properties": {
                    "gitBranch": {
                        "type": "string",
                        "description": "The git branch of the Environment Variable.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the Environment Variable.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Vercel project.\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the Environment Variable.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable": {
            "description": "Provides a Shared Environment Variable resource.\n\nA Shared Environment Variable resource defines an Environment Variable that can be shared between multiple Vercel Projects.\n\nFor more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/environment-variables/shared-environment-variables).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vercel from \"@pulumi/vercel\";\n\nconst exampleProject = new vercel.Project(\"exampleProject\", {gitRepository: {\n    type: \"github\",\n    repo: \"vercel/some-repo\",\n}});\n// A shared environment variable that will be created\n// and associated with the \"example\" project.\nconst exampleSharedEnvironmentVariable = new vercel.SharedEnvironmentVariable(\"exampleSharedEnvironmentVariable\", {\n    key: \"EXAMPLE\",\n    value: \"some_value\",\n    targets: [\"production\"],\n    projectIds: [exampleProject.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_vercel as vercel\n\nexample_project = vercel.Project(\"exampleProject\", git_repository=vercel.ProjectGitRepositoryArgs(\n    type=\"github\",\n    repo=\"vercel/some-repo\",\n))\n# A shared environment variable that will be created\n# and associated with the \"example\" project.\nexample_shared_environment_variable = vercel.SharedEnvironmentVariable(\"exampleSharedEnvironmentVariable\",\n    key=\"EXAMPLE\",\n    value=\"some_value\",\n    targets=[\"production\"],\n    project_ids=[example_project.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Vercel = Pulumi.Vercel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new Vercel.Project(\"exampleProject\", new()\n    {\n        GitRepository = new Vercel.Inputs.ProjectGitRepositoryArgs\n        {\n            Type = \"github\",\n            Repo = \"vercel/some-repo\",\n        },\n    });\n\n    // A shared environment variable that will be created\n    // and associated with the \"example\" project.\n    var exampleSharedEnvironmentVariable = new Vercel.SharedEnvironmentVariable(\"exampleSharedEnvironmentVariable\", new()\n    {\n        Key = \"EXAMPLE\",\n        Value = \"some_value\",\n        Targets = new[]\n        {\n            \"production\",\n        },\n        ProjectIds = new[]\n        {\n            exampleProject.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumiverse/pulumi-vercel/sdk/go/vercel\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := vercel.NewProject(ctx, \"exampleProject\", \u0026vercel.ProjectArgs{\n\t\t\tGitRepository: \u0026vercel.ProjectGitRepositoryArgs{\n\t\t\t\tType: pulumi.String(\"github\"),\n\t\t\t\tRepo: pulumi.String(\"vercel/some-repo\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vercel.NewSharedEnvironmentVariable(ctx, \"exampleSharedEnvironmentVariable\", \u0026vercel.SharedEnvironmentVariableArgs{\n\t\t\tKey:   pulumi.String(\"EXAMPLE\"),\n\t\t\tValue: pulumi.String(\"some_value\"),\n\t\t\tTargets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t\tProjectIds: pulumi.StringArray{\n\t\t\t\texampleProject.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vercel.Project;\nimport com.pulumi.vercel.ProjectArgs;\nimport com.pulumi.vercel.inputs.ProjectGitRepositoryArgs;\nimport com.pulumi.vercel.SharedEnvironmentVariable;\nimport com.pulumi.vercel.SharedEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .gitRepository(ProjectGitRepositoryArgs.builder()\n                .type(\"github\")\n                .repo(\"vercel/some-repo\")\n                .build())\n            .build());\n\n        var exampleSharedEnvironmentVariable = new SharedEnvironmentVariable(\"exampleSharedEnvironmentVariable\", SharedEnvironmentVariableArgs.builder()        \n            .key(\"EXAMPLE\")\n            .value(\"some_value\")\n            .targets(\"production\")\n            .projectIds(exampleProject.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: vercel:Project\n    properties:\n      gitRepository:\n        type: github\n        repo: vercel/some-repo\n  # A shared environment variable that will be created\n  # and associated with the \"example\" project.\n  exampleSharedEnvironmentVariable:\n    type: vercel:SharedEnvironmentVariable\n    properties:\n      key: EXAMPLE\n      value: some_value\n      targets:\n        - production\n      projectIds:\n        - ${exampleProject.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nYou can import via the team_id and environment variable id. - team_id can be found in the team `settings` tab in the Vercel UI. - environment variable id can be taken from the network tab on the shared environment variable page.\n\n```sh\n $ pulumi import vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable example team_xxxxxxxxxxxxxxxxxxxxxxxx/env_yyyyyyyyyyyyy\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID of the Vercel project.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team. Shared environment variables require a team.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "required": [
                "key",
                "projectIds",
                "targets",
                "teamId",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID of the Vercel project.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Vercel team. Shared environment variables require a team.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "key",
                "projectIds",
                "targets",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SharedEnvironmentVariable resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The name of the Environment Variable.\n"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ID of the Vercel project.\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Vercel team. Shared environment variables require a team.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the Environment Variable.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        }
    },
    "types": {
        "vercel:index/DeploymentProjectSettings:DeploymentProjectSettings": {
            "properties": {
                "buildCommand": {
                    "type": "string",
                    "description": "The build command for this deployment. If omitted, this value will be taken from the project or automatically detected.\n"
                },
                "framework": {
                    "type": "string",
                    "description": "The framework that is being used for this deployment. If omitted, no framework is selected.\n"
                },
                "installCommand": {
                    "type": "string",
                    "description": "The install command for this deployment. If omitted, this value will be taken from the project or automatically detected.\n"
                },
                "outputDirectory": {
                    "type": "string",
                    "description": "The output directory of the deployment. If omitted, this value will be taken from the project or automatically detected.\n"
                },
                "rootDirectory": {
                    "type": "string",
                    "description": "The name of a directory or relative path to the source code of your project. When null is used it will default to the project root.\n"
                }
            },
            "type": "object"
        },
        "vercel:index/DnsRecordSrv:DnsRecordSrv": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "The TCP or UDP port on which the service is to be found.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the target host, lower value means more preferred.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The canonical hostname of the machine providing the service, ending in a dot.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "A relative weight for records with the same priority, higher value means higher chance of getting picked.\n"
                }
            },
            "type": "object",
            "required": [
                "port",
                "priority",
                "target",
                "weight"
            ]
        },
        "vercel:index/ProjectEnvironment:ProjectEnvironment": {
            "properties": {
                "gitBranch": {
                    "type": "string",
                    "description": "The git branch of the Environment Variable.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment Variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the Environment Variable.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the Environment Variable.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "targets",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "targets",
                        "value"
                    ]
                }
            }
        },
        "vercel:index/ProjectGitRepository:ProjectGitRepository": {
            "properties": {
                "productionBranch": {
                    "type": "string",
                    "description": "By default, every commit pushed to the main branch will trigger a Production Deployment instead of the usual Preview Deployment. You can switch to a different branch here.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "The name of the git repository. For example: `vercel/next.js`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The git provider of the repository. Must be either `github`, `gitlab`, or `bitbucket`.\n"
                }
            },
            "type": "object",
            "required": [
                "repo",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "productionBranch",
                        "repo",
                        "type"
                    ]
                }
            }
        },
        "vercel:index/ProjectPasswordProtection:ProjectPasswordProtection": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The password that visitors must enter to gain access to your Preview Deployments. Drift detection is not possible for this field.\n",
                    "secret": true
                },
                "protectProduction": {
                    "type": "boolean",
                    "description": "If true, production deployments will also be protected\n"
                }
            },
            "type": "object",
            "required": [
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "password",
                        "protectProduction"
                    ]
                }
            }
        },
        "vercel:index/ProjectVercelAuthentication:ProjectVercelAuthentication": {
            "properties": {
                "protectProduction": {
                    "type": "boolean",
                    "description": "If true, production deployments will also be protected\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "protectProduction"
                    ]
                }
            }
        },
        "vercel:index/getProjectEnvironment:getProjectEnvironment": {
            "properties": {
                "gitBranch": {
                    "type": "string",
                    "description": "The git branch of the environment variable.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the environment variable\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the environment variable.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments that the environment variable should be present on. Valid targets are either `production`, `preview`, or `development`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the environment variable.\n"
                }
            },
            "type": "object",
            "required": [
                "gitBranch",
                "id",
                "key",
                "targets",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectGitRepository:getProjectGitRepository": {
            "properties": {
                "productionBranch": {
                    "type": "string",
                    "description": "By default, every commit pushed to the main branch will trigger a Production Deployment instead of the usual Preview Deployment. You can switch to a different branch here.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "The name of the git repository. For example: `vercel/next.js`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The git provider of the repository. Must be either `github`, `gitlab`, or `bitbucket`.\n"
                }
            },
            "type": "object",
            "required": [
                "productionBranch",
                "repo",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectPasswordProtection:getProjectPasswordProtection": {
            "properties": {
                "protectProduction": {
                    "type": "boolean",
                    "description": "If true, production deployments will also be protected\n"
                }
            },
            "type": "object",
            "required": [
                "protectProduction"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vercel:index/getProjectVercelAuthentication:getProjectVercelAuthentication": {
            "properties": {
                "protectProduction": {
                    "type": "boolean",
                    "description": "If true, production deployments will also be protected\n"
                }
            },
            "type": "object",
            "required": [
                "protectProduction"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "version": "0.0.1-alpha.1690193173+5b5bbe07.dirty"
}